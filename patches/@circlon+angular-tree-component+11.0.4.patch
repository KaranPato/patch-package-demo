diff --git a/node_modules/@circlon/angular-tree-component/__ivy_ngcc__/fesm2015/circlon-angular-tree-component.js b/node_modules/@circlon/angular-tree-component/__ivy_ngcc__/fesm2015/circlon-angular-tree-component.js
new file mode 100644
index 0000000..139129a
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/__ivy_ngcc__/fesm2015/circlon-angular-tree-component.js
@@ -0,0 +1,2889 @@
+import { Directive, TemplateRef, ViewContainerRef, Input, Injectable, ɵɵdefineInjectable, Component, ViewEncapsulation, ElementRef, EventEmitter, ContentChild, ViewChild, Output, HostListener, Renderer2, NgZone, NgModule } from '@angular/core';
+import { CommonModule } from '@angular/common';
+import { autorun, reaction, computed as computed$1, observable as observable$1, action as action$1 } from 'mobx';
+
+import * as ɵngcc0 from '@angular/core';
+import * as ɵngcc1 from '@angular/common';
+
+function LoadingComponent_span_0_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelementStart(0, "span");
+    ɵngcc0.ɵɵtext(1, "loading...");
+    ɵngcc0.ɵɵelementEnd();
+} }
+const _c0 = function (a0) { return { $implicit: a0 }; };
+function TreeViewportComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelementContainerStart(0);
+    ɵngcc0.ɵɵelementStart(1, "div");
+    ɵngcc0.ɵɵprojection(2);
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementContainerEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵstyleProp("height", ctx_r0.getTotalHeight());
+} }
+const _c1 = function () { return { dontDetach: true }; };
+const _c2 = ["*"];
+const _c3 = ["loadingTemplate"];
+const _c4 = ["treeNodeTemplate"];
+const _c5 = ["treeNodeWrapperTemplate"];
+const _c6 = ["treeNodeFullTemplate"];
+const _c7 = ["viewport"];
+const _c8 = function (a0, a1, a2, a3) { return { loadingTemplate: a0, treeNodeTemplate: a1, treeNodeWrapperTemplate: a2, treeNodeFullTemplate: a3 }; };
+function TreeComponent_tree_node_collection_3_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelement(0, "tree-node-collection", 4);
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("nodes", ctx_r1.treeModel.roots)("treeModel", ctx_r1.treeModel)("templates", ɵngcc0.ɵɵpureFunction4(3, _c8, ctx_r1.loadingTemplate, ctx_r1.treeNodeTemplate, ctx_r1.treeNodeWrapperTemplate, ctx_r1.treeNodeFullTemplate));
+} }
+function TreeComponent_tree_node_drop_slot_4_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelement(0, "tree-node-drop-slot", 5);
+} if (rf & 2) {
+    const ctx_r2 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("dropIndex", 0)("node", ctx_r2.treeModel.virtualRoot);
+} }
+function TreeNodeComponent_ng_container_0_div_1_tree_node_drop_slot_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelement(0, "tree-node-drop-slot", 6);
+} if (rf & 2) {
+    const ctx_r2 = ɵngcc0.ɵɵnextContext(3);
+    ɵngcc0.ɵɵproperty("dropIndex", ctx_r2.node.index)("node", ctx_r2.node.parent);
+} }
+function TreeNodeComponent_ng_container_0_div_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelementStart(0, "div");
+    ɵngcc0.ɵɵtemplate(1, TreeNodeComponent_ng_container_0_div_1_tree_node_drop_slot_1_Template, 1, 2, "tree-node-drop-slot", 3);
+    ɵngcc0.ɵɵelement(2, "tree-node-wrapper", 4)(3, "tree-node-children", 5)(4, "tree-node-drop-slot", 6);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵclassMap(ctx_r1.node.getClass());
+    ɵngcc0.ɵɵclassProp("tree-node", true)("tree-node-expanded", ctx_r1.node.isExpanded && ctx_r1.node.hasChildren)("tree-node-collapsed", ctx_r1.node.isCollapsed && ctx_r1.node.hasChildren)("tree-node-leaf", ctx_r1.node.isLeaf)("tree-node-active", ctx_r1.node.isActive)("tree-node-focused", ctx_r1.node.isFocused);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.index === 0);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("node", ctx_r1.node)("index", ctx_r1.index)("templates", ctx_r1.templates);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("node", ctx_r1.node)("templates", ctx_r1.templates);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("dropIndex", ctx_r1.node.index + 1)("node", ctx_r1.node.parent);
+} }
+const _c9 = function (a0, a1, a2, a3) { return { $implicit: a0, node: a1, index: a2, templates: a3 }; };
+function TreeNodeComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelementContainerStart(0);
+    ɵngcc0.ɵɵtemplate(1, TreeNodeComponent_ng_container_0_div_1_Template, 5, 22, "div", 1);
+    ɵngcc0.ɵɵelementContainer(2, 2);
+    ɵngcc0.ɵɵelementContainerEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.templates.treeNodeFullTemplate);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0.templates.treeNodeFullTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction4(3, _c9, ctx_r0.node, ctx_r0.node, ctx_r0.index, ctx_r0.templates));
+} }
+function TreeNodeContent_span_0_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelementStart(0, "span");
+    ɵngcc0.ɵɵtext(1);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵtextInterpolate(ctx_r0.node.displayField);
+} }
+const _c10 = function (a0, a1, a2) { return { $implicit: a0, node: a1, index: a2 }; };
+function TreeNodeExpanderComponent_ng_container_0_span_1_Template(rf, ctx) { if (rf & 1) {
+    const _r4 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵelementStart(0, "span", 3);
+    ɵngcc0.ɵɵlistener("click", function TreeNodeExpanderComponent_ng_container_0_span_1_Template_span_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(2); return ɵngcc0.ɵɵresetView(ctx_r3.node.mouseAction("expanderClick", $event)); });
+    ɵngcc0.ɵɵelement(1, "span", 4);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵclassProp("toggle-children-wrapper-expanded", ctx_r1.node.isExpanded)("toggle-children-wrapper-collapsed", ctx_r1.node.isCollapsed);
+} }
+function TreeNodeExpanderComponent_ng_container_0_span_2_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelement(0, "span", 5);
+} }
+function TreeNodeExpanderComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelementContainerStart(0);
+    ɵngcc0.ɵɵtemplate(1, TreeNodeExpanderComponent_ng_container_0_span_1_Template, 2, 4, "span", 1);
+    ɵngcc0.ɵɵtemplate(2, TreeNodeExpanderComponent_ng_container_0_span_2_Template, 1, 0, "span", 2);
+    ɵngcc0.ɵɵelementContainerEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.node.hasChildren);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.node.hasChildren);
+} }
+function TreeNodeChildrenComponent_ng_container_0_div_1_tree_node_collection_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelement(0, "tree-node-collection", 4);
+} if (rf & 2) {
+    const ctx_r2 = ɵngcc0.ɵɵnextContext(3);
+    ɵngcc0.ɵɵproperty("nodes", ctx_r2.node.children)("templates", ctx_r2.templates)("treeModel", ctx_r2.node.treeModel);
+} }
+function TreeNodeChildrenComponent_ng_container_0_div_1_tree_loading_component_2_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelement(0, "tree-loading-component", 5);
+} if (rf & 2) {
+    const ctx_r3 = ɵngcc0.ɵɵnextContext(3);
+    ɵngcc0.ɵɵstyleProp("padding-left", ctx_r3.node.getNodePadding());
+    ɵngcc0.ɵɵproperty("template", ctx_r3.templates.loadingTemplate)("node", ctx_r3.node);
+} }
+function TreeNodeChildrenComponent_ng_container_0_div_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelementStart(0, "div");
+    ɵngcc0.ɵɵtemplate(1, TreeNodeChildrenComponent_ng_container_0_div_1_tree_node_collection_1_Template, 1, 3, "tree-node-collection", 2);
+    ɵngcc0.ɵɵtemplate(2, TreeNodeChildrenComponent_ng_container_0_div_1_tree_loading_component_2_Template, 1, 4, "tree-loading-component", 3);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵclassProp("tree-children", true)("tree-children-no-padding", ctx_r1.node.options.levelPadding);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.node.children);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.node.children);
+} }
+function TreeNodeChildrenComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelementContainerStart(0);
+    ɵngcc0.ɵɵtemplate(1, TreeNodeChildrenComponent_ng_container_0_div_1_Template, 3, 6, "div", 1);
+    ɵngcc0.ɵɵelementContainerEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("treeAnimateOpen", ctx_r0.node.isExpanded)("treeAnimateOpenSpeed", ctx_r0.node.options.animateSpeed)("treeAnimateOpenAcceleration", ctx_r0.node.options.animateAcceleration)("treeAnimateOpenEnabled", ctx_r0.node.options.animateExpand);
+} }
+function TreeNodeCollectionComponent_ng_container_0_tree_node_2_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelement(0, "tree-node", 2);
+} if (rf & 2) {
+    const node_r2 = ctx.$implicit;
+    const i_r3 = ctx.index;
+    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵproperty("node", node_r2)("index", i_r3)("templates", ctx_r1.templates);
+} }
+function TreeNodeCollectionComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelementContainerStart(0);
+    ɵngcc0.ɵɵelementStart(1, "div");
+    ɵngcc0.ɵɵtemplate(2, TreeNodeCollectionComponent_ng_container_0_tree_node_2_Template, 1, 3, "tree-node", 1);
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementContainerEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵstyleProp("margin-top", ctx_r0.marginTop);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.viewportNodes)("ngForTrackBy", ctx_r0.trackNode);
+} }
+function TreeNodeWrapperComponent_div_0_tree_node_checkbox_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelement(0, "tree-node-checkbox", 4);
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵproperty("node", ctx_r1.node);
+} }
+function TreeNodeWrapperComponent_div_0_Template(rf, ctx) { if (rf & 1) {
+    const _r3 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵelementStart(0, "div", 2);
+    ɵngcc0.ɵɵtemplate(1, TreeNodeWrapperComponent_div_0_tree_node_checkbox_1_Template, 1, 1, "tree-node-checkbox", 3);
+    ɵngcc0.ɵɵelement(2, "tree-node-expander", 4);
+    ɵngcc0.ɵɵelementStart(3, "div", 5);
+    ɵngcc0.ɵɵlistener("click", function TreeNodeWrapperComponent_div_0_Template_div_click_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r2.node.mouseAction("click", $event)); })("dblclick", function TreeNodeWrapperComponent_div_0_Template_div_dblclick_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r4.node.mouseAction("dblClick", $event)); })("mouseover", function TreeNodeWrapperComponent_div_0_Template_div_mouseover_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r5.node.mouseAction("mouseOver", $event)); })("mouseout", function TreeNodeWrapperComponent_div_0_Template_div_mouseout_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r6.node.mouseAction("mouseOut", $event)); })("contextmenu", function TreeNodeWrapperComponent_div_0_Template_div_contextmenu_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r7.node.mouseAction("contextMenu", $event)); })("treeDrop", function TreeNodeWrapperComponent_div_0_Template_div_treeDrop_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r8.node.onDrop($event)); })("treeDropDragOver", function TreeNodeWrapperComponent_div_0_Template_div_treeDropDragOver_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r9.node.mouseAction("dragOver", $event)); })("treeDropDragLeave", function TreeNodeWrapperComponent_div_0_Template_div_treeDropDragLeave_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r10.node.mouseAction("dragLeave", $event)); })("treeDropDragEnter", function TreeNodeWrapperComponent_div_0_Template_div_treeDropDragEnter_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r11.node.mouseAction("dragEnter", $event)); });
+    ɵngcc0.ɵɵelement(4, "tree-node-content", 6);
+    ɵngcc0.ɵɵelementEnd()();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵstyleProp("padding-left", ctx_r0.node.getNodePadding());
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.node.options.useCheckbox);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("node", ctx_r0.node);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵclassProp("node-content-wrapper-active", ctx_r0.node.isActive)("node-content-wrapper-focused", ctx_r0.node.isFocused);
+    ɵngcc0.ɵɵproperty("treeAllowDrop", ctx_r0.node.allowDrop)("allowDragoverStyling", ctx_r0.node.allowDragoverStyling())("treeDrag", ctx_r0.node)("treeDragEnabled", ctx_r0.node.allowDrag());
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("node", ctx_r0.node)("index", ctx_r0.index)("template", ctx_r0.templates.treeNodeTemplate);
+} }
+function TreeNodeCheckboxComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
+    const _r2 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵelementContainerStart(0);
+    ɵngcc0.ɵɵelementStart(1, "input", 1);
+    ɵngcc0.ɵɵlistener("click", function TreeNodeCheckboxComponent_ng_container_0_Template_input_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r1.node.mouseAction("checkboxClick", $event)); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementContainerEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("checked", ctx_r0.node.isSelected)("indeterminate", ctx_r0.node.isPartiallySelected);
+} }
+class TreeMobxAutorunDirective {
+    constructor(templateRef, viewContainer) {
+        this.templateRef = templateRef;
+        this.viewContainer = viewContainer;
+        this.templateBindings = {};
+    }
+    ngOnInit() {
+        this.view = this.viewContainer.createEmbeddedView(this.templateRef);
+        if (this.dispose) {
+            this.dispose();
+        }
+        if (this.shouldDetach()) {
+            this.view.detach();
+        }
+        this.autoDetect(this.view);
+    }
+    shouldDetach() {
+        return this.treeMobxAutorun && this.treeMobxAutorun.detach;
+    }
+    autoDetect(view) {
+        this.dispose = autorun(() => view.detectChanges());
+    }
+    ngOnDestroy() {
+        if (this.dispose) {
+            this.dispose();
+        }
+    }
+}
+TreeMobxAutorunDirective.ɵfac = function TreeMobxAutorunDirective_Factory(t) { return new (t || TreeMobxAutorunDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
+TreeMobxAutorunDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TreeMobxAutorunDirective, selectors: [["", "treeMobxAutorun", ""]], inputs: { treeMobxAutorun: "treeMobxAutorun" } });
+/** @nocollapse */
+TreeMobxAutorunDirective.ctorParameters = () => [
+    { type: TemplateRef },
+    { type: ViewContainerRef }
+];
+TreeMobxAutorunDirective.propDecorators = {
+    treeMobxAutorun: [{ type: Input }]
+};
+
+const KEYS = {
+    LEFT: 37,
+    UP: 38,
+    RIGHT: 39,
+    DOWN: 40,
+    ENTER: 13,
+    SPACE: 32,
+    CONTEXT_MENU: 32
+};
+
+const ɵ0 = (tree, node, $event) => node && node.toggleActivated(), ɵ1 = (tree, node, $event) => node && node.toggleActivated(true), ɵ2 = (tree, node, $event) => node && node.toggleSelected(), ɵ3 = (tree, node, $event) => node.setIsActive(true), ɵ4 = (tree, node, $event) => node.setIsActive(false), ɵ5 = (tree, node, $event) => node.setIsSelected(true), ɵ6 = (tree, node, $event) => node.setIsSelected(false), ɵ7 = (tree, node, $event) => node.focus(), ɵ8 = (tree, node, $event) => node.hasChildren && node.toggleExpanded(), ɵ9 = (tree, node, $event) => node.expand(), ɵ10 = (tree, node, $event) => node.collapse(), ɵ11 = (tree, node, $event) => tree.focusDrillDown(), ɵ12 = (tree, node, $event) => tree.focusDrillUp(), ɵ13 = (tree, node, $event) => tree.focusNextNode(), ɵ14 = (tree, node, $event) => tree.focusPreviousNode(), ɵ15 = (tree, node, $event, { from, to }) => {
+    // default action assumes from = node, to = {parent, index}
+    if ($event.ctrlKey) {
+        tree.copyNode(from, to);
+    }
+    else {
+        tree.moveNode(from, to);
+    }
+};
+const TREE_ACTIONS = {
+    TOGGLE_ACTIVE: ɵ0,
+    TOGGLE_ACTIVE_MULTI: ɵ1,
+    TOGGLE_SELECTED: ɵ2,
+    ACTIVATE: ɵ3,
+    DEACTIVATE: ɵ4,
+    SELECT: ɵ5,
+    DESELECT: ɵ6,
+    FOCUS: ɵ7,
+    TOGGLE_EXPANDED: ɵ8,
+    EXPAND: ɵ9,
+    COLLAPSE: ɵ10,
+    DRILL_DOWN: ɵ11,
+    DRILL_UP: ɵ12,
+    NEXT_NODE: ɵ13,
+    PREVIOUS_NODE: ɵ14,
+    MOVE_NODE: ɵ15
+};
+const defaultActionMapping = {
+    mouse: {
+        click: TREE_ACTIONS.TOGGLE_ACTIVE,
+        dblClick: null,
+        contextMenu: null,
+        expanderClick: TREE_ACTIONS.TOGGLE_EXPANDED,
+        checkboxClick: TREE_ACTIONS.TOGGLE_SELECTED,
+        drop: TREE_ACTIONS.MOVE_NODE
+    },
+    keys: {
+        [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,
+        [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,
+        [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,
+        [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,
+        [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,
+        [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE
+    }
+};
+class TreeOptions {
+    constructor(options = {}) {
+        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35;
+        this.options = options;
+        this.actionMapping = {
+            mouse: {
+                click: (_d = (_c = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.actionMapping) === null || _b === void 0 ? void 0 : _b.mouse) === null || _c === void 0 ? void 0 : _c.click) !== null && _d !== void 0 ? _d : defaultActionMapping.mouse.click,
+                dblClick: (_h = (_g = (_f = (_e = this.options) === null || _e === void 0 ? void 0 : _e.actionMapping) === null || _f === void 0 ? void 0 : _f.mouse) === null || _g === void 0 ? void 0 : _g.dblClick) !== null && _h !== void 0 ? _h : defaultActionMapping.mouse.dblClick,
+                contextMenu: (_m = (_l = (_k = (_j = this.options) === null || _j === void 0 ? void 0 : _j.actionMapping) === null || _k === void 0 ? void 0 : _k.mouse) === null || _l === void 0 ? void 0 : _l.contextMenu) !== null && _m !== void 0 ? _m : defaultActionMapping.mouse.contextMenu,
+                expanderClick: (_r = (_q = (_p = (_o = this.options) === null || _o === void 0 ? void 0 : _o.actionMapping) === null || _p === void 0 ? void 0 : _p.mouse) === null || _q === void 0 ? void 0 : _q.expanderClick) !== null && _r !== void 0 ? _r : defaultActionMapping.mouse.expanderClick,
+                checkboxClick: (_v = (_u = (_t = (_s = this.options) === null || _s === void 0 ? void 0 : _s.actionMapping) === null || _t === void 0 ? void 0 : _t.mouse) === null || _u === void 0 ? void 0 : _u.checkboxClick) !== null && _v !== void 0 ? _v : defaultActionMapping.mouse.checkboxClick,
+                drop: (_z = (_y = (_x = (_w = this.options) === null || _w === void 0 ? void 0 : _w.actionMapping) === null || _x === void 0 ? void 0 : _x.mouse) === null || _y === void 0 ? void 0 : _y.drop) !== null && _z !== void 0 ? _z : defaultActionMapping.mouse.drop,
+                dragStart: (_3 = (_2 = (_1 = (_0 = this.options) === null || _0 === void 0 ? void 0 : _0.actionMapping) === null || _1 === void 0 ? void 0 : _1.mouse) === null || _2 === void 0 ? void 0 : _2.dragStart) !== null && _3 !== void 0 ? _3 : undefined,
+                drag: (_7 = (_6 = (_5 = (_4 = this.options) === null || _4 === void 0 ? void 0 : _4.actionMapping) === null || _5 === void 0 ? void 0 : _5.mouse) === null || _6 === void 0 ? void 0 : _6.drag) !== null && _7 !== void 0 ? _7 : undefined,
+                dragEnd: (_11 = (_10 = (_9 = (_8 = this.options) === null || _8 === void 0 ? void 0 : _8.actionMapping) === null || _9 === void 0 ? void 0 : _9.mouse) === null || _10 === void 0 ? void 0 : _10.dragEnd) !== null && _11 !== void 0 ? _11 : undefined,
+                dragOver: (_15 = (_14 = (_13 = (_12 = this.options) === null || _12 === void 0 ? void 0 : _12.actionMapping) === null || _13 === void 0 ? void 0 : _13.mouse) === null || _14 === void 0 ? void 0 : _14.dragOver) !== null && _15 !== void 0 ? _15 : undefined,
+                dragLeave: (_19 = (_18 = (_17 = (_16 = this.options) === null || _16 === void 0 ? void 0 : _16.actionMapping) === null || _17 === void 0 ? void 0 : _17.mouse) === null || _18 === void 0 ? void 0 : _18.dragLeave) !== null && _19 !== void 0 ? _19 : undefined,
+                dragEnter: (_23 = (_22 = (_21 = (_20 = this.options) === null || _20 === void 0 ? void 0 : _20.actionMapping) === null || _21 === void 0 ? void 0 : _21.mouse) === null || _22 === void 0 ? void 0 : _22.dragEnter) !== null && _23 !== void 0 ? _23 : undefined,
+                mouseOver: (_27 = (_26 = (_25 = (_24 = this.options) === null || _24 === void 0 ? void 0 : _24.actionMapping) === null || _25 === void 0 ? void 0 : _25.mouse) === null || _26 === void 0 ? void 0 : _26.mouseOver) !== null && _27 !== void 0 ? _27 : undefined,
+                mouseOut: (_31 = (_30 = (_29 = (_28 = this.options) === null || _28 === void 0 ? void 0 : _28.actionMapping) === null || _29 === void 0 ? void 0 : _29.mouse) === null || _30 === void 0 ? void 0 : _30.mouseOut) !== null && _31 !== void 0 ? _31 : undefined,
+            },
+            keys: {
+                [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,
+                [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,
+                [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,
+                [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,
+                [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,
+                [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE
+            }
+        };
+        if ((_33 = (_32 = this.options) === null || _32 === void 0 ? void 0 : _32.actionMapping) === null || _33 === void 0 ? void 0 : _33.keys) {
+            this.actionMapping.keys = Object.assign(Object.assign({}, this.actionMapping.keys), this.options.actionMapping.keys);
+        }
+        if (options.rtl) {
+            this.actionMapping.keys[KEYS.RIGHT] = ((_34 = options.actionMapping) === null || _34 === void 0 ? void 0 : _34.keys[KEYS.RIGHT]) || TREE_ACTIONS.DRILL_UP;
+            this.actionMapping.keys[KEYS.LEFT] = ((_35 = options.actionMapping) === null || _35 === void 0 ? void 0 : _35.keys[KEYS.LEFT]) || TREE_ACTIONS.DRILL_DOWN;
+        }
+    }
+    get hasChildrenField() { return this.options.hasChildrenField || 'hasChildren'; }
+    get childrenField() { return this.options.childrenField || 'children'; }
+    get displayField() { return this.options.displayField || 'name'; }
+    get idField() { return this.options.idField || 'id'; }
+    get isExpandedField() { return this.options.isExpandedField || 'isExpanded'; }
+    get getChildren() { return this.options.getChildren; }
+    get levelPadding() { return this.options.levelPadding || 0; }
+    get useVirtualScroll() { return this.options.useVirtualScroll; }
+    get animateExpand() { return this.options.animateExpand; }
+    get animateSpeed() { return this.options.animateSpeed || 1; }
+    get animateAcceleration() { return this.options.animateAcceleration || 1.2; }
+    get scrollOnActivate() { return this.options.scrollOnActivate === undefined ? true : this.options.scrollOnActivate; }
+    get rtl() { return !!this.options.rtl; }
+    get rootId() { return this.options.rootId; }
+    get useCheckbox() { return this.options.useCheckbox; }
+    get useTriState() { return this.options.useTriState === undefined ? true : this.options.useTriState; }
+    get scrollContainer() { return this.options.scrollContainer; }
+    get allowDragoverStyling() { return this.options.allowDragoverStyling === undefined ? true : this.options.allowDragoverStyling; }
+    getNodeClone(node) {
+        if (this.options.getNodeClone) {
+            return this.options.getNodeClone(node);
+        }
+        // remove id from clone
+        // keeping ie11 compatibility
+        const nodeClone = Object.assign({}, node.data);
+        if (nodeClone.id) {
+            delete nodeClone.id;
+        }
+        return nodeClone;
+    }
+    allowDrop(element, to, $event) {
+        if (this.options.allowDrop instanceof Function) {
+            return this.options.allowDrop(element, to, $event);
+        }
+        else {
+            return this.options.allowDrop === undefined ? true : this.options.allowDrop;
+        }
+    }
+    allowDrag(node) {
+        if (this.options.allowDrag instanceof Function) {
+            return this.options.allowDrag(node);
+        }
+        else {
+            return this.options.allowDrag;
+        }
+    }
+    nodeClass(node) {
+        return this.options.nodeClass ? this.options.nodeClass(node) : '';
+    }
+    nodeHeight(node) {
+        if (node.data.virtual) {
+            return 0;
+        }
+        let nodeHeight = this.options.nodeHeight || 22;
+        if (typeof nodeHeight === 'function') {
+            nodeHeight = nodeHeight(node);
+        }
+        // account for drop slots:
+        return nodeHeight + (node.index === 0 ? 2 : 1) * this.dropSlotHeight;
+    }
+    get dropSlotHeight() {
+        return typeof this.options.dropSlotHeight === 'number' ? this.options.dropSlotHeight : 2;
+    }
+}
+
+const TREE_EVENTS = {
+    toggleExpanded: 'toggleExpanded',
+    activate: 'activate',
+    deactivate: 'deactivate',
+    nodeActivate: 'nodeActivate',
+    nodeDeactivate: 'nodeDeactivate',
+    select: 'select',
+    deselect: 'deselect',
+    focus: 'focus',
+    blur: 'blur',
+    initialized: 'initialized',
+    updateData: 'updateData',
+    moveNode: 'moveNode',
+    copyNode: 'copyNode',
+    event: 'event',
+    loadNodeChildren: 'loadNodeChildren',
+    changeFilter: 'changeFilter',
+    stateChange: 'stateChange'
+};
+
+var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
+    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
+    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
+    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
+    return c > 3 && r && Object.defineProperty(target, key, r), r;
+};
+var __metadata = (this && this.__metadata) || function (k, v) {
+    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
+};
+class TreeNode {
+    constructor(data, parent, treeModel, index) {
+        this.data = data;
+        this.parent = parent;
+        this.treeModel = treeModel;
+        this.position = 0;
+        this.allowDrop = (element, $event) => {
+            return this.options.allowDrop(element, { parent: this, index: 0 }, $event);
+        };
+        this.allowDragoverStyling = () => {
+            return this.options.allowDragoverStyling;
+        };
+        if (this.id === undefined || this.id === null) {
+            this.id = uuid();
+        } // Make sure there's a unique id without overriding existing ids to work with immutable data structures
+        this.index = index;
+        if (this.getField('children')) {
+            this._initChildren();
+        }
+        this.autoLoadChildren();
+    }
+    get isHidden() { return this.treeModel.isHidden(this); }
+    ;
+    get isExpanded() { return this.treeModel.isExpanded(this); }
+    ;
+    get isActive() { return this.treeModel.isActive(this); }
+    ;
+    get isFocused() { return this.treeModel.isNodeFocused(this); }
+    ;
+    get isSelected() {
+        if (this.isSelectable()) {
+            return this.treeModel.isSelected(this);
+        }
+        else {
+            return this.children.some((node) => node.isSelected);
+        }
+    }
+    ;
+    get isAllSelected() {
+        if (this.isSelectable()) {
+            return this.treeModel.isSelected(this);
+        }
+        else {
+            return this.children.every((node) => node.isAllSelected);
+        }
+    }
+    ;
+    get isPartiallySelected() {
+        return this.isSelected && !this.isAllSelected;
+    }
+    get level() {
+        return this.parent ? this.parent.level + 1 : 0;
+    }
+    get path() {
+        return this.parent ? [...this.parent.path, this.id] : [];
+    }
+    get elementRef() {
+        throw `Element Ref is no longer supported since introducing virtual scroll\n
+      You may use a template to obtain a reference to the element`;
+    }
+    get originalNode() { return this._originalNode; }
+    ;
+    // helper get functions:
+    get hasChildren() {
+        return !!(this.getField('hasChildren') || (this.children && this.children.length > 0));
+    }
+    get isCollapsed() { return !this.isExpanded; }
+    get isLeaf() { return !this.hasChildren; }
+    get isRoot() { return this.parent.data.virtual; }
+    get realParent() { return this.isRoot ? null : this.parent; }
+    // proxy functions:
+    get options() { return this.treeModel.options; }
+    fireEvent(event) { this.treeModel.fireEvent(event); }
+    // field accessors:
+    get displayField() {
+        return this.getField('display');
+    }
+    get id() {
+        return this.getField('id');
+    }
+    set id(value) {
+        this.setField('id', value);
+    }
+    getField(key) {
+        return this.data[this.options[`${key}Field`]];
+    }
+    setField(key, value) {
+        this.data[this.options[`${key}Field`]] = value;
+    }
+    // traversing:
+    _findAdjacentSibling(steps, skipHidden = false) {
+        const siblings = this._getParentsChildren(skipHidden);
+        const index = siblings.indexOf(this);
+        return siblings.length > index + steps ? siblings[index + steps] : null;
+    }
+    findNextSibling(skipHidden = false) {
+        return this._findAdjacentSibling(+1, skipHidden);
+    }
+    findPreviousSibling(skipHidden = false) {
+        return this._findAdjacentSibling(-1, skipHidden);
+    }
+    getVisibleChildren() {
+        return this.visibleChildren;
+    }
+    get visibleChildren() {
+        return (this.children || []).filter((node) => !node.isHidden);
+    }
+    getFirstChild(skipHidden = false) {
+        let children = skipHidden ? this.visibleChildren : this.children;
+        return children != null && children.length ? children[0] : null;
+    }
+    getLastChild(skipHidden = false) {
+        let children = skipHidden ? this.visibleChildren : this.children;
+        return children != null && children.length ? children[children.length - 1] : null;
+    }
+    findNextNode(goInside = true, skipHidden = false) {
+        return goInside && this.isExpanded && this.getFirstChild(skipHidden) ||
+            this.findNextSibling(skipHidden) ||
+            this.parent && this.parent.findNextNode(false, skipHidden);
+    }
+    findPreviousNode(skipHidden = false) {
+        let previousSibling = this.findPreviousSibling(skipHidden);
+        if (!previousSibling) {
+            return this.realParent;
+        }
+        return previousSibling._getLastOpenDescendant(skipHidden);
+    }
+    _getLastOpenDescendant(skipHidden = false) {
+        const lastChild = this.getLastChild(skipHidden);
+        return (this.isCollapsed || !lastChild)
+            ? this
+            : lastChild._getLastOpenDescendant(skipHidden);
+    }
+    _getParentsChildren(skipHidden = false) {
+        const children = this.parent &&
+            (skipHidden ? this.parent.getVisibleChildren() : this.parent.children);
+        return children || [];
+    }
+    getIndexInParent(skipHidden = false) {
+        return this._getParentsChildren(skipHidden).indexOf(this);
+    }
+    isDescendantOf(node) {
+        if (this === node)
+            return true;
+        else
+            return this.parent && this.parent.isDescendantOf(node);
+    }
+    getNodePadding() {
+        return this.options.levelPadding * (this.level - 1) + 'px';
+    }
+    getClass() {
+        return [this.options.nodeClass(this), `tree-node-level-${this.level}`].join(' ');
+    }
+    onDrop($event) {
+        this.mouseAction('drop', $event.event, {
+            from: $event.element,
+            to: { parent: this, index: 0, dropOnNode: true }
+        });
+    }
+    allowDrag() {
+        return this.options.allowDrag(this);
+    }
+    // helper methods:
+    loadNodeChildren() {
+        if (!this.options.getChildren) {
+            return Promise.resolve(); // Not getChildren method - for using redux
+        }
+        return Promise.resolve(this.options.getChildren(this))
+            .then((children) => {
+            if (children) {
+                this.setField('children', children);
+                this._initChildren();
+                if (this.options.useTriState && this.treeModel.isSelected(this)) {
+                    this.setIsSelected(true);
+                }
+                this.children.forEach((child) => {
+                    if (child.getField('isExpanded') && child.hasChildren) {
+                        child.expand();
+                    }
+                });
+            }
+        }).then(() => {
+            this.fireEvent({
+                eventName: TREE_EVENTS.loadNodeChildren,
+                node: this
+            });
+        });
+    }
+    expand() {
+        if (!this.isExpanded) {
+            this.toggleExpanded();
+        }
+        return this;
+    }
+    collapse() {
+        if (this.isExpanded) {
+            this.toggleExpanded();
+        }
+        return this;
+    }
+    doForAll(fn) {
+        Promise.resolve(fn(this)).then(() => {
+            if (this.children) {
+                this.children.forEach((child) => child.doForAll(fn));
+            }
+        });
+    }
+    expandAll() {
+        this.doForAll((node) => node.expand());
+    }
+    collapseAll() {
+        this.doForAll((node) => node.collapse());
+    }
+    ensureVisible() {
+        if (this.realParent) {
+            this.realParent.expand();
+            this.realParent.ensureVisible();
+        }
+        return this;
+    }
+    toggleExpanded() {
+        this.setIsExpanded(!this.isExpanded);
+        return this;
+    }
+    setIsExpanded(value) {
+        if (this.hasChildren) {
+            this.treeModel.setExpandedNode(this, value);
+        }
+        return this;
+    }
+    ;
+    autoLoadChildren() {
+        this.handler =
+            reaction(() => this.isExpanded, (isExpanded) => {
+                if (!this.children && this.hasChildren && isExpanded) {
+                    this.loadNodeChildren();
+                }
+            }, { fireImmediately: true });
+    }
+    dispose() {
+        if (this.children) {
+            this.children.forEach((child) => child.dispose());
+        }
+        if (this.handler) {
+            this.handler();
+        }
+        this.parent = null;
+        this.children = null;
+    }
+    setIsActive(value, multi = false) {
+        this.treeModel.setActiveNode(this, value, multi);
+        if (value) {
+            this.focus(this.options.scrollOnActivate);
+        }
+        return this;
+    }
+    isSelectable() {
+        return this.isLeaf || !this.children || !this.options.useTriState;
+    }
+    setIsSelected(value) {
+        if (this.isSelectable()) {
+            this.treeModel.setSelectedNode(this, value);
+        }
+        else {
+            this.visibleChildren.forEach((child) => child.setIsSelected(value));
+        }
+        return this;
+    }
+    toggleSelected() {
+        this.setIsSelected(!this.isSelected);
+        return this;
+    }
+    toggleActivated(multi = false) {
+        this.setIsActive(!this.isActive, multi);
+        return this;
+    }
+    setActiveAndVisible(multi = false) {
+        this.setIsActive(true, multi)
+            .ensureVisible();
+        setTimeout(this.scrollIntoView.bind(this));
+        return this;
+    }
+    scrollIntoView(force = false) {
+        this.treeModel.virtualScroll.scrollIntoView(this, force);
+    }
+    focus(scroll = true) {
+        let previousNode = this.treeModel.getFocusedNode();
+        this.treeModel.setFocusedNode(this);
+        if (scroll) {
+            this.scrollIntoView();
+        }
+        if (previousNode) {
+            this.fireEvent({ eventName: TREE_EVENTS.blur, node: previousNode });
+        }
+        this.fireEvent({ eventName: TREE_EVENTS.focus, node: this });
+        return this;
+    }
+    blur() {
+        let previousNode = this.treeModel.getFocusedNode();
+        this.treeModel.setFocusedNode(null);
+        if (previousNode) {
+            this.fireEvent({ eventName: TREE_EVENTS.blur, node: this });
+        }
+        return this;
+    }
+    setIsHidden(value) {
+        this.treeModel.setIsHidden(this, value);
+    }
+    hide() {
+        this.setIsHidden(true);
+    }
+    show() {
+        this.setIsHidden(false);
+    }
+    mouseAction(actionName, $event, data = null) {
+        this.treeModel.setFocus(true);
+        const actionMapping = this.options.actionMapping.mouse;
+        const mouseAction = actionMapping[actionName];
+        if (mouseAction) {
+            mouseAction(this.treeModel, this, $event, data);
+        }
+    }
+    getSelfHeight() {
+        return this.options.nodeHeight(this);
+    }
+    _initChildren() {
+        this.children = this.getField('children')
+            .map((c, index) => new TreeNode(c, this, this.treeModel, index));
+    }
+}
+__decorate([
+    computed$1,
+    __metadata("design:type", Object),
+    __metadata("design:paramtypes", [])
+], TreeNode.prototype, "isHidden", null);
+__decorate([
+    computed$1,
+    __metadata("design:type", Object),
+    __metadata("design:paramtypes", [])
+], TreeNode.prototype, "isExpanded", null);
+__decorate([
+    computed$1,
+    __metadata("design:type", Object),
+    __metadata("design:paramtypes", [])
+], TreeNode.prototype, "isActive", null);
+__decorate([
+    computed$1,
+    __metadata("design:type", Object),
+    __metadata("design:paramtypes", [])
+], TreeNode.prototype, "isFocused", null);
+__decorate([
+    computed$1,
+    __metadata("design:type", Object),
+    __metadata("design:paramtypes", [])
+], TreeNode.prototype, "isSelected", null);
+__decorate([
+    computed$1,
+    __metadata("design:type", Object),
+    __metadata("design:paramtypes", [])
+], TreeNode.prototype, "isAllSelected", null);
+__decorate([
+    computed$1,
+    __metadata("design:type", Object),
+    __metadata("design:paramtypes", [])
+], TreeNode.prototype, "isPartiallySelected", null);
+__decorate([
+    observable$1,
+    __metadata("design:type", Array)
+], TreeNode.prototype, "children", void 0);
+__decorate([
+    observable$1,
+    __metadata("design:type", Number)
+], TreeNode.prototype, "index", void 0);
+__decorate([
+    observable$1,
+    __metadata("design:type", Object)
+], TreeNode.prototype, "position", void 0);
+__decorate([
+    observable$1,
+    __metadata("design:type", Number)
+], TreeNode.prototype, "height", void 0);
+__decorate([
+    computed$1,
+    __metadata("design:type", Number),
+    __metadata("design:paramtypes", [])
+], TreeNode.prototype, "level", null);
+__decorate([
+    computed$1,
+    __metadata("design:type", Array),
+    __metadata("design:paramtypes", [])
+], TreeNode.prototype, "path", null);
+__decorate([
+    computed$1,
+    __metadata("design:type", Object),
+    __metadata("design:paramtypes", [])
+], TreeNode.prototype, "visibleChildren", null);
+__decorate([
+    action$1,
+    __metadata("design:type", Function),
+    __metadata("design:paramtypes", [Object]),
+    __metadata("design:returntype", void 0)
+], TreeNode.prototype, "setIsSelected", null);
+__decorate([
+    action$1,
+    __metadata("design:type", Function),
+    __metadata("design:paramtypes", []),
+    __metadata("design:returntype", void 0)
+], TreeNode.prototype, "_initChildren", null);
+function uuid() {
+    return Math.floor(Math.random() * 10000000000000);
+}
+
+var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
+    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
+    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
+    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
+    return c > 3 && r && Object.defineProperty(target, key, r), r;
+};
+var __metadata$1 = (this && this.__metadata) || function (k, v) {
+    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
+};
+class TreeModel {
+    constructor() {
+        this.options = new TreeOptions();
+        this.eventNames = Object.keys(TREE_EVENTS);
+        this.expandedNodeIds = {};
+        this.selectedLeafNodeIds = {};
+        this.activeNodeIds = {};
+        this.hiddenNodeIds = {};
+        this.focusedNodeId = null;
+        this.firstUpdate = true;
+        this.subscriptions = [];
+    }
+    // events
+    fireEvent(event) {
+        event.treeModel = this;
+        this.events[event.eventName].emit(event);
+        this.events.event.emit(event);
+    }
+    subscribe(eventName, fn) {
+        const subscription = this.events[eventName].subscribe(fn);
+        this.subscriptions.push(subscription);
+    }
+    // getters
+    getFocusedNode() {
+        return this.focusedNode;
+    }
+    getActiveNode() {
+        return this.activeNodes[0];
+    }
+    getActiveNodes() {
+        return this.activeNodes;
+    }
+    getVisibleRoots() {
+        return this.virtualRoot.visibleChildren;
+    }
+    getFirstRoot(skipHidden = false) {
+        const root = skipHidden ? this.getVisibleRoots() : this.roots;
+        return root != null && root.length ? root[0] : null;
+    }
+    getLastRoot(skipHidden = false) {
+        const root = skipHidden ? this.getVisibleRoots() : this.roots;
+        return root != null && root.length ? root[root.length - 1] : null;
+    }
+    get isFocused() {
+        return TreeModel.focusedTree === this;
+    }
+    isNodeFocused(node) {
+        return this.focusedNode === node;
+    }
+    isEmptyTree() {
+        return this.roots && this.roots.length === 0;
+    }
+    get focusedNode() {
+        return this.focusedNodeId ? this.getNodeById(this.focusedNodeId) : null;
+    }
+    get expandedNodes() {
+        const nodes = Object.keys(this.expandedNodeIds)
+            .filter((id) => this.expandedNodeIds[id])
+            .map((id) => this.getNodeById(id));
+        return nodes.filter(Boolean);
+    }
+    get activeNodes() {
+        const nodes = Object.keys(this.activeNodeIds)
+            .filter((id) => this.activeNodeIds[id])
+            .map((id) => this.getNodeById(id));
+        return nodes.filter(Boolean);
+    }
+    get hiddenNodes() {
+        const nodes = Object.keys(this.hiddenNodeIds)
+            .filter((id) => this.hiddenNodeIds[id])
+            .map((id) => this.getNodeById(id));
+        return nodes.filter(Boolean);
+    }
+    get selectedLeafNodes() {
+        const nodes = Object.keys(this.selectedLeafNodeIds)
+            .filter((id) => this.selectedLeafNodeIds[id])
+            .map((id) => this.getNodeById(id));
+        return nodes.filter(Boolean);
+    }
+    // locating nodes
+    getNodeByPath(path, startNode = null) {
+        if (!path)
+            return null;
+        startNode = startNode || this.virtualRoot;
+        if (path.length === 0)
+            return startNode;
+        if (!startNode.children)
+            return null;
+        const childId = path.shift();
+        const childNode = startNode.children.find(c => c.id === childId);
+        if (!childNode)
+            return null;
+        return this.getNodeByPath(path, childNode);
+    }
+    getNodeById(id) {
+        const idStr = id.toString();
+        return this.getNodeBy((node) => node.id.toString() === idStr);
+    }
+    getNodeBy(predicate, startNode = null) {
+        startNode = startNode || this.virtualRoot;
+        if (!startNode.children)
+            return null;
+        const found = startNode.children.find(predicate);
+        if (found) { // found in children
+            return found;
+        }
+        else { // look in children's children
+            for (let child of startNode.children) {
+                const foundInChildren = this.getNodeBy(predicate, child);
+                if (foundInChildren)
+                    return foundInChildren;
+            }
+        }
+    }
+    isExpanded(node) {
+        return this.expandedNodeIds[node.id];
+    }
+    isHidden(node) {
+        return this.hiddenNodeIds[node.id];
+    }
+    isActive(node) {
+        return this.activeNodeIds[node.id];
+    }
+    isSelected(node) {
+        return this.selectedLeafNodeIds[node.id];
+    }
+    ngOnDestroy() {
+        this.dispose();
+        this.unsubscribeAll();
+    }
+    dispose() {
+        // Dispose reactions of the replaced nodes
+        if (this.virtualRoot) {
+            this.virtualRoot.dispose();
+        }
+    }
+    unsubscribeAll() {
+        this.subscriptions.forEach(subscription => subscription.unsubscribe());
+        this.subscriptions = [];
+    }
+    // actions
+    setData({ nodes, options = null, events = null }) {
+        if (options) {
+            this.options = new TreeOptions(options);
+        }
+        if (events) {
+            this.events = events;
+        }
+        if (nodes) {
+            this.nodes = nodes;
+        }
+        this.update();
+    }
+    update() {
+        // Rebuild tree:
+        let virtualRootConfig = {
+            id: this.options.rootId,
+            virtual: true,
+            [this.options.childrenField]: this.nodes
+        };
+        this.dispose();
+        this.virtualRoot = new TreeNode(virtualRootConfig, null, this, 0);
+        this.roots = this.virtualRoot.children;
+        // Fire event:
+        if (this.firstUpdate) {
+            if (this.roots) {
+                this.firstUpdate = false;
+                this._calculateExpandedNodes();
+            }
+        }
+        else {
+            this.fireEvent({ eventName: TREE_EVENTS.updateData });
+        }
+    }
+    setFocusedNode(node) {
+        this.focusedNodeId = node ? node.id : null;
+    }
+    setFocus(value) {
+        TreeModel.focusedTree = value ? this : null;
+    }
+    doForAll(fn) {
+        this.roots.forEach((root) => root.doForAll(fn));
+    }
+    focusNextNode() {
+        let previousNode = this.getFocusedNode();
+        let nextNode = previousNode ? previousNode.findNextNode(true, true) : this.getFirstRoot(true);
+        if (nextNode)
+            nextNode.focus();
+    }
+    focusPreviousNode() {
+        let previousNode = this.getFocusedNode();
+        let nextNode = previousNode ? previousNode.findPreviousNode(true) : this.getLastRoot(true);
+        if (nextNode)
+            nextNode.focus();
+    }
+    focusDrillDown() {
+        let previousNode = this.getFocusedNode();
+        if (previousNode && previousNode.isCollapsed && previousNode.hasChildren) {
+            previousNode.toggleExpanded();
+        }
+        else {
+            let nextNode = previousNode ? previousNode.getFirstChild(true) : this.getFirstRoot(true);
+            if (nextNode)
+                nextNode.focus();
+        }
+    }
+    focusDrillUp() {
+        let previousNode = this.getFocusedNode();
+        if (!previousNode)
+            return;
+        if (previousNode.isExpanded) {
+            previousNode.toggleExpanded();
+        }
+        else {
+            let nextNode = previousNode.realParent;
+            if (nextNode)
+                nextNode.focus();
+        }
+    }
+    setActiveNode(node, value, multi = false) {
+        if (multi) {
+            this._setActiveNodeMulti(node, value);
+        }
+        else {
+            this._setActiveNodeSingle(node, value);
+        }
+        if (value) {
+            node.focus(this.options.scrollOnActivate);
+            this.fireEvent({ eventName: TREE_EVENTS.activate, node });
+            this.fireEvent({ eventName: TREE_EVENTS.nodeActivate, node }); // For IE11
+        }
+        else {
+            this.fireEvent({ eventName: TREE_EVENTS.deactivate, node });
+            this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node }); // For IE11
+        }
+    }
+    setSelectedNode(node, value) {
+        this.selectedLeafNodeIds = Object.assign({}, this.selectedLeafNodeIds, { [node.id]: value });
+        if (value) {
+            node.focus();
+            this.fireEvent({ eventName: TREE_EVENTS.select, node });
+        }
+        else {
+            this.fireEvent({ eventName: TREE_EVENTS.deselect, node });
+        }
+    }
+    setExpandedNode(node, value) {
+        this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, { [node.id]: value });
+        this.fireEvent({ eventName: TREE_EVENTS.toggleExpanded, node, isExpanded: value });
+    }
+    expandAll() {
+        this.roots.forEach((root) => root.expandAll());
+    }
+    collapseAll() {
+        this.roots.forEach((root) => root.collapseAll());
+    }
+    setIsHidden(node, value) {
+        this.hiddenNodeIds = Object.assign({}, this.hiddenNodeIds, { [node.id]: value });
+    }
+    setHiddenNodeIds(nodeIds) {
+        this.hiddenNodeIds = nodeIds.reduce((hiddenNodeIds, id) => Object.assign(hiddenNodeIds, {
+            [id]: true
+        }), {});
+    }
+    performKeyAction(node, $event) {
+        const keyAction = this.options.actionMapping.keys[$event.keyCode];
+        if (keyAction) {
+            $event.preventDefault();
+            keyAction(this, node, $event);
+            return true;
+        }
+        else {
+            return false;
+        }
+    }
+    filterNodes(filter, autoShow = true) {
+        let filterFn;
+        if (!filter) {
+            return this.clearFilter();
+        }
+        // support function and string filter
+        if (filter && typeof filter.valueOf() === 'string') {
+            filterFn = (node) => node.displayField.toLowerCase().indexOf(filter.toLowerCase()) !== -1;
+        }
+        else if (filter && typeof filter === 'function') {
+            filterFn = filter;
+        }
+        else {
+            console.error('Don\'t know what to do with filter', filter);
+            console.error('Should be either a string or function');
+            return;
+        }
+        const ids = {};
+        this.roots.forEach((node) => this._filterNode(ids, node, filterFn, autoShow));
+        this.hiddenNodeIds = ids;
+        this.fireEvent({ eventName: TREE_EVENTS.changeFilter });
+    }
+    clearFilter() {
+        this.hiddenNodeIds = {};
+        this.fireEvent({ eventName: TREE_EVENTS.changeFilter });
+    }
+    moveNode(node, to) {
+        const fromIndex = node.getIndexInParent();
+        const fromParent = node.parent;
+        if (!this.canMoveNode(node, to, fromIndex))
+            return;
+        const fromChildren = fromParent.getField('children');
+        // If node doesn't have children - create children array
+        if (!to.parent.getField('children')) {
+            to.parent.setField('children', []);
+        }
+        const toChildren = to.parent.getField('children');
+        const originalNode = fromChildren.splice(fromIndex, 1)[0];
+        // Compensate for index if already removed from parent:
+        let toIndex = (fromParent === to.parent && to.index > fromIndex) ? to.index - 1 : to.index;
+        toChildren.splice(toIndex, 0, originalNode);
+        fromParent.treeModel.update();
+        if (to.parent.treeModel !== fromParent.treeModel) {
+            to.parent.treeModel.update();
+        }
+        this.fireEvent({
+            eventName: TREE_EVENTS.moveNode,
+            node: originalNode,
+            to: { parent: to.parent.data, index: toIndex },
+            from: { parent: fromParent.data, index: fromIndex }
+        });
+    }
+    copyNode(node, to) {
+        const fromIndex = node.getIndexInParent();
+        if (!this.canMoveNode(node, to, fromIndex))
+            return;
+        // If node doesn't have children - create children array
+        if (!to.parent.getField('children')) {
+            to.parent.setField('children', []);
+        }
+        const toChildren = to.parent.getField('children');
+        const nodeCopy = this.options.getNodeClone(node);
+        toChildren.splice(to.index, 0, nodeCopy);
+        node.treeModel.update();
+        if (to.parent.treeModel !== node.treeModel) {
+            to.parent.treeModel.update();
+        }
+        this.fireEvent({ eventName: TREE_EVENTS.copyNode, node: nodeCopy, to: { parent: to.parent.data, index: to.index } });
+    }
+    getState() {
+        return {
+            expandedNodeIds: this.expandedNodeIds,
+            selectedLeafNodeIds: this.selectedLeafNodeIds,
+            activeNodeIds: this.activeNodeIds,
+            hiddenNodeIds: this.hiddenNodeIds,
+            focusedNodeId: this.focusedNodeId
+        };
+    }
+    setState(state) {
+        if (!state)
+            return;
+        Object.assign(this, {
+            expandedNodeIds: state.expandedNodeIds || {},
+            selectedLeafNodeIds: state.selectedLeafNodeIds || {},
+            activeNodeIds: state.activeNodeIds || {},
+            hiddenNodeIds: state.hiddenNodeIds || {},
+            focusedNodeId: state.focusedNodeId
+        });
+    }
+    subscribeToState(fn) {
+        autorun(() => fn(this.getState()));
+    }
+    canMoveNode(node, to, fromIndex = undefined) {
+        const fromNodeIndex = fromIndex || node.getIndexInParent();
+        // same node:
+        if (node.parent === to.parent && fromIndex === to.index) {
+            return false;
+        }
+        return !to.parent.isDescendantOf(node);
+    }
+    calculateExpandedNodes() {
+        this._calculateExpandedNodes();
+    }
+    // private methods
+    _filterNode(ids, node, filterFn, autoShow) {
+        // if node passes function then it's visible
+        let isVisible = filterFn(node);
+        if (node.children) {
+            // if one of node's children passes filter then this node is also visible
+            node.children.forEach((child) => {
+                if (this._filterNode(ids, child, filterFn, autoShow)) {
+                    isVisible = true;
+                }
+            });
+        }
+        // mark node as hidden
+        if (!isVisible) {
+            ids[node.id] = true;
+        }
+        // auto expand parents to make sure the filtered nodes are visible
+        if (autoShow && isVisible) {
+            node.ensureVisible();
+        }
+        return isVisible;
+    }
+    _calculateExpandedNodes(startNode = null) {
+        startNode = startNode || this.virtualRoot;
+        if (startNode.data[this.options.isExpandedField]) {
+            this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, { [startNode.id]: true });
+        }
+        if (startNode.children) {
+            startNode.children.forEach((child) => this._calculateExpandedNodes(child));
+        }
+    }
+    _setActiveNodeSingle(node, value) {
+        // Deactivate all other nodes:
+        this.activeNodes
+            .filter((activeNode) => activeNode !== node)
+            .forEach((activeNode) => {
+            this.fireEvent({ eventName: TREE_EVENTS.deactivate, node: activeNode });
+            this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node: activeNode }); // For IE11
+        });
+        if (value) {
+            this.activeNodeIds = { [node.id]: true };
+        }
+        else {
+            this.activeNodeIds = {};
+        }
+    }
+    _setActiveNodeMulti(node, value) {
+        this.activeNodeIds = Object.assign({}, this.activeNodeIds, { [node.id]: value });
+    }
+}
+TreeModel.ɵfac = function TreeModel_Factory(t) { return new (t || TreeModel)(); };
+TreeModel.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TreeModel, factory: TreeModel.ɵfac });
+TreeModel.focusedTree = null;
+__decorate$1([
+    observable$1,
+    __metadata$1("design:type", Array)
+], TreeModel.prototype, "roots", void 0);
+__decorate$1([
+    observable$1,
+    __metadata$1("design:type", Object)
+], TreeModel.prototype, "expandedNodeIds", void 0);
+__decorate$1([
+    observable$1,
+    __metadata$1("design:type", Object)
+], TreeModel.prototype, "selectedLeafNodeIds", void 0);
+__decorate$1([
+    observable$1,
+    __metadata$1("design:type", Object)
+], TreeModel.prototype, "activeNodeIds", void 0);
+__decorate$1([
+    observable$1,
+    __metadata$1("design:type", Object)
+], TreeModel.prototype, "hiddenNodeIds", void 0);
+__decorate$1([
+    observable$1,
+    __metadata$1("design:type", Object)
+], TreeModel.prototype, "focusedNodeId", void 0);
+__decorate$1([
+    observable$1,
+    __metadata$1("design:type", TreeNode)
+], TreeModel.prototype, "virtualRoot", void 0);
+__decorate$1([
+    computed$1,
+    __metadata$1("design:type", Object),
+    __metadata$1("design:paramtypes", [])
+], TreeModel.prototype, "focusedNode", null);
+__decorate$1([
+    computed$1,
+    __metadata$1("design:type", Object),
+    __metadata$1("design:paramtypes", [])
+], TreeModel.prototype, "expandedNodes", null);
+__decorate$1([
+    computed$1,
+    __metadata$1("design:type", Object),
+    __metadata$1("design:paramtypes", [])
+], TreeModel.prototype, "activeNodes", null);
+__decorate$1([
+    computed$1,
+    __metadata$1("design:type", Object),
+    __metadata$1("design:paramtypes", [])
+], TreeModel.prototype, "hiddenNodes", null);
+__decorate$1([
+    computed$1,
+    __metadata$1("design:type", Object),
+    __metadata$1("design:paramtypes", [])
+], TreeModel.prototype, "selectedLeafNodes", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", [Object]),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "setData", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", []),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "update", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", [Object]),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "setFocusedNode", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", [Object]),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "setFocus", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", [Object]),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "doForAll", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", []),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "focusNextNode", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", []),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "focusPreviousNode", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", []),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "focusDrillDown", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", []),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "focusDrillUp", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", [Object, Object, Object]),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "setActiveNode", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", [Object, Object]),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "setSelectedNode", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", [Object, Object]),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "setExpandedNode", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", []),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "expandAll", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", []),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "collapseAll", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", [Object, Object]),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "setIsHidden", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", [Object]),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "setHiddenNodeIds", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", [Object, Object]),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "filterNodes", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", []),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "clearFilter", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", [Object, Object]),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "moveNode", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", [Object, Object]),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "copyNode", null);
+__decorate$1([
+    action$1,
+    __metadata$1("design:type", Function),
+    __metadata$1("design:paramtypes", [Object]),
+    __metadata$1("design:returntype", void 0)
+], TreeModel.prototype, "setState", null);
+
+class TreeDraggedElement {
+    constructor() {
+        this._draggedElement = null;
+    }
+    set(draggedElement) {
+        this._draggedElement = draggedElement;
+    }
+    get() {
+        return this._draggedElement;
+    }
+    isDragging() {
+        return !!this.get();
+    }
+}
+TreeDraggedElement.ɵfac = function TreeDraggedElement_Factory(t) { return new (t || TreeDraggedElement)(); };
+/** @nocollapse */ TreeDraggedElement.ɵprov = ɵɵdefineInjectable({ factory: function TreeDraggedElement_Factory() { return new TreeDraggedElement(); }, token: TreeDraggedElement, providedIn: "root" });
+
+var __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {
+    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
+    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
+    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
+    return c > 3 && r && Object.defineProperty(target, key, r), r;
+};
+var __metadata$2 = (this && this.__metadata) || function (k, v) {
+    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
+};
+const Y_OFFSET = 500; // Extra pixels outside the viewport, in each direction, to render nodes in
+const Y_EPSILON = 150; // Minimum pixel change required to recalculate the rendered nodes
+class TreeVirtualScroll {
+    constructor(treeModel) {
+        this.treeModel = treeModel;
+        this.yBlocks = 0;
+        this.x = 0;
+        this.viewportHeight = null;
+        this.viewport = null;
+        treeModel.virtualScroll = this;
+        this._dispose = [autorun(() => this.fixScroll())];
+    }
+    get y() {
+        return this.yBlocks * Y_EPSILON;
+    }
+    get totalHeight() {
+        return this.treeModel.virtualRoot ? this.treeModel.virtualRoot.height : 0;
+    }
+    fireEvent(event) {
+        this.treeModel.fireEvent(event);
+    }
+    init() {
+        const fn = this.recalcPositions.bind(this);
+        fn();
+        this._dispose = [
+            ...this._dispose,
+            reaction(() => this.treeModel.roots, fn),
+            reaction(() => this.treeModel.expandedNodeIds, fn),
+            reaction(() => this.treeModel.hiddenNodeIds, fn)
+        ];
+        this.treeModel.subscribe(TREE_EVENTS.loadNodeChildren, fn);
+    }
+    isEnabled() {
+        return this.treeModel.options.useVirtualScroll;
+    }
+    _setYBlocks(value) {
+        this.yBlocks = value;
+    }
+    recalcPositions() {
+        this.treeModel.virtualRoot.height = this._getPositionAfter(this.treeModel.getVisibleRoots(), 0);
+    }
+    _getPositionAfter(nodes, startPos) {
+        let position = startPos;
+        nodes.forEach((node) => {
+            node.position = position;
+            position = this._getPositionAfterNode(node, position);
+        });
+        return position;
+    }
+    _getPositionAfterNode(node, startPos) {
+        let position = node.getSelfHeight() + startPos;
+        if (node.children && node.isExpanded) { // TBD: consider loading component as well
+            position = this._getPositionAfter(node.visibleChildren, position);
+        }
+        node.height = position - startPos;
+        return position;
+    }
+    clear() {
+        this._dispose.forEach((d) => d());
+    }
+    setViewport(viewport) {
+        Object.assign(this, {
+            viewport,
+            x: viewport.scrollLeft,
+            yBlocks: Math.round(viewport.scrollTop / Y_EPSILON),
+            viewportHeight: viewport.getBoundingClientRect ? viewport.getBoundingClientRect().height : 0
+        });
+    }
+    scrollIntoView(node, force, scrollToMiddle = true) {
+        if (node.options.scrollContainer) {
+            const scrollContainer = node.options.scrollContainer;
+            const scrollContainerHeight = scrollContainer.getBoundingClientRect().height;
+            const scrollContainerTop = scrollContainer.getBoundingClientRect().top;
+            const nodeTop = this.viewport.getBoundingClientRect().top + node.position - scrollContainerTop;
+            if (force || // force scroll to node
+                nodeTop < scrollContainer.scrollTop || // node is above scroll container
+                nodeTop + node.getSelfHeight() > scrollContainer.scrollTop + scrollContainerHeight) { // node is below container
+                scrollContainer.scrollTop = scrollToMiddle ?
+                    nodeTop - scrollContainerHeight / 2 : // scroll to middle
+                    nodeTop; // scroll to start
+            }
+        }
+        else {
+            if (force || // force scroll to node
+                node.position < this.y || // node is above viewport
+                node.position + node.getSelfHeight() > this.y + this.viewportHeight) { // node is below viewport
+                if (this.viewport) {
+                    this.viewport.scrollTop = scrollToMiddle ?
+                        node.position - this.viewportHeight / 2 : // scroll to middle
+                        node.position; // scroll to start
+                    this._setYBlocks(Math.floor(this.viewport.scrollTop / Y_EPSILON));
+                }
+            }
+        }
+    }
+    getViewportNodes(nodes) {
+        if (!nodes)
+            return [];
+        const visibleNodes = nodes.filter((node) => !node.isHidden);
+        if (!this.isEnabled())
+            return visibleNodes;
+        if (!this.viewportHeight || !visibleNodes.length)
+            return [];
+        // When loading children async this method is called before their height and position is calculated.
+        // In that case firstIndex === 0 and lastIndex === visibleNodes.length - 1 (e.g. 1000),
+        // which means that it loops through every visibleNodes item and push them into viewportNodes array.
+        // We can prevent nodes from being pushed to the array and wait for the appropriate calculations to take place
+        const lastVisibleNode = visibleNodes.slice(-1)[0];
+        if (!lastVisibleNode.height && lastVisibleNode.position === 0)
+            return [];
+        // Search for first node in the viewport using binary search
+        // Look for first node that starts after the beginning of the viewport (with buffer)
+        // Or that ends after the beginning of the viewport
+        const firstIndex = binarySearch(visibleNodes, (node) => {
+            return (node.position + Y_OFFSET > this.y) ||
+                (node.position + node.height > this.y);
+        });
+        // Search for last node in the viewport using binary search
+        // Look for first node that starts after the end of the viewport (with buffer)
+        const lastIndex = binarySearch(visibleNodes, (node) => {
+            return node.position - Y_OFFSET > this.y + this.viewportHeight;
+        }, firstIndex);
+        const viewportNodes = [];
+        for (let i = firstIndex; i <= lastIndex; i++) {
+            viewportNodes.push(visibleNodes[i]);
+        }
+        return viewportNodes;
+    }
+    fixScroll() {
+        const maxY = Math.max(0, this.totalHeight - this.viewportHeight);
+        if (this.y < 0)
+            this._setYBlocks(0);
+        if (this.y > maxY)
+            this._setYBlocks(maxY / Y_EPSILON);
+    }
+}
+TreeVirtualScroll.ɵfac = function TreeVirtualScroll_Factory(t) { return new (t || TreeVirtualScroll)(ɵngcc0.ɵɵinject(TreeModel)); };
+TreeVirtualScroll.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TreeVirtualScroll, factory: TreeVirtualScroll.ɵfac });
+/** @nocollapse */
+TreeVirtualScroll.ctorParameters = () => [
+    { type: TreeModel }
+];
+__decorate$2([
+    observable$1,
+    __metadata$2("design:type", Object)
+], TreeVirtualScroll.prototype, "yBlocks", void 0);
+__decorate$2([
+    observable$1,
+    __metadata$2("design:type", Object)
+], TreeVirtualScroll.prototype, "x", void 0);
+__decorate$2([
+    observable$1,
+    __metadata$2("design:type", Object)
+], TreeVirtualScroll.prototype, "viewportHeight", void 0);
+__decorate$2([
+    computed$1,
+    __metadata$2("design:type", Object),
+    __metadata$2("design:paramtypes", [])
+], TreeVirtualScroll.prototype, "y", null);
+__decorate$2([
+    computed$1,
+    __metadata$2("design:type", Object),
+    __metadata$2("design:paramtypes", [])
+], TreeVirtualScroll.prototype, "totalHeight", null);
+__decorate$2([
+    action$1,
+    __metadata$2("design:type", Function),
+    __metadata$2("design:paramtypes", [Object]),
+    __metadata$2("design:returntype", void 0)
+], TreeVirtualScroll.prototype, "_setYBlocks", null);
+__decorate$2([
+    action$1,
+    __metadata$2("design:type", Function),
+    __metadata$2("design:paramtypes", []),
+    __metadata$2("design:returntype", void 0)
+], TreeVirtualScroll.prototype, "recalcPositions", null);
+__decorate$2([
+    action$1,
+    __metadata$2("design:type", Function),
+    __metadata$2("design:paramtypes", [Object]),
+    __metadata$2("design:returntype", void 0)
+], TreeVirtualScroll.prototype, "setViewport", null);
+__decorate$2([
+    action$1,
+    __metadata$2("design:type", Function),
+    __metadata$2("design:paramtypes", [Object, Object, Object]),
+    __metadata$2("design:returntype", void 0)
+], TreeVirtualScroll.prototype, "scrollIntoView", null);
+function binarySearch(nodes, condition, firstIndex = 0) {
+    let index = firstIndex;
+    let toIndex = nodes.length - 1;
+    while (index !== toIndex) {
+        let midIndex = Math.floor((index + toIndex) / 2);
+        if (condition(nodes[midIndex])) {
+            toIndex = midIndex;
+        }
+        else {
+            if (index === midIndex)
+                index = toIndex;
+            else
+                index = midIndex;
+        }
+    }
+    return index;
+}
+
+class LoadingComponent {
+}
+LoadingComponent.ɵfac = function LoadingComponent_Factory(t) { return new (t || LoadingComponent)(); };
+LoadingComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: LoadingComponent, selectors: [["tree-loading-component"]], inputs: { template: "template", node: "node" }, decls: 2, vars: 5, consts: [[4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function LoadingComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵtemplate(0, LoadingComponent_span_0_Template, 2, 0, "span", 0);
+        ɵngcc0.ɵɵelementContainer(1, 1);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("ngIf", !ctx.template);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(3, _c0, ctx.node));
+    } }, dependencies: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], encapsulation: 2 });
+LoadingComponent.propDecorators = {
+    template: [{ type: Input }],
+    node: [{ type: Input }]
+};
+
+class TreeViewportComponent {
+    constructor(elementRef, virtualScroll) {
+        this.elementRef = elementRef;
+        this.virtualScroll = virtualScroll;
+        this.setViewport = this.throttle(() => {
+            this.virtualScroll.setViewport(this.elementRef.nativeElement);
+        }, 17);
+        this.scrollEventHandler = this.setViewport.bind(this);
+    }
+    ngOnInit() {
+        this.virtualScroll.init();
+    }
+    ngAfterViewInit() {
+        setTimeout(() => {
+            this.setViewport();
+            this.virtualScroll.fireEvent({ eventName: TREE_EVENTS.initialized });
+        });
+        let el = this.elementRef.nativeElement;
+        el.addEventListener('scroll', this.scrollEventHandler);
+    }
+    ngOnDestroy() {
+        this.virtualScroll.clear();
+        let el = this.elementRef.nativeElement;
+        el.removeEventListener('scroll', this.scrollEventHandler);
+    }
+    getTotalHeight() {
+        return ((this.virtualScroll.isEnabled() &&
+            this.virtualScroll.totalHeight + 'px') ||
+            'auto');
+    }
+    throttle(func, timeFrame) {
+        let lastTime = 0;
+        return function () {
+            let now = Date.now();
+            if (now - lastTime >= timeFrame) {
+                func();
+                lastTime = now;
+            }
+        };
+    }
+}
+TreeViewportComponent.ɵfac = function TreeViewportComponent_Factory(t) { return new (t || TreeViewportComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(TreeVirtualScroll)); };
+TreeViewportComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TreeViewportComponent, selectors: [["tree-viewport"]], features: [ɵngcc0.ɵɵProvidersFeature([TreeVirtualScroll])], ngContentSelectors: _c2, decls: 1, vars: 2, consts: [[4, "treeMobxAutorun"]], template: function TreeViewportComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵprojectionDef();
+        ɵngcc0.ɵɵtemplate(0, TreeViewportComponent_ng_container_0_Template, 3, 2, "ng-container", 0);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("treeMobxAutorun", ɵngcc0.ɵɵpureFunction0(1, _c1));
+    } }, dependencies: [TreeMobxAutorunDirective], encapsulation: 2 });
+/** @nocollapse */
+TreeViewportComponent.ctorParameters = () => [
+    { type: ElementRef },
+    { type: TreeVirtualScroll }
+];
+
+class TreeComponent {
+    constructor(treeModel, treeDraggedElement) {
+        this.treeModel = treeModel;
+        this.treeDraggedElement = treeDraggedElement;
+        treeModel.eventNames.forEach((name) => this[name] = new EventEmitter());
+        treeModel.subscribeToState((state) => this.stateChange.emit(state));
+    }
+    // Will be handled in ngOnChanges
+    set nodes(nodes) {
+    }
+    ;
+    set options(options) {
+    }
+    ;
+    set focused(value) {
+        this.treeModel.setFocus(value);
+    }
+    set state(state) {
+        this.treeModel.setState(state);
+    }
+    onKeydown($event) {
+        if (!this.treeModel.isFocused)
+            return;
+        if (['input', 'textarea'].includes(document.activeElement.tagName.toLowerCase()))
+            return;
+        const focusedNode = this.treeModel.getFocusedNode();
+        this.treeModel.performKeyAction(focusedNode, $event);
+    }
+    onMousedown($event) {
+        function isOutsideClick(startElement, nodeName) {
+            return !startElement ? true : startElement.localName === nodeName ? false : isOutsideClick(startElement.parentElement, nodeName);
+        }
+        if (isOutsideClick($event.target, 'tree-root')) {
+            this.treeModel.setFocus(false);
+        }
+    }
+    ngOnChanges(changes) {
+        if (changes.options || changes.nodes) {
+            this.treeModel.setData({
+                options: changes.options && changes.options.currentValue,
+                nodes: changes.nodes && changes.nodes.currentValue,
+                events: this.pick(this, this.treeModel.eventNames)
+            });
+        }
+    }
+    sizeChanged() {
+        this.viewportComponent.setViewport();
+    }
+    pick(object, keys) {
+        return keys.reduce((obj, key) => {
+            if (object && object.hasOwnProperty(key)) {
+                obj[key] = object[key];
+            }
+            return obj;
+        }, {});
+    }
+}
+TreeComponent.ɵfac = function TreeComponent_Factory(t) { return new (t || TreeComponent)(ɵngcc0.ɵɵdirectiveInject(TreeModel), ɵngcc0.ɵɵdirectiveInject(TreeDraggedElement)); };
+TreeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TreeComponent, selectors: [["Tree"], ["tree-root"]], contentQueries: function TreeComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c3, 5);
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c4, 5);
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c5, 5);
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c6, 5);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.loadingTemplate = _t.first);
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.treeNodeTemplate = _t.first);
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.treeNodeWrapperTemplate = _t.first);
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.treeNodeFullTemplate = _t.first);
+    } }, viewQuery: function TreeComponent_Query(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵviewQuery(_c7, 5);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.viewportComponent = _t.first);
+    } }, hostBindings: function TreeComponent_HostBindings(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵlistener("keydown", function TreeComponent_keydown_HostBindingHandler($event) { return ctx.onKeydown($event); }, false, ɵngcc0.ɵɵresolveBody)("mousedown", function TreeComponent_mousedown_HostBindingHandler($event) { return ctx.onMousedown($event); }, false, ɵngcc0.ɵɵresolveBody);
+    } }, inputs: { nodes: "nodes", options: "options", focused: "focused", state: "state" }, outputs: { toggleExpanded: "toggleExpanded", activate: "activate", deactivate: "deactivate", nodeActivate: "nodeActivate", nodeDeactivate: "nodeDeactivate", select: "select", deselect: "deselect", focus: "focus", blur: "blur", updateData: "updateData", initialized: "initialized", moveNode: "moveNode", copyNode: "copyNode", loadNodeChildren: "loadNodeChildren", changeFilter: "changeFilter", event: "event", stateChange: "stateChange" }, features: [ɵngcc0.ɵɵProvidersFeature([TreeModel]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 5, vars: 6, consts: [["viewport", ""], [1, "angular-tree-component"], [3, "nodes", "treeModel", "templates", 4, "ngIf"], ["class", "empty-tree-drop-slot", 3, "dropIndex", "node", 4, "ngIf"], [3, "nodes", "treeModel", "templates"], [1, "empty-tree-drop-slot", 3, "dropIndex", "node"]], template: function TreeComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "tree-viewport", null, 0)(2, "div", 1);
+        ɵngcc0.ɵɵtemplate(3, TreeComponent_tree_node_collection_3_Template, 1, 8, "tree-node-collection", 2);
+        ɵngcc0.ɵɵtemplate(4, TreeComponent_tree_node_drop_slot_4_Template, 1, 2, "tree-node-drop-slot", 3);
+        ɵngcc0.ɵɵelementEnd()();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵadvance(2);
+        ɵngcc0.ɵɵclassProp("node-dragging", ctx.treeDraggedElement.isDragging())("angular-tree-component-rtl", ctx.treeModel.options.rtl);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.treeModel.roots);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.treeModel.isEmptyTree());
+    } }, dependencies: function () { return [ɵngcc1.NgIf, TreeNodeDropSlot, TreeNodeCollectionComponent, TreeViewportComponent]; }, encapsulation: 2 });
+/** @nocollapse */
+TreeComponent.ctorParameters = () => [
+    { type: TreeModel },
+    { type: TreeDraggedElement }
+];
+TreeComponent.propDecorators = {
+    loadingTemplate: [{ type: ContentChild, args: ['loadingTemplate', { static: false },] }],
+    treeNodeTemplate: [{ type: ContentChild, args: ['treeNodeTemplate', { static: false },] }],
+    treeNodeWrapperTemplate: [{ type: ContentChild, args: ['treeNodeWrapperTemplate', { static: false },] }],
+    treeNodeFullTemplate: [{ type: ContentChild, args: ['treeNodeFullTemplate', { static: false },] }],
+    viewportComponent: [{ type: ViewChild, args: ['viewport', { static: false },] }],
+    nodes: [{ type: Input }],
+    options: [{ type: Input }],
+    focused: [{ type: Input }],
+    state: [{ type: Input }],
+    toggleExpanded: [{ type: Output }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    nodeActivate: [{ type: Output }],
+    nodeDeactivate: [{ type: Output }],
+    select: [{ type: Output }],
+    deselect: [{ type: Output }],
+    focus: [{ type: Output }],
+    blur: [{ type: Output }],
+    updateData: [{ type: Output }],
+    initialized: [{ type: Output }],
+    moveNode: [{ type: Output }],
+    copyNode: [{ type: Output }],
+    loadNodeChildren: [{ type: Output }],
+    changeFilter: [{ type: Output }],
+    event: [{ type: Output }],
+    stateChange: [{ type: Output }],
+    onKeydown: [{ type: HostListener, args: ['body: keydown', ['$event'],] }],
+    onMousedown: [{ type: HostListener, args: ['body: mousedown', ['$event'],] }]
+};
+
+class TreeNodeComponent {
+}
+TreeNodeComponent.ɵfac = function TreeNodeComponent_Factory(t) { return new (t || TreeNodeComponent)(); };
+TreeNodeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TreeNodeComponent, selectors: [["TreeNode"], ["tree-node"]], inputs: { node: "node", index: "index", templates: "templates" }, decls: 1, vars: 2, consts: [[4, "treeMobxAutorun"], [3, "class", "tree-node", "tree-node-expanded", "tree-node-collapsed", "tree-node-leaf", "tree-node-active", "tree-node-focused", 4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "dropIndex", "node", 4, "ngIf"], [3, "node", "index", "templates"], [3, "node", "templates"], [3, "dropIndex", "node"]], template: function TreeNodeComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵtemplate(0, TreeNodeComponent_ng_container_0_Template, 3, 8, "ng-container", 0);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("treeMobxAutorun", ɵngcc0.ɵɵpureFunction0(1, _c1));
+    } }, dependencies: function () { return [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, TreeNodeChildrenComponent, TreeNodeDropSlot, TreeNodeWrapperComponent, TreeMobxAutorunDirective]; }, encapsulation: 2 });
+TreeNodeComponent.propDecorators = {
+    node: [{ type: Input }],
+    index: [{ type: Input }],
+    templates: [{ type: Input }]
+};
+
+class TreeNodeContent {
+}
+TreeNodeContent.ɵfac = function TreeNodeContent_Factory(t) { return new (t || TreeNodeContent)(); };
+TreeNodeContent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TreeNodeContent, selectors: [["tree-node-content"]], inputs: { node: "node", index: "index", template: "template" }, decls: 2, vars: 7, consts: [[4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function TreeNodeContent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵtemplate(0, TreeNodeContent_span_0_Template, 2, 1, "span", 0);
+        ɵngcc0.ɵɵelementContainer(1, 1);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("ngIf", !ctx.template);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction3(3, _c10, ctx.node, ctx.node, ctx.index));
+    } }, dependencies: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], encapsulation: 2 });
+TreeNodeContent.propDecorators = {
+    node: [{ type: Input }],
+    index: [{ type: Input }],
+    template: [{ type: Input }]
+};
+
+class TreeNodeDropSlot {
+    onDrop($event) {
+        this.node.mouseAction('drop', $event.event, {
+            from: $event.element,
+            to: { parent: this.node, index: this.dropIndex }
+        });
+    }
+    allowDrop(element, $event) {
+        return this.node.options.allowDrop(element, { parent: this.node, index: this.dropIndex }, $event);
+    }
+}
+TreeNodeDropSlot.ɵfac = function TreeNodeDropSlot_Factory(t) { return new (t || TreeNodeDropSlot)(); };
+TreeNodeDropSlot.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TreeNodeDropSlot, selectors: [["TreeNodeDropSlot"], ["tree-node-drop-slot"]], inputs: { node: "node", dropIndex: "dropIndex" }, decls: 1, vars: 2, consts: [[1, "node-drop-slot", 3, "treeAllowDrop", "allowDragoverStyling", "treeDrop"]], template: function TreeNodeDropSlot_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "div", 0);
+        ɵngcc0.ɵɵlistener("treeDrop", function TreeNodeDropSlot_Template_div_treeDrop_0_listener($event) { return ctx.onDrop($event); });
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("treeAllowDrop", ctx.allowDrop.bind(ctx))("allowDragoverStyling", true);
+    } }, dependencies: function () { return [TreeDropDirective]; }, encapsulation: 2 });
+TreeNodeDropSlot.propDecorators = {
+    node: [{ type: Input }],
+    dropIndex: [{ type: Input }]
+};
+
+class TreeNodeExpanderComponent {
+}
+TreeNodeExpanderComponent.ɵfac = function TreeNodeExpanderComponent_Factory(t) { return new (t || TreeNodeExpanderComponent)(); };
+TreeNodeExpanderComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TreeNodeExpanderComponent, selectors: [["tree-node-expander"]], inputs: { node: "node" }, decls: 1, vars: 2, consts: [[4, "treeMobxAutorun"], ["class", "toggle-children-wrapper", 3, "toggle-children-wrapper-expanded", "toggle-children-wrapper-collapsed", "click", 4, "ngIf"], ["class", "toggle-children-placeholder", 4, "ngIf"], [1, "toggle-children-wrapper", 3, "click"], [1, "toggle-children"], [1, "toggle-children-placeholder"]], template: function TreeNodeExpanderComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵtemplate(0, TreeNodeExpanderComponent_ng_container_0_Template, 3, 2, "ng-container", 0);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("treeMobxAutorun", ɵngcc0.ɵɵpureFunction0(1, _c1));
+    } }, dependencies: [ɵngcc1.NgIf, TreeMobxAutorunDirective], encapsulation: 2 });
+TreeNodeExpanderComponent.propDecorators = {
+    node: [{ type: Input }]
+};
+
+class TreeNodeChildrenComponent {
+}
+TreeNodeChildrenComponent.ɵfac = function TreeNodeChildrenComponent_Factory(t) { return new (t || TreeNodeChildrenComponent)(); };
+TreeNodeChildrenComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TreeNodeChildrenComponent, selectors: [["tree-node-children"]], inputs: { node: "node", templates: "templates" }, decls: 1, vars: 2, consts: [[4, "treeMobxAutorun"], [3, "tree-children", "tree-children-no-padding", 4, "treeAnimateOpen", "treeAnimateOpenSpeed", "treeAnimateOpenAcceleration", "treeAnimateOpenEnabled"], [3, "nodes", "templates", "treeModel", 4, "ngIf"], ["class", "tree-node-loading", 3, "padding-left", "template", "node", 4, "ngIf"], [3, "nodes", "templates", "treeModel"], [1, "tree-node-loading", 3, "template", "node"]], template: function TreeNodeChildrenComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵtemplate(0, TreeNodeChildrenComponent_ng_container_0_Template, 2, 4, "ng-container", 0);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("treeMobxAutorun", ɵngcc0.ɵɵpureFunction0(1, _c1));
+    } }, dependencies: function () { return [ɵngcc1.NgIf, LoadingComponent, TreeNodeCollectionComponent, TreeAnimateOpenDirective, TreeMobxAutorunDirective]; }, encapsulation: 2 });
+TreeNodeChildrenComponent.propDecorators = {
+    node: [{ type: Input }],
+    templates: [{ type: Input }]
+};
+
+// Re-export mobx operators to be able to use inside components with AOT:
+function actionInternal(...args) {
+    return action$1(...args);
+}
+const action = Object.assign(actionInternal, action$1);
+function computedInternal(...args) {
+    return computed$1(...args);
+}
+const computed = Object.assign(computedInternal, computed$1);
+function observableInternal(...args) {
+    return observable$1(...args);
+}
+const observable = Object.assign(observableInternal, observable$1);
+
+var __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {
+    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
+    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
+    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
+    return c > 3 && r && Object.defineProperty(target, key, r), r;
+};
+var __metadata$3 = (this && this.__metadata) || function (k, v) {
+    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
+};
+class TreeNodeCollectionComponent {
+    constructor() {
+        this._dispose = [];
+    }
+    get nodes() {
+        return this._nodes;
+    }
+    set nodes(nodes) {
+        this.setNodes(nodes);
+    }
+    get marginTop() {
+        const firstNode = this.viewportNodes && this.viewportNodes.length && this.viewportNodes[0];
+        const relativePosition = firstNode && firstNode.parent
+            ? firstNode.position -
+                firstNode.parent.position -
+                firstNode.parent.getSelfHeight()
+            : 0;
+        return `${relativePosition}px`;
+    }
+    setNodes(nodes) {
+        this._nodes = nodes;
+    }
+    ngOnInit() {
+        this.virtualScroll = this.treeModel.virtualScroll;
+        this._dispose = [
+            // return node indexes so we can compare structurally,
+            reaction(() => {
+                return this.virtualScroll
+                    .getViewportNodes(this.nodes)
+                    .map(n => n.index);
+            }, nodeIndexes => {
+                this.viewportNodes = nodeIndexes.map(i => this.nodes[i]);
+            }, { compareStructural: true, fireImmediately: true }),
+            reaction(() => this.nodes, nodes => {
+                this.viewportNodes = this.virtualScroll.getViewportNodes(nodes);
+            })
+        ];
+    }
+    ngOnDestroy() {
+        this._dispose.forEach(d => d());
+    }
+    trackNode(index, node) {
+        return node.id;
+    }
+}
+TreeNodeCollectionComponent.ɵfac = function TreeNodeCollectionComponent_Factory(t) { return new (t || TreeNodeCollectionComponent)(); };
+TreeNodeCollectionComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TreeNodeCollectionComponent, selectors: [["tree-node-collection"]], inputs: { nodes: "nodes", treeModel: "treeModel", templates: "templates" }, decls: 1, vars: 2, consts: [[4, "treeMobxAutorun"], [3, "node", "index", "templates", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "node", "index", "templates"]], template: function TreeNodeCollectionComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵtemplate(0, TreeNodeCollectionComponent_ng_container_0_Template, 3, 4, "ng-container", 0);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("treeMobxAutorun", ɵngcc0.ɵɵpureFunction0(1, _c1));
+    } }, dependencies: [ɵngcc1.NgForOf, TreeNodeComponent, TreeMobxAutorunDirective], encapsulation: 2 });
+TreeNodeCollectionComponent.propDecorators = {
+    nodes: [{ type: Input }],
+    treeModel: [{ type: Input }],
+    templates: [{ type: Input }]
+};
+__decorate$3([
+    observable,
+    __metadata$3("design:type", Object)
+], TreeNodeCollectionComponent.prototype, "_nodes", void 0);
+__decorate$3([
+    observable,
+    __metadata$3("design:type", Array)
+], TreeNodeCollectionComponent.prototype, "viewportNodes", void 0);
+__decorate$3([
+    computed,
+    __metadata$3("design:type", String),
+    __metadata$3("design:paramtypes", [])
+], TreeNodeCollectionComponent.prototype, "marginTop", null);
+__decorate$3([
+    action,
+    __metadata$3("design:type", Function),
+    __metadata$3("design:paramtypes", [Object]),
+    __metadata$3("design:returntype", void 0)
+], TreeNodeCollectionComponent.prototype, "setNodes", null);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeMobxAutorunDirective, [{
+        type: Directive,
+        args: [{ selector: '[treeMobxAutorun]' }]
+    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }]; }, { treeMobxAutorun: [{
+            type: Input
+        }] }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeModel, [{
+        type: Injectable
+    }], function () { return []; }, null); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeDraggedElement, [{
+        type: Injectable,
+        args: [{
+                providedIn: 'root'
+            }]
+    }], function () { return []; }, null); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeVirtualScroll, [{
+        type: Injectable
+    }], function () { return [{ type: TreeModel }]; }, null); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoadingComponent, [{
+        type: Component,
+        args: [{
+                encapsulation: ViewEncapsulation.None,
+                selector: 'tree-loading-component',
+                template: `
+    <span *ngIf="!template">loading...</span>
+    <ng-container
+      [ngTemplateOutlet]="template"
+      [ngTemplateOutletContext]="{ $implicit: node }">
+    </ng-container>
+  `
+            }]
+    }], null, { template: [{
+            type: Input
+        }], node: [{
+            type: Input
+        }] }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeViewportComponent, [{
+        type: Component,
+        args: [{
+                selector: 'tree-viewport',
+                providers: [TreeVirtualScroll],
+                template: `
+    <ng-container *treeMobxAutorun="{ dontDetach: true }">
+      <div [style.height]="getTotalHeight()">
+        <ng-content></ng-content>
+      </div>
+    </ng-container>
+  `
+            }]
+    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: TreeVirtualScroll }]; }, null); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeComponent, [{
+        type: Component,
+        args: [{
+                selector: 'Tree, tree-root',
+                providers: [TreeModel],
+                template: `
+      <tree-viewport #viewport>
+          <div
+                  class="angular-tree-component"
+                  [class.node-dragging]="treeDraggedElement.isDragging()"
+                  [class.angular-tree-component-rtl]="treeModel.options.rtl">
+              <tree-node-collection
+                      *ngIf="treeModel.roots"
+                      [nodes]="treeModel.roots"
+                      [treeModel]="treeModel"
+                      [templates]="{
+            loadingTemplate: loadingTemplate,
+            treeNodeTemplate: treeNodeTemplate,
+            treeNodeWrapperTemplate: treeNodeWrapperTemplate,
+            treeNodeFullTemplate: treeNodeFullTemplate
+          }">
+              </tree-node-collection>
+              <tree-node-drop-slot
+                      class="empty-tree-drop-slot"
+                      *ngIf="treeModel.isEmptyTree()"
+                      [dropIndex]="0"
+                      [node]="treeModel.virtualRoot">
+              </tree-node-drop-slot>
+          </div>
+      </tree-viewport>
+  `
+            }]
+    }], function () { return [{ type: TreeModel }, { type: TreeDraggedElement }]; }, { nodes: [{
+            type: Input
+        }], options: [{
+            type: Input
+        }], focused: [{
+            type: Input
+        }], state: [{
+            type: Input
+        }], onKeydown: [{
+            type: HostListener,
+            args: ['body: keydown', ['$event']]
+        }], onMousedown: [{
+            type: HostListener,
+            args: ['body: mousedown', ['$event']]
+        }], loadingTemplate: [{
+            type: ContentChild,
+            args: ['loadingTemplate', { static: false }]
+        }], treeNodeTemplate: [{
+            type: ContentChild,
+            args: ['treeNodeTemplate', { static: false }]
+        }], treeNodeWrapperTemplate: [{
+            type: ContentChild,
+            args: ['treeNodeWrapperTemplate', { static: false }]
+        }], treeNodeFullTemplate: [{
+            type: ContentChild,
+            args: ['treeNodeFullTemplate', { static: false }]
+        }], viewportComponent: [{
+            type: ViewChild,
+            args: ['viewport', { static: false }]
+        }], toggleExpanded: [{
+            type: Output
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], nodeActivate: [{
+            type: Output
+        }], nodeDeactivate: [{
+            type: Output
+        }], select: [{
+            type: Output
+        }], deselect: [{
+            type: Output
+        }], focus: [{
+            type: Output
+        }], blur: [{
+            type: Output
+        }], updateData: [{
+            type: Output
+        }], initialized: [{
+            type: Output
+        }], moveNode: [{
+            type: Output
+        }], copyNode: [{
+            type: Output
+        }], loadNodeChildren: [{
+            type: Output
+        }], changeFilter: [{
+            type: Output
+        }], event: [{
+            type: Output
+        }], stateChange: [{
+            type: Output
+        }] }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeNodeComponent, [{
+        type: Component,
+        args: [{
+                selector: 'TreeNode, tree-node',
+                encapsulation: ViewEncapsulation.None,
+                template: `
+    <ng-container *treeMobxAutorun="{ dontDetach: true }">
+      <div
+        *ngIf="!templates.treeNodeFullTemplate"
+        [class]="node.getClass()"
+        [class.tree-node]="true"
+        [class.tree-node-expanded]="node.isExpanded && node.hasChildren"
+        [class.tree-node-collapsed]="node.isCollapsed && node.hasChildren"
+        [class.tree-node-leaf]="node.isLeaf"
+        [class.tree-node-active]="node.isActive"
+        [class.tree-node-focused]="node.isFocused"
+      >
+        <tree-node-drop-slot
+          *ngIf="index === 0"
+          [dropIndex]="node.index"
+          [node]="node.parent"
+        ></tree-node-drop-slot>
+
+        <tree-node-wrapper
+          [node]="node"
+          [index]="index"
+          [templates]="templates"
+        ></tree-node-wrapper>
+
+        <tree-node-children
+          [node]="node"
+          [templates]="templates"
+        ></tree-node-children>
+        <tree-node-drop-slot
+          [dropIndex]="node.index + 1"
+          [node]="node.parent"
+        ></tree-node-drop-slot>
+      </div>
+      <ng-container
+        [ngTemplateOutlet]="templates.treeNodeFullTemplate"
+        [ngTemplateOutletContext]="{
+          $implicit: node,
+          node: node,
+          index: index,
+          templates: templates
+        }"
+      >
+      </ng-container>
+    </ng-container>
+  `
+            }]
+    }], null, { node: [{
+            type: Input
+        }], index: [{
+            type: Input
+        }], templates: [{
+            type: Input
+        }] }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeNodeContent, [{
+        type: Component,
+        args: [{
+                selector: 'tree-node-content',
+                encapsulation: ViewEncapsulation.None,
+                template: `
+  <span *ngIf="!template">{{ node.displayField }}</span>
+  <ng-container
+    [ngTemplateOutlet]="template"
+    [ngTemplateOutletContext]="{ $implicit: node, node: node, index: index }">
+  </ng-container>`
+            }]
+    }], null, { node: [{
+            type: Input
+        }], index: [{
+            type: Input
+        }], template: [{
+            type: Input
+        }] }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeNodeDropSlot, [{
+        type: Component,
+        args: [{
+                selector: 'TreeNodeDropSlot, tree-node-drop-slot',
+                encapsulation: ViewEncapsulation.None,
+                template: `
+    <div
+      class="node-drop-slot"
+      (treeDrop)="onDrop($event)"
+      [treeAllowDrop]="allowDrop.bind(this)"
+      [allowDragoverStyling]="true">
+    </div>
+  `
+            }]
+    }], null, { node: [{
+            type: Input
+        }], dropIndex: [{
+            type: Input
+        }] }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeNodeExpanderComponent, [{
+        type: Component,
+        args: [{
+                selector: 'tree-node-expander',
+                encapsulation: ViewEncapsulation.None,
+                template: `
+    <ng-container *treeMobxAutorun="{ dontDetach: true }">
+      <span
+        *ngIf="node.hasChildren"
+        [class.toggle-children-wrapper-expanded]="node.isExpanded"
+        [class.toggle-children-wrapper-collapsed]="node.isCollapsed"
+        class="toggle-children-wrapper"
+        (click)="node.mouseAction('expanderClick', $event)"
+      >
+        <span class="toggle-children"></span>
+      </span>
+      <span *ngIf="!node.hasChildren" class="toggle-children-placeholder">
+      </span>
+    </ng-container>
+  `
+            }]
+    }], null, { node: [{
+            type: Input
+        }] }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeNodeChildrenComponent, [{
+        type: Component,
+        args: [{
+                selector: 'tree-node-children',
+                encapsulation: ViewEncapsulation.None,
+                template: `
+    <ng-container *treeMobxAutorun="{ dontDetach: true }">
+      <div
+        [class.tree-children]="true"
+        [class.tree-children-no-padding]="node.options.levelPadding"
+        *treeAnimateOpen="
+          node.isExpanded;
+          speed: node.options.animateSpeed;
+          acceleration: node.options.animateAcceleration;
+          enabled: node.options.animateExpand
+        "
+      >
+        <tree-node-collection
+          *ngIf="node.children"
+          [nodes]="node.children"
+          [templates]="templates"
+          [treeModel]="node.treeModel"
+        >
+        </tree-node-collection>
+        <tree-loading-component
+          [style.padding-left]="node.getNodePadding()"
+          class="tree-node-loading"
+          *ngIf="!node.children"
+          [template]="templates.loadingTemplate"
+          [node]="node"
+        ></tree-loading-component>
+      </div>
+    </ng-container>
+  `
+            }]
+    }], null, { node: [{
+            type: Input
+        }], templates: [{
+            type: Input
+        }] }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeNodeCollectionComponent, [{
+        type: Component,
+        args: [{
+                selector: 'tree-node-collection',
+                encapsulation: ViewEncapsulation.None,
+                template: `
+    <ng-container *treeMobxAutorun="{ dontDetach: true }">
+      <div [style.margin-top]="marginTop">
+        <tree-node
+          *ngFor="let node of viewportNodes; let i = index; trackBy: trackNode"
+          [node]="node"
+          [index]="i"
+          [templates]="templates"
+        >
+        </tree-node>
+      </div>
+    </ng-container>
+  `
+            }]
+    }], function () { return []; }, { nodes: [{
+            type: Input
+        }], treeModel: [{
+            type: Input
+        }], templates: [{
+            type: Input
+        }] }); })();
+
+class TreeNodeWrapperComponent {
+}
+TreeNodeWrapperComponent.ɵfac = function TreeNodeWrapperComponent_Factory(t) { return new (t || TreeNodeWrapperComponent)(); };
+TreeNodeWrapperComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TreeNodeWrapperComponent, selectors: [["tree-node-wrapper"]], inputs: { node: "node", index: "index", templates: "templates" }, decls: 2, vars: 8, consts: [["class", "node-wrapper", 3, "padding-left", 4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "node-wrapper"], [3, "node", 4, "ngIf"], [3, "node"], [1, "node-content-wrapper", 3, "treeAllowDrop", "allowDragoverStyling", "treeDrag", "treeDragEnabled", "click", "dblclick", "mouseover", "mouseout", "contextmenu", "treeDrop", "treeDropDragOver", "treeDropDragLeave", "treeDropDragEnter"], [3, "node", "index", "template"]], template: function TreeNodeWrapperComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵtemplate(0, TreeNodeWrapperComponent_div_0_Template, 5, 15, "div", 0);
+        ɵngcc0.ɵɵelementContainer(1, 1);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("ngIf", !ctx.templates.treeNodeWrapperTemplate);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.templates.treeNodeWrapperTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction4(3, _c9, ctx.node, ctx.node, ctx.index, ctx.templates));
+    } }, dependencies: function () { return [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, TreeNodeContent, TreeDropDirective, TreeDragDirective, TreeNodeExpanderComponent, TreeNodeCheckboxComponent]; }, encapsulation: 2 });
+TreeNodeWrapperComponent.propDecorators = {
+    node: [{ type: Input }],
+    index: [{ type: Input }],
+    templates: [{ type: Input }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeNodeWrapperComponent, [{
+        type: Component,
+        args: [{
+                selector: 'tree-node-wrapper',
+                encapsulation: ViewEncapsulation.None,
+                template: `
+      <div *ngIf="!templates.treeNodeWrapperTemplate" class="node-wrapper" [style.padding-left]="node.getNodePadding()">
+          <tree-node-checkbox *ngIf="node.options.useCheckbox" [node]="node"></tree-node-checkbox>
+          <tree-node-expander [node]="node"></tree-node-expander>
+          <div class="node-content-wrapper"
+               [class.node-content-wrapper-active]="node.isActive"
+               [class.node-content-wrapper-focused]="node.isFocused"
+               (click)="node.mouseAction('click', $event)"
+               (dblclick)="node.mouseAction('dblClick', $event)"
+               (mouseover)="node.mouseAction('mouseOver', $event)"
+               (mouseout)="node.mouseAction('mouseOut', $event)"
+               (contextmenu)="node.mouseAction('contextMenu', $event)"
+               (treeDrop)="node.onDrop($event)"
+               (treeDropDragOver)="node.mouseAction('dragOver', $event)"
+               (treeDropDragLeave)="node.mouseAction('dragLeave', $event)"
+               (treeDropDragEnter)="node.mouseAction('dragEnter', $event)"
+               [treeAllowDrop]="node.allowDrop"
+               [allowDragoverStyling]="node.allowDragoverStyling()"
+               [treeDrag]="node"
+               [treeDragEnabled]="node.allowDrag()">
+
+              <tree-node-content [node]="node" [index]="index" [template]="templates.treeNodeTemplate">
+              </tree-node-content>
+          </div>
+      </div>
+      <ng-container
+              [ngTemplateOutlet]="templates.treeNodeWrapperTemplate"
+              [ngTemplateOutletContext]="{ $implicit: node, node: node, index: index, templates: templates }">
+      </ng-container>
+  `
+            }]
+    }], null, { node: [{
+            type: Input
+        }], index: [{
+            type: Input
+        }], templates: [{
+            type: Input
+        }] }); })();
+
+class TreeNodeCheckboxComponent {
+}
+TreeNodeCheckboxComponent.ɵfac = function TreeNodeCheckboxComponent_Factory(t) { return new (t || TreeNodeCheckboxComponent)(); };
+TreeNodeCheckboxComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TreeNodeCheckboxComponent, selectors: [["tree-node-checkbox"]], inputs: { node: "node" }, decls: 1, vars: 2, consts: [[4, "treeMobxAutorun"], ["type", "checkbox", 1, "tree-node-checkbox", 3, "checked", "indeterminate", "click"]], template: function TreeNodeCheckboxComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵtemplate(0, TreeNodeCheckboxComponent_ng_container_0_Template, 2, 2, "ng-container", 0);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("treeMobxAutorun", ɵngcc0.ɵɵpureFunction0(1, _c1));
+    } }, dependencies: [TreeMobxAutorunDirective], encapsulation: 2 });
+TreeNodeCheckboxComponent.propDecorators = {
+    node: [{ type: Input }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeNodeCheckboxComponent, [{
+        type: Component,
+        args: [{
+                selector: 'tree-node-checkbox',
+                encapsulation: ViewEncapsulation.None,
+                template: `
+    <ng-container *treeMobxAutorun="{ dontDetach: true }">
+      <input
+        class="tree-node-checkbox"
+        type="checkbox"
+        (click)="node.mouseAction('checkboxClick', $event)"
+        [checked]="node.isSelected"
+        [indeterminate]="node.isPartiallySelected"
+      />
+    </ng-container>
+  `
+            }]
+    }], null, { node: [{
+            type: Input
+        }] }); })();
+
+const DRAG_OVER_CLASS = 'is-dragging-over';
+const DRAG_DISABLED_CLASS = 'is-dragging-over-disabled';
+class TreeDropDirective {
+    constructor(el, renderer, treeDraggedElement, ngZone) {
+        this.el = el;
+        this.renderer = renderer;
+        this.treeDraggedElement = treeDraggedElement;
+        this.ngZone = ngZone;
+        this.allowDragoverStyling = true;
+        this.onDropCallback = new EventEmitter();
+        this.onDragOverCallback = new EventEmitter();
+        this.onDragLeaveCallback = new EventEmitter();
+        this.onDragEnterCallback = new EventEmitter();
+        this._allowDrop = (element, $event) => true;
+        this.dragOverEventHandler = this.onDragOver.bind(this);
+        this.dragEnterEventHandler = this.onDragEnter.bind(this);
+        this.dragLeaveEventHandler = this.onDragLeave.bind(this);
+    }
+    set treeAllowDrop(allowDrop) {
+        if (allowDrop instanceof Function) {
+            this._allowDrop = allowDrop;
+        }
+        else
+            this._allowDrop = (element, $event) => allowDrop;
+    }
+    allowDrop($event) {
+        return this._allowDrop(this.treeDraggedElement.get(), $event);
+    }
+    ngAfterViewInit() {
+        let el = this.el.nativeElement;
+        this.ngZone.runOutsideAngular(() => {
+            el.addEventListener('dragover', this.dragOverEventHandler);
+            el.addEventListener('dragenter', this.dragEnterEventHandler);
+            el.addEventListener('dragleave', this.dragLeaveEventHandler);
+        });
+    }
+    ngOnDestroy() {
+        let el = this.el.nativeElement;
+        el.removeEventListener('dragover', this.dragOverEventHandler);
+        el.removeEventListener('dragenter', this.dragEnterEventHandler);
+        el.removeEventListener('dragleave', this.dragLeaveEventHandler);
+    }
+    onDragOver($event) {
+        if (!this.allowDrop($event)) {
+            if (this.allowDragoverStyling) {
+                return this.addDisabledClass();
+            }
+            return;
+        }
+        this.onDragOverCallback.emit({ event: $event, element: this.treeDraggedElement.get() });
+        $event.preventDefault();
+        if (this.allowDragoverStyling) {
+            this.addClass();
+        }
+    }
+    onDragEnter($event) {
+        if (!this.allowDrop($event))
+            return;
+        $event.preventDefault();
+        this.onDragEnterCallback.emit({ event: $event, element: this.treeDraggedElement.get() });
+    }
+    onDragLeave($event) {
+        if (!this.allowDrop($event)) {
+            if (this.allowDragoverStyling) {
+                return this.removeDisabledClass();
+            }
+            return;
+        }
+        this.onDragLeaveCallback.emit({ event: $event, element: this.treeDraggedElement.get() });
+        if (this.allowDragoverStyling) {
+            this.removeClass();
+        }
+    }
+    onDrop($event) {
+        if (!this.allowDrop($event))
+            return;
+        $event.preventDefault();
+        this.onDropCallback.emit({ event: $event, element: this.treeDraggedElement.get() });
+        if (this.allowDragoverStyling) {
+            this.removeClass();
+        }
+        this.treeDraggedElement.set(null);
+    }
+    addClass() {
+        this.renderer.addClass(this.el.nativeElement, DRAG_OVER_CLASS);
+    }
+    removeClass() {
+        this.renderer.removeClass(this.el.nativeElement, DRAG_OVER_CLASS);
+    }
+    addDisabledClass() {
+        this.renderer.addClass(this.el.nativeElement, DRAG_DISABLED_CLASS);
+    }
+    removeDisabledClass() {
+        this.renderer.removeClass(this.el.nativeElement, DRAG_DISABLED_CLASS);
+    }
+}
+TreeDropDirective.ɵfac = function TreeDropDirective_Factory(t) { return new (t || TreeDropDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(TreeDraggedElement), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
+TreeDropDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TreeDropDirective, selectors: [["", "treeDrop", ""]], hostBindings: function TreeDropDirective_HostBindings(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵlistener("drop", function TreeDropDirective_drop_HostBindingHandler($event) { return ctx.onDrop($event); });
+    } }, inputs: { allowDragoverStyling: "allowDragoverStyling", treeAllowDrop: "treeAllowDrop" }, outputs: { onDropCallback: "treeDrop", onDragOverCallback: "treeDropDragOver", onDragLeaveCallback: "treeDropDragLeave", onDragEnterCallback: "treeDropDragEnter" } });
+/** @nocollapse */
+TreeDropDirective.ctorParameters = () => [
+    { type: ElementRef },
+    { type: Renderer2 },
+    { type: TreeDraggedElement },
+    { type: NgZone }
+];
+TreeDropDirective.propDecorators = {
+    allowDragoverStyling: [{ type: Input }],
+    onDropCallback: [{ type: Output, args: ['treeDrop',] }],
+    onDragOverCallback: [{ type: Output, args: ['treeDropDragOver',] }],
+    onDragLeaveCallback: [{ type: Output, args: ['treeDropDragLeave',] }],
+    onDragEnterCallback: [{ type: Output, args: ['treeDropDragEnter',] }],
+    treeAllowDrop: [{ type: Input }],
+    onDrop: [{ type: HostListener, args: ['drop', ['$event'],] }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeDropDirective, [{
+        type: Directive,
+        args: [{
+                selector: '[treeDrop]'
+            }]
+    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: TreeDraggedElement }, { type: ɵngcc0.NgZone }]; }, { allowDragoverStyling: [{
+            type: Input
+        }], onDropCallback: [{
+            type: Output,
+            args: ['treeDrop']
+        }], onDragOverCallback: [{
+            type: Output,
+            args: ['treeDropDragOver']
+        }], onDragLeaveCallback: [{
+            type: Output,
+            args: ['treeDropDragLeave']
+        }], onDragEnterCallback: [{
+            type: Output,
+            args: ['treeDropDragEnter']
+        }], treeAllowDrop: [{
+            type: Input
+        }], onDrop: [{
+            type: HostListener,
+            args: ['drop', ['$event']]
+        }] }); })();
+
+const DRAG_OVER_CLASS$1 = 'is-dragging-over';
+class TreeDragDirective {
+    constructor(el, renderer, treeDraggedElement, ngZone) {
+        this.el = el;
+        this.renderer = renderer;
+        this.treeDraggedElement = treeDraggedElement;
+        this.ngZone = ngZone;
+        this.dragEventHandler = this.onDrag.bind(this);
+    }
+    ngAfterViewInit() {
+        let el = this.el.nativeElement;
+        this.ngZone.runOutsideAngular(() => {
+            el.addEventListener('drag', this.dragEventHandler);
+        });
+    }
+    ngDoCheck() {
+        this.renderer.setAttribute(this.el.nativeElement, 'draggable', this.treeDragEnabled ? 'true' : 'false');
+    }
+    ngOnDestroy() {
+        let el = this.el.nativeElement;
+        el.removeEventListener('drag', this.dragEventHandler);
+    }
+    onDragStart(ev) {
+        // setting the data is required by firefox
+        ev.dataTransfer.setData('text', ev.target.id);
+        this.treeDraggedElement.set(this.draggedElement);
+        if (this.draggedElement.mouseAction) {
+            this.draggedElement.mouseAction('dragStart', ev);
+        }
+    }
+    onDrag(ev) {
+        if (this.draggedElement.mouseAction) {
+            this.draggedElement.mouseAction('drag', ev);
+        }
+    }
+    onDragEnd() {
+        if (this.draggedElement.mouseAction) {
+            this.draggedElement.mouseAction('dragEnd');
+        }
+        this.treeDraggedElement.set(null);
+    }
+}
+TreeDragDirective.ɵfac = function TreeDragDirective_Factory(t) { return new (t || TreeDragDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(TreeDraggedElement), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
+TreeDragDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TreeDragDirective, selectors: [["", "treeDrag", ""]], hostBindings: function TreeDragDirective_HostBindings(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵlistener("dragstart", function TreeDragDirective_dragstart_HostBindingHandler($event) { return ctx.onDragStart($event); })("dragend", function TreeDragDirective_dragend_HostBindingHandler() { return ctx.onDragEnd(); });
+    } }, inputs: { draggedElement: ["treeDrag", "draggedElement"], treeDragEnabled: "treeDragEnabled" } });
+/** @nocollapse */
+TreeDragDirective.ctorParameters = () => [
+    { type: ElementRef },
+    { type: Renderer2 },
+    { type: TreeDraggedElement },
+    { type: NgZone }
+];
+TreeDragDirective.propDecorators = {
+    draggedElement: [{ type: Input, args: ['treeDrag',] }],
+    treeDragEnabled: [{ type: Input }],
+    onDragStart: [{ type: HostListener, args: ['dragstart', ['$event'],] }],
+    onDragEnd: [{ type: HostListener, args: ['dragend',] }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeDragDirective, [{
+        type: Directive,
+        args: [{
+                selector: '[treeDrag]'
+            }]
+    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: TreeDraggedElement }, { type: ɵngcc0.NgZone }]; }, { onDragStart: [{
+            type: HostListener,
+            args: ['dragstart', ['$event']]
+        }], onDragEnd: [{
+            type: HostListener,
+            args: ['dragend']
+        }], draggedElement: [{
+            type: Input,
+            args: ['treeDrag']
+        }], treeDragEnabled: [{
+            type: Input
+        }] }); })();
+
+const EASE_ACCELERATION = 1.005;
+class TreeAnimateOpenDirective {
+    constructor(renderer, templateRef, viewContainerRef) {
+        this.renderer = renderer;
+        this.templateRef = templateRef;
+        this.viewContainerRef = viewContainerRef;
+    }
+    set isOpen(value) {
+        if (value) {
+            this._show();
+            if (this.isEnabled && this._isOpen === false) {
+                this._animateOpen();
+            }
+        }
+        else {
+            this.isEnabled ? this._animateClose() : this._hide();
+        }
+        this._isOpen = !!value;
+    }
+    ;
+    _show() {
+        if (this.innerElement)
+            return;
+        // create child view
+        this.innerElement = this.viewContainerRef.createEmbeddedView(this.templateRef).rootNodes[0];
+    }
+    _hide() {
+        this.viewContainerRef.clear();
+        this.innerElement = null;
+    }
+    _animateOpen() {
+        let delta = this.animateSpeed;
+        let ease = this.animateAcceleration;
+        let maxHeight = 0;
+        // set height to 0
+        this.renderer.setStyle(this.innerElement, 'max-height', `0`);
+        // increase maxHeight until height doesn't change
+        setTimeout(() => {
+            const i = setInterval(() => {
+                if (!this._isOpen || !this.innerElement)
+                    return clearInterval(i);
+                maxHeight += delta;
+                const roundedMaxHeight = Math.round(maxHeight);
+                this.renderer.setStyle(this.innerElement, 'max-height', `${roundedMaxHeight}px`);
+                const height = this.innerElement.getBoundingClientRect ? this.innerElement.getBoundingClientRect().height : 0; // TBD use renderer
+                delta *= ease;
+                ease *= EASE_ACCELERATION;
+                if (height < roundedMaxHeight) {
+                    // Make maxHeight auto because animation finished and container might change height later on
+                    this.renderer.setStyle(this.innerElement, 'max-height', null);
+                    clearInterval(i);
+                }
+            }, 17);
+        });
+    }
+    _animateClose() {
+        if (!this.innerElement)
+            return;
+        let delta = this.animateSpeed;
+        let ease = this.animateAcceleration;
+        let height = this.innerElement.getBoundingClientRect().height; // TBD use renderer
+        // slowly decrease maxHeight to 0, starting from current height
+        const i = setInterval(() => {
+            if (this._isOpen || !this.innerElement)
+                return clearInterval(i);
+            height -= delta;
+            this.renderer.setStyle(this.innerElement, 'max-height', `${height}px`);
+            delta *= ease;
+            ease *= EASE_ACCELERATION;
+            if (height <= 0) {
+                // after animation complete - remove child element
+                this.viewContainerRef.clear();
+                this.innerElement = null;
+                clearInterval(i);
+            }
+        }, 17);
+    }
+}
+TreeAnimateOpenDirective.ɵfac = function TreeAnimateOpenDirective_Factory(t) { return new (t || TreeAnimateOpenDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
+TreeAnimateOpenDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TreeAnimateOpenDirective, selectors: [["", "treeAnimateOpen", ""]], inputs: { isOpen: ["treeAnimateOpen", "isOpen"], animateSpeed: ["treeAnimateOpenSpeed", "animateSpeed"], animateAcceleration: ["treeAnimateOpenAcceleration", "animateAcceleration"], isEnabled: ["treeAnimateOpenEnabled", "isEnabled"] } });
+/** @nocollapse */
+TreeAnimateOpenDirective.ctorParameters = () => [
+    { type: Renderer2 },
+    { type: TemplateRef },
+    { type: ViewContainerRef }
+];
+TreeAnimateOpenDirective.propDecorators = {
+    animateSpeed: [{ type: Input, args: ['treeAnimateOpenSpeed',] }],
+    animateAcceleration: [{ type: Input, args: ['treeAnimateOpenAcceleration',] }],
+    isEnabled: [{ type: Input, args: ['treeAnimateOpenEnabled',] }],
+    isOpen: [{ type: Input, args: ['treeAnimateOpen',] }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeAnimateOpenDirective, [{
+        type: Directive,
+        args: [{
+                selector: '[treeAnimateOpen]'
+            }]
+    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }]; }, { isOpen: [{
+            type: Input,
+            args: ['treeAnimateOpen']
+        }], animateSpeed: [{
+            type: Input,
+            args: ['treeAnimateOpenSpeed']
+        }], animateAcceleration: [{
+            type: Input,
+            args: ['treeAnimateOpenAcceleration']
+        }], isEnabled: [{
+            type: Input,
+            args: ['treeAnimateOpenEnabled']
+        }] }); })();
+
+class TreeModule {
+}
+TreeModule.ɵfac = function TreeModule_Factory(t) { return new (t || TreeModule)(); };
+TreeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TreeModule });
+TreeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule] });
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeModule, [{
+        type: NgModule,
+        args: [{
+                declarations: [
+                    TreeComponent,
+                    TreeNodeComponent,
+                    TreeNodeContent,
+                    LoadingComponent,
+                    TreeDropDirective,
+                    TreeDragDirective,
+                    TreeNodeExpanderComponent,
+                    TreeNodeChildrenComponent,
+                    TreeNodeDropSlot,
+                    TreeNodeCollectionComponent,
+                    TreeViewportComponent,
+                    TreeNodeWrapperComponent,
+                    TreeNodeCheckboxComponent,
+                    TreeAnimateOpenDirective,
+                    TreeMobxAutorunDirective
+                ],
+                exports: [
+                    TreeComponent,
+                    TreeNodeComponent,
+                    TreeNodeContent,
+                    LoadingComponent,
+                    TreeDropDirective,
+                    TreeDragDirective,
+                    TreeNodeExpanderComponent,
+                    TreeNodeChildrenComponent,
+                    TreeNodeDropSlot,
+                    TreeNodeCollectionComponent,
+                    TreeViewportComponent,
+                    TreeNodeWrapperComponent,
+                    TreeNodeCheckboxComponent,
+                    TreeAnimateOpenDirective,
+                    TreeMobxAutorunDirective
+                ],
+                imports: [CommonModule],
+                providers: []
+            }]
+    }], null, null); })();
+(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TreeModule, { declarations: function () { return [TreeComponent, TreeNodeComponent, TreeNodeContent, LoadingComponent, TreeDropDirective, TreeDragDirective, TreeNodeExpanderComponent, TreeNodeChildrenComponent, TreeNodeDropSlot, TreeNodeCollectionComponent, TreeViewportComponent, TreeNodeWrapperComponent, TreeNodeCheckboxComponent, TreeAnimateOpenDirective, TreeMobxAutorunDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [TreeComponent, TreeNodeComponent, TreeNodeContent, LoadingComponent, TreeDropDirective, TreeDragDirective, TreeNodeExpanderComponent, TreeNodeChildrenComponent, TreeNodeDropSlot, TreeNodeCollectionComponent, TreeViewportComponent, TreeNodeWrapperComponent, TreeNodeCheckboxComponent, TreeAnimateOpenDirective, TreeMobxAutorunDirective]; } }); })();
+
+/*
+ * Public API Surface of angular-tree-component
+ */
+
+/**
+ * Generated bundle index. Do not edit.
+ */
+
+export { KEYS, LoadingComponent, TREE_ACTIONS, TreeAnimateOpenDirective, TreeComponent, TreeDragDirective, TreeDraggedElement, TreeDropDirective, TreeModel, TreeModule, TreeNode, TreeNodeCheckboxComponent, TreeNodeChildrenComponent, TreeNodeCollectionComponent, TreeNodeComponent, TreeNodeContent, TreeNodeDropSlot, TreeNodeExpanderComponent, TreeNodeWrapperComponent, TreeViewportComponent, TreeVirtualScroll, actionInternal as ɵa, action as ɵb, computed as ɵc, observable as ɵd, TreeMobxAutorunDirective as ɵe };
+
+//# sourceMappingURL=circlon-angular-tree-component.js.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/__ivy_ngcc__/fesm2015/circlon-angular-tree-component.js.map b/node_modules/@circlon/angular-tree-component/__ivy_ngcc__/fesm2015/circlon-angular-tree-component.js.map
new file mode 100644
index 0000000..c2fdd16
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/__ivy_ngcc__/fesm2015/circlon-angular-tree-component.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"circlon-angular-tree-component.js","sources":["../../../projects/angular-tree-component/src/lib/mobx-angular/tree-mobx-autorun.directive.ts","../../../projects/angular-tree-component/src/lib/constants/keys.ts","../../../projects/angular-tree-component/src/lib/models/tree-options.model.ts","../../../projects/angular-tree-component/src/lib/constants/events.ts","../../../projects/angular-tree-component/src/lib/models/tree-node.model.ts","../../../projects/angular-tree-component/src/lib/models/tree.model.ts","../../../projects/angular-tree-component/src/lib/models/tree-dragged-element.model.ts","../../../projects/angular-tree-component/src/lib/models/tree-virtual-scroll.model.ts","../../../projects/angular-tree-component/src/lib/components/loading.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-viewport.component.ts","../../../projects/angular-tree-component/src/lib/components/tree.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-content.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-drop-slot.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-expander.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-children.component.ts","../../../projects/angular-tree-component/src/lib/mobx-angular/mobx-proxy.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-collection.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-wrapper.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-checkbox.component.ts","../../../projects/angular-tree-component/src/lib/directives/tree-drop.directive.ts","../../../projects/angular-tree-component/src/lib/directives/tree-drag.directive.ts","../../../projects/angular-tree-component/src/lib/directives/tree-animate-open.directive.ts","../../../projects/angular-tree-component/src/lib/angular-tree-component.module.ts","../../../projects/angular-tree-component/src/public-api.ts","../../../projects/angular-tree-component/src/circlon-angular-tree-component.ts"],"names":["computed","observable","action","__decorate","mobxAction","mobxComputed","mobxObservable","DRAG_OVER_CLASS"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAYa,wBAAwB;AAAI,IAMvC,YACY,WAA6B,EAC7B,aAA+B;AAC1C,QAFW,gBAAW,GAAX,WAAW,CAAkB;AAAE,QAC/B,kBAAa,GAAb,aAAa,CAAkB;AAC7C,QARY,qBAAgB,GAAG,EAAE,CAAC;AAClC,KAOM;AACN,IACE,QAAQ;AACV,QAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACxE,QACI,IAAI,IAAI,CAAC,OAAO,EAAE;AACtB,YAAM,IAAI,CAAC,OAAO,EAAE,CAAC;AACrB,SAAK;AACL,QACI,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;AAC7B,YAAM,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;AACzB,SAAK;AACL,QAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC/B,KAAG;AACH,IACE,YAAY;AACd,QAAI,OAAO,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;AAC/D,KAAG;AACH,IACE,UAAU,CAAC,IAA0B;AACvC,QAAI,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;AACvD,KAAG;AACH,IACE,WAAW;AACb,QAAI,IAAI,IAAI,CAAC,OAAO,EAAE;AACtB,YAAM,IAAI,CAAC,OAAO,EAAE,CAAC;AACrB,SAAK;AACL,KAAG;AACH;sDAtCC,SAAS,SAAC,EAAE,QAAQ,EAAE,mBAAmB,EAAE;qMACvC;AAAE;AAAoB;AACnB,YAVN,WAAW;AACX,YAFA,gBAAgB;AACjB;AAAI;AAGI,8BAUN,KAAK;AAAK;AAAG;AAAC,MChBJ,IAAI,GAAG;AACpB,IAAE,IAAI,EAAE,EAAE;AACV,IAAE,EAAE,EAAE,EAAE;AACR,IAAE,KAAK,EAAE,EAAE;AACX,IAAE,IAAI,EAAE,EAAE;AACV,IAAE,KAAK,EAAE,EAAE;AACX,IAAE,KAAK,EAAE,EAAE;AACX,IAAE,YAAY,EAAE,EAAE;AAClB;AAAG;AACH,WCCiB,CAAC,IAAe,EAAE,IAAc,EAAE,MAAW,KAAK,IAAI,IAAI,IAAI,CAAC,eAAe,EAAE,OAC1E,CAAC,IAAe,EAAE,IAAc,EAAE,MAAW,KAAK,IAAI,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OACxF,CAAC,IAAe,EAAE,IAAc,EAAE,MAAW,KAAK,IAAI,IAAI,IAAI,CAAC,cAAc,EAAE,OACtF,CAAC,IAAe,EAAE,IAAc,EAAE,MAAW,KAAK,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OACtE,CAAC,IAAe,EAAE,IAAc,EAAE,MAAW,KAAK,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAC7E,CAAC,IAAe,EAAE,IAAc,EAAE,MAAW,KAAK,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OACxE,CAAC,IAAe,EAAE,IAAc,EAAE,MAAW,KAAK,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,OAC9E,CAAC,IAAe,EAAE,IAAc,EAAE,MAAW,KAAK,IAAI,CAAC,KAAK,EAAE,OACpD,CAAC,IAAe,EAAE,IAAc,EAAE,MAAW,KAAK,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,cAAc,EAAE,OACpG,CAAC,IAAe,EAAE,IAAc,EAAE,MAAW,KAAK,IAAI,CAAC,MAAM,EAAE,QAC7D,CAAC,IAAe,EAAE,IAAc,EAAE,MAAW,KAAK,IAAI,CAAC,QAAQ,EAAE,QAC/D,CAAC,IAAe,EAAE,IAAc,EAAE,MAAW,KAAK,IAAI,CAAC,cAAc,EAAE,QACzE,CAAC,IAAe,EAAE,IAAc,EAAE,MAAW,KAAK,IAAI,CAAC,YAAY,EAAE,QACpE,CAAC,IAAe,EAAE,IAAc,EAAE,MAAW,KAAM,IAAI,CAAC,aAAa,EAAE,QACnE,CAAC,IAAe,EAAE,IAAc,EAAE,MAAW,KAAM,IAAI,CAAC,iBAAiB,EAAE,QAC/E,CAAC,IAAe,EAAE,IAAc,EAAE,MAAW,EAAE,EAAC,IAAI,EAAG,EAAE,EAAuB;AAC7F;AACA,IAAI,IAAI,MAAM,CAAC,OAAO,EAAE;AACxB,QAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AAC9B,KAAK;AAAE,SAAI;AACX,QAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AAC9B,KAAK;AACH,CAAC;AACF,MAxBY,YAAY,GAAG;AAC5B,IAAE,aAAa,IAAkF;AACjG,IAAE,mBAAmB,IAAsF;AAC3G,IAAE,eAAe,IAAiF;AAClG,IAAE,QAAQ,IAA0E;AACpF,IAAE,UAAU,IAA2E;AACvF,IAAE,MAAM,IAA4E;AACpF,IAAE,QAAQ,IAA6E;AACvF,IAAE,KAAK,IAAgE;AACvE,IAAE,eAAe,IAA6F;AAC9G,IAAE,MAAM,IAAiE;AACzE,IAAE,QAAQ,KAAmE;AAC7E,IAAE,UAAU,KAAyE;AACrF,IAAE,QAAQ,KAAuE;AACjF,IAAE,SAAS,KAAyE;AACpF,IAAE,aAAa,KAA6E;AAC5F,IAAE,SAAS,KAOR;AACH,EAAE;AAEF,MAAM,oBAAoB,GAAmB;AAC7C,IAAE,KAAK,EAAE;AACT,QAAI,KAAK,EAAE,YAAY,CAAC,aAAa;AACrC,QAAI,QAAQ,EAAE,IAAI;AAClB,QAAI,WAAW,EAAE,IAAI;AACrB,QAAI,aAAa,EAAE,YAAY,CAAC,eAAe;AAC/C,QAAI,aAAa,EAAE,YAAY,CAAC,eAAe;AAC/C,QAAI,IAAI,EAAE,YAAY,CAAC,SAAS;AAChC,KAAG;AACH,IAAE,IAAI,EAAE;AACR,QAAI,CAAC,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,UAAU;AACzC,QAAI,CAAC,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,QAAQ;AACtC,QAAI,CAAC,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,SAAS;AACvC,QAAI,CAAC,IAAI,CAAC,EAAE,GAAG,YAAY,CAAC,aAAa;AACzC,QAAI,CAAC,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,aAAa;AAC5C,QAAI,CAAC,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,aAAa;AAC5C,KAAG;AACH,CAAC,CAAC;AACF,MAuBa,WAAW;AACxB,IAoBE,YAAoB,UAAwB,EAAE;AAChD;AAIoC,QALd,YAAO,GAAP,OAAO,CAAmB;AAAE,QAC9C,IAAI,CAAC,aAAa,GAAG;AACzB,YAAM,KAAK,EAAE;AACb,gBAAQ,KAAK,0BAAE,IAAI,CAAC,OAAO,0CAAE,aAAa,0CAAE,KAAK,0CAAE,KAAK,mCAAI,oBAAoB,CAAC,KAAK,CAAC,KAAK;AAC5F,gBAAQ,QAAQ,0BAAE,IAAI,CAAC,OAAO,0CAAE,aAAa,0CAAE,KAAK,0CAAE,QAAQ,mCAAI,oBAAoB,CAAC,KAAK,CAAC,QAAQ;AACrG,gBAAQ,WAAW,0BAAE,IAAI,CAAC,OAAO,0CAAE,aAAa,0CAAE,KAAK,0CAAE,WAAW,mCAAI,oBAAoB,CAAC,KAAK,CAAC,WAAW;AAC9G,gBAAQ,aAAa,0BAAE,IAAI,CAAC,OAAO,0CAAE,aAAa,0CAAE,KAAK,0CAAE,aAAa,mCAAI,oBAAoB,CAAC,KAAK,CAAC,aAAa;AACpH,gBAAQ,aAAa,0BAAE,IAAI,CAAC,OAAO,0CAAE,aAAa,0CAAE,KAAK,0CAAE,aAAa,mCAAI,oBAAoB,CAAC,KAAK,CAAC,aAAa;AACpH,gBAAQ,IAAI,0BAAE,IAAI,CAAC,OAAO,0CAAE,aAAa,0CAAE,KAAK,0CAAE,IAAI,mCAAI,oBAAoB,CAAC,KAAK,CAAC,IAAI;AACzF,gBAAQ,SAAS,0BAAE,IAAI,CAAC,OAAO,0CAAE,aAAa,0CAAE,KAAK,0CAAE,SAAS,mCAAI,SAAS;AAC7E,gBAAQ,IAAI,0BAAE,IAAI,CAAC,OAAO,0CAAE,aAAa,0CAAE,KAAK,0CAAE,IAAI,mCAAI,SAAS;AACnE,gBAAQ,OAAO,4BAAE,IAAI,CAAC,OAAO,0CAAE,aAAa,0CAAE,KAAK,4CAAE,OAAO,qCAAI,SAAS;AACzE,gBAAQ,QAAQ,8BAAE,IAAI,CAAC,OAAO,4CAAE,aAAa,4CAAE,KAAK,4CAAE,QAAQ,qCAAI,SAAS;AAC3E,gBAAQ,SAAS,8BAAE,IAAI,CAAC,OAAO,4CAAE,aAAa,4CAAE,KAAK,4CAAE,SAAS,qCAAI,SAAS;AAC7E,gBAAQ,SAAS,8BAAE,IAAI,CAAC,OAAO,4CAAE,aAAa,4CAAE,KAAK,4CAAE,SAAS,qCAAI,SAAS;AAC7E,gBAAQ,SAAS,8BAAE,IAAI,CAAC,OAAO,4CAAE,aAAa,4CAAE,KAAK,4CAAE,SAAS,qCAAI,SAAS;AAC7E,gBAAQ,QAAQ,8BAAE,IAAI,CAAC,OAAO,4CAAE,aAAa,4CAAE,KAAK,4CAAE,QAAQ,qCAAI,SAAS;AAC3E,aAAO;AACP,YAAM,IAAI,EAAE;AACZ,gBAAQ,CAAC,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,UAAU;AAC7C,gBAAQ,CAAC,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,QAAQ;AAC1C,gBAAQ,CAAC,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,SAAS;AAC3C,gBAAQ,CAAC,IAAI,CAAC,EAAE,GAAG,YAAY,CAAC,aAAa;AAC7C,gBAAQ,CAAC,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,aAAa;AAChD,gBAAQ,CAAC,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,aAAa;AAChD,aAAO;AACP,SAAK,CAAA;AACL,QACI,kBAAI,IAAI,CAAC,OAAO,4CAAE,aAAa,4CAAE,IAAI,EAAE;AAC3C,YAAM,IAAI,CAAC,aAAa,CAAC,IAAI,mCAClB,IAAI,CAAC,aAAa,CAAC,IAAI,GACvB,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CACnC,CAAA;AACP,SAAK;AACL,QACI,IAAI,OAAO,CAAC,GAAG,EAAE;AACrB,YAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAA,OAAgB,OAAO,CAAC,aAAa,4CAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAI,YAAY,CAAC,QAAQ,CAAC;AAC7H,YAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAA,OAAgB,OAAO,CAAC,aAAa,4CAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAI,YAAY,CAAC,UAAU,CAAC;AAC7H,SAAK;AACL,KAAG;AACH,IA5DE,IAAI,gBAAgB,KAAa,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,IAAI,aAAa,CAAC,EAAE;AAC3F,IAAE,IAAI,aAAa,KAAa,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,IAAI,UAAU,CAAC,EAAE;AAClF,IAAE,IAAI,YAAY,KAAa,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI,MAAM,CAAC,EAAE;AAC5E,IAAE,IAAI,OAAO,KAAa,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,EAAE;AAChE,IAAE,IAAI,eAAe,KAAa,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,IAAI,YAAY,CAAC,EAAE;AACxF,IAAE,IAAI,WAAW,KAAU,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;AAC7D,IAAE,IAAI,YAAY,KAAa,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI,CAAC,CAAC,EAAE;AACvE,IAAE,IAAI,gBAAgB,KAAc,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;AAC3E,IAAE,IAAI,aAAa,KAAc,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;AACrE,IAAE,IAAI,YAAY,KAAa,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI,CAAC,CAAC,EAAE;AACvE,IAAE,IAAI,mBAAmB,KAAa,OAAO,IAAI,CAAC,OAAO,CAAC,mBAAmB,IAAI,GAAG,CAAC,EAAE;AACvF,IAAE,IAAI,gBAAgB,KAAc,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,KAAK,SAAS,GAAG,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;AAChI,IAAE,IAAI,GAAG,KAAc,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;AACnD,IAAE,IAAI,MAAM,KAAS,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;AAClD,IAAE,IAAI,WAAW,KAAc,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;AACjE,IAAE,IAAI,WAAW,KAAc,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,KAAK,SAAS,GAAG,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;AACjH,IAAE,IAAI,eAAe,KAAkB,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;AAC7E,IAAE,IAAI,oBAAoB,KAAc,OAAO,IAAI,CAAC,OAAO,CAAC,oBAAoB,KAAK,SAAS,GAAG,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,EAAE;AAC5I,IA2CE,YAAY,CAAC,IAAc;AAAK,QAC9B,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;AACnC,YAAM,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AAC7C,SAAK;AACL;AAEE;AACI,QAAF,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AACnD,QAAI,IAAI,SAAS,CAAC,EAAE,EAAE;AACtB,YAAM,OAAO,SAAS,CAAC,EAAE,CAAC;AAC1B,SAAK;AACL,QAAI,OAAO,SAAS,CAAC;AACrB,KAAG;AACH,IACE,SAAS,CAAC,OAAO,EAAE,EAAE,EAAE,MAAO;AAAK,QACjC,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,YAAY,QAAQ,EAAE;AACpD,YAAM,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;AACzD,SAAK;AACL,aAAS;AACT,YAAM,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,KAAK,SAAS,GAAG,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;AAClF,SAAK;AACL,KAAG;AACH,IACE,SAAS,CAAC,IAAc;AAAK,QAC3B,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,YAAY,QAAQ,EAAE;AACpD,YAAM,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AAC1C,SAAK;AAAE,aAAI;AACX,YAAM,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;AACpC,SAAK;AACL,KAAG;AACH,IACE,SAAS,CAAC,IAAc;AAAK,QAC3B,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;AACtE,KAAG;AACH,IACE,UAAU,CAAC,IAAc;AAAK,QAC5B,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;AAC3B,YAAM,OAAO,CAAC,CAAC;AACf,SAAK;AACL,QACI,IAAI,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;AACnD,QACI,IAAI,OAAO,UAAU,KAAK,UAAU,EAAE;AAC1C,YAAM,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;AACpC,SAAK;AACL;AAEE,QAAE,OAAO,UAAU,GAAG,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,GAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC;AAC1E,KAAG;AACH,IACE,IAAI,cAAc;AAAM,QACtB,OAAO,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,KAAK,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,GAAG,CAAC,CAAC;AAC7F,KAAG;AACH;AAAE;AC/LK,MAAM,WAAW,GAAG;AAC3B,IAAE,cAAc,EAAE,gBAAgB;AAClC,IAAE,QAAQ,EAAE,UAAU;AACtB,IAAE,UAAU,EAAE,YAAY;AAC1B,IAAE,YAAY,EAAE,cAAc;AAC9B,IAAE,cAAc,EAAE,gBAAgB;AAClC,IAAE,MAAM,EAAE,QAAQ;AAClB,IAAE,QAAQ,EAAE,UAAU;AACtB,IAAE,KAAK,EAAE,OAAO;AAChB,IAAE,IAAI,EAAE,MAAM;AACd,IAAE,WAAW,EAAE,aAAa;AAC5B,IAAE,UAAU,EAAE,YAAY;AAC1B,IAAE,QAAQ,EAAE,UAAU;AACtB,IAAE,QAAQ,EAAE,UAAU;AACtB,IAAE,KAAK,EAAE,OAAO;AAChB,IAAE,gBAAgB,EAAE,kBAAkB;AACtC,IAAE,YAAY,EAAE,cAAc;AAC9B,IAAE,WAAW,EAAE,aAAa;AAC5B,CAAC;AAAE;AACH;AAA0F;AAAmI;AAAqI;AAAwJ;AAAoE;AAAI;AAAiE;AAA+G;AAAI,MCbzuB,QAAQ;AAAI,IA2CvB,YAAmB,IAAS,EAAS,MAAgB,EAAS,SAAoB,EAAE,KAAa;AACnG,QADqB,SAAI,GAAJ,IAAI,CAAK;AAAE,QAAO,WAAM,GAAN,MAAM,CAAU;AAAE,QAAO,cAAS,GAAT,SAAS,CAAW;AAAE,QAjBxE,aAAQ,GAAG,CAAC,CAAC;AAC3B,QAsJE,cAAS,GAAG,CAAC,OAAO,EAAE,MAAO;AAC/B,YAAI,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;AAC/E,SAAG,CAAA;AACH,QACE,yBAAoB,GAAG;AACzB,YAAI,OAAO,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC;AAC7C,SAAG,CAAA;AACH,QA5II,IAAI,IAAI,CAAC,EAAE,KAAK,SAAS,IAAI,IAAI,CAAC,EAAE,KAAK,IAAI,EAAE;AACnD,YAAM,IAAI,CAAC,EAAE,GAAG,IAAI,EAAE,CAAC;AACvB,SAAK;AACL,QAAI,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACvB,QACI,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;AACnC,YAAM,IAAI,CAAC,aAAa,EAAE,CAAC;AAC3B,SAAK;AACL,QAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC5B,KAAG;AACH,IApDY,IAAI,QAAQ,KAAK,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE;AAAE;AAChE,IAAM,IAAI,UAAU,KAAK,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE;AAAE;AACpE,IAAM,IAAI,QAAQ,KAAK,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE;AAAE;AAChE,IAAM,IAAI,SAAS,KAAK,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,EAAE;AAAE;AACtE,IAAM,IAAI,UAAU;AAC1B,QAAI,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;AAC7B,YAAQ,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAC/C,SAAK;AAAE,aAAI;AACX,YAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAc,KAAK,IAAI,CAAC,UAAU,CAAC,CAAC;AACrE,SAAK;AACL,KAAG;AAAE;AACC,IAAM,IAAI,aAAa;AAC7B,QAAI,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;AAC7B,YAAM,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAC7C,SAAK;AAAE,aAAI;AACX,YAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAc,KAAK,IAAI,CAAC,aAAa,CAAC,CAAC;AACzE,SAAK;AACL,KAAG;AAAE;AACC,IAAM,IAAI,mBAAmB;AACnC,QAAI,OAAO,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;AAClD,KAAG;AACH,IAKY,IAAI,KAAK;AAAM,QACvB,OAAO,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;AACnD,KAAG;AACH,IAAY,IAAI,IAAI;AAAM,QACtB,OAAO,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;AAC7D,KAAG;AACH,IACE,IAAI,UAAU;AAAM,QAClB,MAAM;AACV,kEAAkE,CAAC;AACnE,KAAG;AACH,IAEE,IAAI,YAAY,KAAK,OAAO,IAAI,CAAC,aAAa,CAAC,EAAE;AAAE;AAEjD;AAA8B,IAahC,IAAI,WAAW;AAAM,QACnB,OAAO,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3F,KAAG;AACH,IAAE,IAAI,WAAW,KAAc,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;AACzD,IAAE,IAAI,MAAM,KAAc,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;AACrD,IAAE,IAAI,MAAM,KAAc,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;AAC5D,IAAE,IAAI,UAAU,KAAe,OAAO,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE;AACzE;AAEA,IAAE,IAAI,OAAO,KAAkB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;AAC/D,IAAE,SAAS,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE;AACvD;AAEA,IAAE,IAAI,YAAY;AAClB,QAAI,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;AACpC,KAAG;AACH,IACE,IAAI,EAAE;AACR,QAAI,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AAC/B,KAAG;AACH,IACE,IAAI,EAAE,CAAC,KAAK;AACd,QAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAC/B,KAAG;AACH,IACE,QAAQ,CAAC,GAAG;AACd,QAAI,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC;AAClD,KAAG;AACH,IACE,QAAQ,CAAC,GAAG,EAAE,KAAK;AACrB,QAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,KAAK,CAAC;AACnD,KAAG;AACH;AAEA,IAAE,oBAAoB,CAAC,KAAK,EAAE,UAAU,GAAG,KAAK;AAChD,QAAI,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;AAC1D,QAAI,MAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACzC,QACI,OAAO,QAAQ,CAAC,MAAM,GAAG,KAAK,GAAG,KAAK,GAAG,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC;AAC5E,KAAG;AACH,IACE,eAAe,CAAC,UAAU,GAAG,KAAK;AACpC,QAAI,OAAO,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;AACrD,KAAG;AACH,IACE,mBAAmB,CAAC,UAAU,GAAG,KAAK;AACxC,QAAI,OAAO,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;AACrD,KAAG;AACH,IACE,kBAAkB;AACpB,QAAI,OAAO,IAAI,CAAC,eAAe,CAAC;AAChC,KAAG;AACH,IACY,IAAI,eAAe;AAC/B,QAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAClE,KAAG;AACH,IACE,aAAa,CAAC,UAAU,GAAG,KAAK;AAClC,QAAI,IAAI,QAAQ,GAAG,UAAU,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC;AACrE,QACI,OAAO,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AACpE,KAAG;AACH,IACE,YAAY,CAAC,UAAU,GAAG,KAAK;AACjC,QAAI,IAAI,QAAQ,GAAG,UAAU,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC;AACrE,QACI,OAAO,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AACtF,KAAG;AACH,IACE,YAAY,CAAC,QAAQ,GAAG,IAAI,EAAE,UAAU,GAAG,KAAK;AAClD,QAAI,OAAO,QAAQ,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC;AACxE,YAAW,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC;AAC3C,YAAW,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;AACtE,KAAG;AACH,IACE,gBAAgB,CAAC,UAAU,GAAG,KAAK;AACrC,QAAI,IAAI,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;AAC/D,QAAI,IAAI,CAAC,eAAe,EAAE;AAC1B,YAAM,OAAO,IAAI,CAAC,UAAU,CAAC;AAC7B,SAAK;AACL,QAAI,OAAO,eAAe,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;AAC9D,KAAG;AACH,IACE,sBAAsB,CAAC,UAAU,GAAG,KAAK;AAC3C,QAAI,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;AACpD,QAAI,OAAO,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,SAAS;AAC1C,cAAQ,IAAI;AACZ,cAAQ,SAAS,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;AACrD,KAAG;AACH,IACU,mBAAmB,CAAC,UAAU,GAAG,KAAK;AAAK,QACjD,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM;AAChC,aAAO,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAC7E,QACI,OAAO,QAAQ,IAAI,EAAE,CAAC;AAC1B,KAAG;AACH,IACU,gBAAgB,CAAC,UAAU,GAAG,KAAK;AAC7C,QAAI,OAAO,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC9D,KAAG;AACH,IACE,cAAc,CAAC,IAAc;AAC/B,QAAI,IAAI,IAAI,KAAK,IAAI;AAAG,YAAD,OAAO,IAAI,CAAC;AACnC;AAAc,YAAL,OAAO,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AAChE,KAAG;AACH,IACE,cAAc;AAAM,QAClB,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AAC/D,KAAG;AACH,IACE,QAAQ;AAAM,QACZ,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,mBAAoB,IAAI,CAAC,KAAM,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACvF,KAAG;AACH,IACE,MAAM,CAAC,MAAM;AACf,QAAI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,EAAE;AAC3C,YAAM,IAAI,EAAE,MAAM,CAAC,OAAO;AAC1B,YAAM,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE;AACtD,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IASE,SAAS;AACX,QAAI,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AACxC,KAAG;AACH;AAEoB,IAClB,gBAAgB;AAClB,QAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;AACnC,YAAM,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;AAC/B,SAAK;AACL,QAAI,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AAC1D,aAAO,IAAI,CAAC,CAAC,QAAQ;AACrB,YAAQ,IAAI,QAAQ,EAAE;AACtB,gBAAU,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;AAC9C,gBAAU,IAAI,CAAC,aAAa,EAAE,CAAC;AAC/B,gBAAU,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;AAC3E,oBAAY,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AACrC,iBAAW;AACX,gBAAU,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK;AACtC,oBAAY,IAAI,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC,WAAW,EAAE;AACnE,wBAAc,KAAK,CAAC,MAAM,EAAE,CAAC;AAC7B,qBAAa;AACb,iBAAW,CAAC,CAAC;AACb,aAAO;AAAE,SAAD,CAAC,CAAC,IAAI,CAAC;AACf,YAAQ,IAAI,CAAC,SAAS,CAAC;AACvB,gBAAU,SAAS,EAAE,WAAW,CAAC,gBAAgB;AACjD,gBAAU,IAAI,EAAE,IAAI;AACpB,aAAS,CAAC,CAAC;AACX,SAAO,CAAC,CAAC;AACT,KAAG;AACH,IACE,MAAM;AACR,QAAI,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;AAC1B,YAAM,IAAI,CAAC,cAAc,EAAE,CAAC;AAC5B,SAAK;AACL,QACI,OAAO,IAAI,CAAC;AAChB,KAAG;AACH,IACE,QAAQ;AACV,QAAI,IAAI,IAAI,CAAC,UAAU,EAAE;AACzB,YAAM,IAAI,CAAC,cAAc,EAAE,CAAC;AAC5B,SAAK;AACL,QACI,OAAO,IAAI,CAAC;AAChB,KAAG;AACH,IACE,QAAQ,CAAC,EAA4B;AACvC,QAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;AACnC,YAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;AACzB,gBAAQ,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;AAC7D,aAAO;AACP,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACE,SAAS;AACX,QAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;AAC3C,KAAG;AACH,IACE,WAAW;AACb,QAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC7C,KAAG;AACH,IACE,aAAa;AACf,QAAI,IAAI,IAAI,CAAC,UAAU,EAAE;AACzB,YAAM,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;AAC/B,YAAM,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC;AACtC,SAAK;AACL,QACI,OAAO,IAAI,CAAC;AAChB,KAAG;AACH,IACE,cAAc;AAChB,QAAI,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACzC,QACI,OAAO,IAAI,CAAC;AAChB,KAAG;AACH,IACE,aAAa,CAAC,KAAK;AACrB,QAAI,IAAI,IAAI,CAAC,WAAW,EAAE;AAC1B,YAAM,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAClD,SAAK;AACL,QACI,OAAO,IAAI,CAAC;AAChB,KAAG;AAAE;AAED,IAAF,gBAAgB;AAClB,QAAI,IAAI,CAAC,OAAO;AAChB,YAAM,QAAQ,CACN,MAAM,IAAI,CAAC,UAAU,EACrB,CAAC,UAAU;AACnB,gBAAU,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,WAAW,IAAI,UAAU,EAAE;AAChE,oBAAY,IAAI,CAAC,gBAAgB,EAAE,CAAC;AACpC,iBAAW;AACX,aAAS,EACD,EAAE,eAAe,EAAE,IAAI,EAAE,CAC1B,CAAC;AACR,KAAG;AACH,IACE,OAAO;AACT,QAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;AACvB,YAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;AACxD,SAAK;AACL,QAAI,IAAI,IAAI,CAAC,OAAO,EAAE;AACtB,YAAM,IAAI,CAAC,OAAO,EAAE,CAAC;AACrB,SAAK;AACL,QAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AACvB,QAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACzB,KAAG;AACH,IACE,WAAW,CAAC,KAAK,EAAE,KAAK,GAAG,KAAK;AAClC,QAAI,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;AACrD,QAAI,IAAI,KAAK,EAAE;AACf,YAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAChD,SAAK;AACL,QACI,OAAO,IAAI,CAAC;AAChB,KAAG;AACH,IACE,YAAY;AACd,QAAI,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;AACtE,KAAG;AACH,IACU,aAAa,CAAC,KAAK;AAC7B,QAAI,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;AAC7B,YAAM,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAClD,SAAK;AAAE,aAAI;AACX,YAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;AAC1E,SAAK;AACL,QACI,OAAO,IAAI,CAAC;AAChB,KAAG;AACH,IACE,cAAc;AAChB,QAAI,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACzC,QACI,OAAO,IAAI,CAAC;AAChB,KAAG;AACH,IACE,eAAe,CAAC,KAAK,GAAG,KAAK;AAC/B,QAAI,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AAC5C,QACI,OAAO,IAAI,CAAC;AAChB,KAAG;AACH,IACE,mBAAmB,CAAC,KAAK,GAAG,KAAK;AACnC,QAAI,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC;AACjC,aAAO,aAAa,EAAE,CAAC;AACvB,QACI,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AAC/C,QACI,OAAO,IAAI,CAAC;AAChB,KAAG;AACH,IACE,cAAc,CAAC,KAAK,GAAG,KAAK;AAC9B,QAAI,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAC7D,KAAG;AACH,IACE,KAAK,CAAC,MAAM,GAAG,IAAI;AACrB,QAAI,IAAI,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC;AACvD,QAAI,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACxC,QAAI,IAAI,MAAM,EAAE;AAChB,YAAM,IAAI,CAAC,cAAc,EAAE,CAAC;AAC5B,SAAK;AACL,QAAI,IAAI,YAAY,EAAE;AACtB,YAAM,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;AAC1E,SAAK;AACL,QAAI,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;AACjE,QACI,OAAO,IAAI,CAAC;AAChB,KAAG;AACH,IACE,IAAI;AACN,QAAI,IAAI,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC;AACvD,QAAI,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACxC,QAAI,IAAI,YAAY,EAAE;AACtB,YAAM,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;AAClE,SAAK;AACL,QACI,OAAO,IAAI,CAAC;AAChB,KAAG;AACH,IACE,WAAW,CAAC,KAAK;AACnB,QAAI,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAC5C,KAAG;AACH,IACE,IAAI;AACN,QAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AAC3B,KAAG;AACH,IACE,IAAI;AACN,QAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AAC5B,KAAG;AACH,IACE,WAAW,CAAC,UAAkB,EAAE,MAAM,EAAE,OAAY,IAAI;AAC1D,QAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AAClC,QACI,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC;AAC3D,QAAI,MAAM,WAAW,GAAG,aAAa,CAAC,UAAU,CAAC,CAAC;AAClD,QACI,IAAI,WAAW,EAAE;AACrB,YAAM,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;AACtD,SAAK;AACL,KAAG;AACH,IACE,aAAa;AACf,QAAI,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACzC,KAAG;AACH,IACU,aAAa;AACvB,QAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;AAC7C,aAAO,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,KAAK,IAAI,QAAQ,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;AACvE,KAAG;AACH,CAAC;AA5YW;AAAc,IAAvBA,UAAQ;AAAG;AAAwC;AAC9B,wCAD4C;AACxD;AAAc,IAAvBA,UAAQ;AAAG;AAAwC;AAClC,0CADoD;AAC5D;AAAc,IAAvBA,UAAQ;AAAG;AAAwC;AAC9B,wCAD4C;AACxD;AAAc,IAAvBA,UAAQ;AAAG;AAAwC;AACpC,yCADwD;AAC9D;AAAc,IAAvBA,UAAQ;AAAG;AACQ;AACS,0CAI5B;AACS;AAAc,IAAvBA,UAAQ;AAAG;AACK;AACS,6CAIzB;AACS;AAAc,IAAvBA,UAAQ;AAAG;AACD;AACX,mDAAC;AAEW;AAAc,IAAzBC,YAAU;AAAG;AACC,0CADkB;AACrB;AAAc,IAAzBA,YAAU;AAAG;AACS,uCADG;AACd;AAAc,IAAzBA,YAAU;AAAG;AACU,0CADC;AACb;AAAc,IAAzBA,YAAU;AAAG;AACQ,wCADK;AACjB;AAAc,IAAvBD,UAAQ;AAAG;AACK;AAEjB,qCADC;AACS;AAAc,IAAvBA,UAAQ;AAAG;AACG;AAAyC,oCACvD;AA4ES;AAAc,IAAvBA,UAAQ;AAAG;AACG;AAAyC,+CACvD;AAqMO;AAAc,IAArBE,QAAM;AAAG;AACQ;AACgB;AAErB,6CAIZ;AA8EO;AAAc,IAArBA,QAAM;AAAG;AACa;AACL;AAA6C,6CAC9D;AAGH,SAAS,IAAI;AACb,IAAE,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,cAAc,CAAC,CAAC;AACpD;AAAE;AACF;AAA4F;AAAmI;AAAqI;AAAwJ;AAAoE;AAAI;AAAmE;AAA+G;AAAI,MC/Y7uB,SAAS;AAAI,IAD1B;AACE,QAGA,YAAO,GAAgB,IAAI,WAAW,EAAE,CAAC;AAC3C,QACE,eAAU,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACxC,QAGc,oBAAe,GAAqB,EAAE,CAAC;AACrD,QAAc,wBAAmB,GAAqB,EAAE,CAAC;AACzD,QAAc,kBAAa,GAAqB,EAAE,CAAC;AACnD,QAAc,kBAAa,GAAqB,EAAE,CAAC;AACnD,QAAc,kBAAa,GAAW,IAAI,CAAC;AAC3C,QAEU,gBAAW,GAAG,IAAI,CAAC;AAC7B,QACU,kBAAa,GAAmB,EAAE,CAAC;AAC7C,KAofC;AACD;AAAe,IAnfb,SAAS,CAAC,KAAK;AACjB,QAAI,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;AAC3B,QAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC7C,QAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAClC,KAAG;AACH,IACE,SAAS,CAAC,SAAS,EAAE,EAAE;AACzB,QAAI,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;AAC9D,QAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAC1C,KAAG;AACH;AAEY,IACV,cAAc;AAAM,QAClB,OAAO,IAAI,CAAC,WAAW,CAAC;AAC5B,KAAG;AACH,IAEE,aAAa;AAAM,QACjB,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;AAC/B,KAAG;AACH,IACE,cAAc;AAAM,QAClB,OAAO,IAAI,CAAC,WAAW,CAAC;AAC5B,KAAG;AACH,IACE,eAAe;AACjB,QAAI,OAAO,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC;AAC5C,KAAG;AACH,IACE,YAAY,CAAC,UAAU,GAAG,KAAK;AACjC,QAAI,MAAM,IAAI,GAAG,UAAU,GAAG,IAAI,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;AAClE,QAAI,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AACxD,KAAG;AACH,IACE,WAAW,CAAC,UAAU,GAAG,KAAK;AAChC,QAAI,MAAM,IAAI,GAAG,UAAU,GAAG,IAAI,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;AAClE,QAAI,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AACtE,KAAG;AACH,IACE,IAAI,SAAS;AACf,QAAI,OAAO,SAAS,CAAC,WAAW,KAAK,IAAI,CAAC;AAC1C,KAAG;AACH,IACE,aAAa,CAAC,IAAI;AACpB,QAAI,OAAO,IAAI,CAAC,WAAW,KAAK,IAAI,CAAC;AACrC,KAAG;AACH,IACE,WAAW;AAAM,QACf,OAAO,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC;AACjD,KAAG;AACH,IACY,IAAI,WAAW;AAC3B,QAAI,OAAO,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC;AAC5E,KAAG;AACH,IACY,IAAI,aAAa;AAC7B,QAAI,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC;AACnD,aAAO,MAAM,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;AAC/C,aAAO,GAAG,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;AACzC,QACI,OAAO,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACjC,KAAG;AACH,IACY,IAAI,WAAW;AAC3B,QAAI,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;AACjD,aAAO,MAAM,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;AAC7C,aAAO,GAAG,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;AACzC,QACI,OAAO,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACjC,KAAG;AACH,IACY,IAAI,WAAW;AAC3B,QAAI,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;AACjD,aAAS,MAAM,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;AAC/C,aAAS,GAAG,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3C,QACI,OAAO,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACjC,KAAG;AACH,IACY,IAAI,iBAAiB;AACjC,QAAI,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC;AACvD,aAAS,MAAM,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;AACrD,aAAS,GAAG,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3C,QACI,OAAO,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACjC,KAAG;AACH;AAEA,IAAE,aAAa,CAAC,IAAW,EAAE,SAAS,GAAE,IAAI;AAAK,QAC7C,IAAI,CAAC,IAAI;AAAG,YAAD,OAAO,IAAI,CAAC;AAC3B,QACI,SAAS,GAAG,SAAS,IAAI,IAAI,CAAC,WAAW,CAAC;AAC9C,QAAI,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC;AAAG,YAAD,OAAO,SAAS,CAAC;AAC5C,QACI,IAAI,CAAC,SAAS,CAAC,QAAQ;AAAG,YAAD,OAAO,IAAI,CAAC;AACzC,QACI,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;AACjC,QAAI,MAAM,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,OAAO,CAAC,CAAC;AACrE,QACI,IAAI,CAAC,SAAS;AAAG,YAAD,OAAO,IAAI,CAAC;AAChC,QACI,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAC/C,KAAG;AACH,IACE,WAAW,CAAC,EAAE;AAChB,QAAI,MAAM,KAAK,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;AAChC,QACI,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,KAAK,KAAK,CAAC,CAAC;AAClE,KAAG;AACH,IACE,SAAS,CAAC,SAAS,EAAE,SAAS,GAAG,IAAI;AACvC,QAAI,SAAS,GAAG,SAAS,IAAI,IAAI,CAAC,WAAW,CAAC;AAC9C,QACI,IAAI,CAAC,SAAS,CAAC,QAAQ;AAAG,YAAD,OAAO,IAAI,CAAC;AACzC,QACI,MAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACrD,QACI,IAAI,KAAK,EAAE;AACf,YAAM,OAAO,KAAK,CAAC;AACnB,SAAK;AAAE,aAAI;AACX,YAAM,KAAK,IAAI,KAAK,IAAI,SAAS,CAAC,QAAQ,EAAE;AAC5C,gBAAQ,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;AACjE,gBAAQ,IAAI,eAAe;AAAG,oBAAD,OAAO,eAAe,CAAC;AACpD,aAAO;AACP,SAAK;AACL,KAAG;AACH,IACE,UAAU,CAAC,IAAI;AACjB,QAAI,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACzC,KAAG;AACH,IACE,QAAQ,CAAC,IAAI;AACf,QAAI,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACvC,KAAG;AACH,IACE,QAAQ,CAAC,IAAI;AACf,QAAI,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACvC,KAAG;AACH,IACE,UAAU,CAAC,IAAI;AACjB,QAAI,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC7C,KAAG;AACH,IACE,WAAW;AACb,QAAI,IAAI,CAAC,OAAO,EAAE,CAAC;AACnB,QAAI,IAAI,CAAC,cAAc,EAAE,CAAC;AAC1B,KAAG;AACH,IACE,OAAO;AACT;AACI,QAAA,IAAI,IAAI,CAAC,WAAW,EAAE;AAC1B,YAAM,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;AACjC,SAAK;AACL,KAAG;AACH,IACE,cAAc;AAChB,QAAI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,IAAI,YAAY,CAAC,WAAW,EAAE,CAAC,CAAC;AAC3E,QAAI,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;AAC5B,KAAG;AACH;AAEA,IAAU,OAAO,CAAC,EAAE,KAAK,EAAE,OAAO,GAAG,IAAI,EAAE,MAAM,GAAG,IAAI,EAA2C;AACnG,QAAI,IAAI,OAAO,EAAE;AACjB,YAAM,IAAI,CAAC,OAAO,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;AAC9C,SAAK;AACL,QAAI,IAAI,MAAM,EAAE;AAChB,YAAM,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AAC3B,SAAK;AACL,QAAI,IAAI,KAAK,EAAE;AACf,YAAM,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACzB,SAAK;AACL,QACI,IAAI,CAAC,MAAM,EAAE,CAAC;AAClB,KAAG;AACH,IACU,MAAM;AAChB;AACI,QAAA,IAAI,iBAAiB,GAAG;AAC5B,YAAM,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM;AAC7B,YAAM,OAAO,EAAE,IAAI;AACnB,YAAM,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK;AAC9C,SAAK,CAAC;AACN,QACI,IAAI,CAAC,OAAO,EAAE,CAAC;AACnB,QACI,IAAI,CAAC,WAAW,GAAG,IAAI,QAAQ,CAAC,iBAAiB,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AACtE,QACI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;AAC3C;AAEE,QAAE,IAAI,IAAI,CAAC,WAAW,EAAE;AAC1B,YAAM,IAAI,IAAI,CAAC,KAAK,EAAE;AACtB,gBAAQ,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;AACjC,gBAAQ,IAAI,CAAC,uBAAuB,EAAE,CAAC;AACvC,aAAO;AACP,SAAK;AAAE,aAAI;AACX,YAAM,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC;AAC5D,SAAK;AACL,KAAG;AACH,IAEU,cAAc,CAAC,IAAI;AAC7B,QAAI,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC;AAC/C,KAAG;AACH,IACU,QAAQ,CAAC,KAAK;AACxB,QAAI,SAAS,CAAC,WAAW,GAAG,KAAK,GAAG,IAAI,GAAG,IAAI,CAAC;AAChD,KAAG;AACH,IACU,QAAQ,CAAC,EAAE;AACrB,QAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;AACpD,KAAG;AACH,IACU,aAAa;AACvB,QAAI,IAAI,YAAY,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AAC7C,QAAI,IAAI,QAAQ,GAAG,YAAY,GAAG,YAAY,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AAClG,QAAI,IAAI,QAAQ;AAAG,YAAD,QAAQ,CAAC,KAAK,EAAE,CAAC;AACnC,KAAG;AACH,IACU,iBAAiB;AAC3B,QAAI,IAAI,YAAY,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AAC7C,QAAI,IAAI,QAAQ,GAAG,YAAY,GAAG,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AAC/F,QAAI,IAAI,QAAQ;AAAG,YAAD,QAAQ,CAAC,KAAK,EAAE,CAAC;AACnC,KAAG;AACH,IACU,cAAc;AACxB,QAAI,IAAI,YAAY,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AAC7C,QAAI,IAAI,YAAY,IAAI,YAAY,CAAC,WAAW,IAAI,YAAY,CAAC,WAAW,EAAE;AAC9E,YAAM,YAAY,CAAC,cAAc,EAAE,CAAC;AACpC,SAAK;AACL,aAAS;AACT,YAAM,IAAI,QAAQ,GAAG,YAAY,GAAG,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AAC/F,YAAM,IAAI,QAAQ;AAAG,gBAAD,QAAQ,CAAC,KAAK,EAAE,CAAC;AACrC,SAAK;AACL,KAAG;AACH,IACU,YAAY;AACtB,QAAI,IAAI,YAAY,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AAC7C,QAAI,IAAI,CAAC,YAAY;AAAG,YAAD,OAAO;AAC9B,QAAI,IAAI,YAAY,CAAC,UAAU,EAAE;AACjC,YAAM,YAAY,CAAC,cAAc,EAAE,CAAC;AACpC,SAAK;AACL,aAAS;AACT,YAAM,IAAI,QAAQ,GAAG,YAAY,CAAC,UAAU,CAAC;AAC7C,YAAM,IAAI,QAAQ;AAAG,gBAAD,QAAQ,CAAC,KAAK,EAAE,CAAC;AACrC,SAAK;AACL,KAAG;AACH,IACU,aAAa,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,GAAG,KAAK;AAClD,QAAI,IAAI,KAAK,EAAE;AACf,YAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAC5C,SAAK;AACL,aAAS;AACT,YAAM,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAC7C,SAAK;AACL,QACI,IAAI,KAAK,EAAE;AACf,YAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAChD,YAAM,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;AAChE,YAAM,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC;AACpE,SAAK;AAAE,aAAI;AACX,YAAM,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;AAClE,YAAM,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,cAAc,EAAE,IAAI,EAAE,CAAC,CAAC;AACtE,SAAK;AACL,KAAG;AACH,IACU,eAAe,CAAC,IAAI,EAAE,KAAK;AACrC,QAAI,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,mBAAmB,EAAE,EAAC,CAAC,IAAI,CAAC,EAAE,GAAG,KAAK,EAAC,CAAC,CAAC;AAC/F,QACI,IAAI,KAAK,EAAE;AACf,YAAM,IAAI,CAAC,KAAK,EAAE,CAAC;AACnB,YAAM,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,SAAK;AAAE,aAAI;AACX,YAAM,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;AAChE,SAAK;AACL,KAAG;AACH,IACU,eAAe,CAAC,IAAI,EAAE,KAAK;AACrC,QAAI,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,eAAe,EAAE,EAAC,CAAC,IAAI,CAAC,EAAE,GAAG,KAAK,EAAC,CAAC,CAAC;AACvF,QAAI,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,cAAc,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;AACvF,KAAG;AACH,IACU,SAAS;AACnB,QAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;AACnD,KAAG;AACH,IACU,WAAW;AACrB,QAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;AACrD,KAAG;AACH,IACU,WAAW,CAAC,IAAI,EAAE,KAAK;AACjC,QAAI,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,aAAa,EAAE,EAAC,CAAC,IAAI,CAAC,EAAE,GAAG,KAAK,EAAC,CAAC,CAAC;AACnF,KAAG;AACH,IACU,gBAAgB,CAAC,OAAO;AAClC,QAAI,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,EAAE,KAAK,MAAM,CAAC,MAAM,CAAC,aAAa,EAAE;AAC5F,YAAM,CAAC,EAAE,GAAG,IAAI;AAChB,SAAK,CAAC,EAAE,EAAE,CAAC,CAAC;AACZ,KAAG;AACH,IACE,gBAAgB,CAAC,IAAI,EAAE,MAAM;AAC/B,QAAI,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACtE,QAAI,IAAI,SAAS,EAAE;AACnB,YAAM,MAAM,CAAC,cAAc,EAAE,CAAC;AAC9B,YAAM,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;AACpC,YAAM,OAAO,IAAI,CAAC;AAClB,SAAK;AAAE,aAAI;AACX,YAAM,OAAO,KAAK,CAAC;AACnB,SAAK;AACL,KAAG;AACH,IACU,WAAW,CAAC,MAAM,EAAE,QAAQ,GAAG,IAAI;AAC7C,QAAI,IAAI,QAAQ,CAAC;AACjB,QACI,IAAI,CAAC,MAAM,EAAE;AACjB,YAAM,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;AAChC,SAAK;AACL;AAEE,QAAE,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,OAAO,EAAE,KAAK,QAAQ,EAAE;AACxD,YAAM,QAAQ,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;AAChG,SAAK;AACL,aAAS,IAAI,MAAM,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;AACrD,YAAO,QAAQ,GAAG,MAAM,CAAC;AACzB,SAAK;AACL,aAAS;AACT,YAAM,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,MAAM,CAAC,CAAC;AAClE,YAAM,OAAO,CAAC,KAAK,CAAC,uCAAuC,CAAC,CAAC;AAC7D,YAAM,OAAO;AACb,SAAK;AACL,QACI,MAAM,GAAG,GAAG,EAAE,CAAC;AACnB,QAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;AAClF,QAAI,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;AAC7B,QAAI,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,YAAY,EAAE,CAAC,CAAC;AAC5D,KAAG;AACH,IACU,WAAW;AACrB,QAAI,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;AAC5B,QAAI,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,YAAY,EAAE,CAAC,CAAC;AAC5D,KAAG;AACH,IACU,QAAQ,CAAC,IAAI,EAAE,EAAE;AAC3B,QAAI,MAAM,SAAS,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC9C,QAAI,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;AACnC,QACI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,EAAE,SAAS,CAAC;AAAG,YAAD,OAAO;AACvD,QACI,MAAM,YAAY,GAAG,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;AACzD;AAEE,QAAE,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;AACzC,YAAM,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;AACzC,SAAK;AACL,QAAI,MAAM,UAAU,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;AACtD,QACI,MAAM,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D;AAEE,QAAE,IAAI,OAAO,GAAG,CAAC,UAAU,KAAK,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,KAAK,GAAG,SAAS,IAAI,EAAE,CAAC,KAAK,GAAG,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC;AAC/F,QACI,UAAU,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC;AAChD,QACI,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;AAClC,QAAI,IAAI,EAAE,CAAC,MAAM,CAAC,SAAS,KAAK,UAAU,CAAC,SAAS,EAAE;AACtD,YAAM,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;AACnC,SAAK;AACL,QACI,IAAI,CAAC,SAAS,CAAC;AACnB,YAAM,SAAS,EAAE,WAAW,CAAC,QAAQ;AACrC,YAAM,IAAI,EAAE,YAAY;AACxB,YAAM,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;AACpD,YAAM,IAAI,EAAE,EAAE,MAAM,EAAE,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE,SAAS,EAAC;AACxD,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACU,QAAQ,CAAC,IAAI,EAAE,EAAE;AAC3B,QAAI,MAAM,SAAS,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC9C,QACI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,EAAE,SAAS,CAAC;AAAG,YAAD,OAAO;AACvD;AAEE,QAAE,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;AACzC,YAAM,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;AACzC,SAAK;AACL,QAAI,MAAM,UAAU,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;AACtD,QACI,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AACrD,QACI,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;AAC7C,QACI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;AAC5B,QAAI,IAAI,EAAE,CAAC,MAAM,CAAC,SAAS,KAAK,IAAI,CAAC,SAAS,EAAE;AAChD,YAAM,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;AACnC,SAAK;AACL,QACI,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AACzH,KAAG;AACH,IACE,QAAQ;AACV,QAAI,OAAO;AACX,YAAM,eAAe,EAAE,IAAI,CAAC,eAAe;AAC3C,YAAM,mBAAmB,EAAE,IAAI,CAAC,mBAAmB;AACnD,YAAM,aAAa,EAAE,IAAI,CAAC,aAAa;AACvC,YAAM,aAAa,EAAE,IAAI,CAAC,aAAa;AACvC,YAAM,aAAa,EAAE,IAAI,CAAC,aAAa;AACvC,SAAK,CAAC;AACN,KAAG;AACH,IACU,QAAQ,CAAC,KAAK;AACxB,QAAI,IAAI,CAAC,KAAK;AAAG,YAAD,OAAO;AACvB,QACI,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;AACxB,YAAM,eAAe,EAAE,KAAK,CAAC,eAAe,IAAI,EAAE;AAClD,YAAM,mBAAmB,EAAE,KAAK,CAAC,mBAAmB,IAAI,EAAE;AAC1D,YAAM,aAAa,EAAE,KAAK,CAAC,aAAa,IAAI,EAAE;AAC9C,YAAM,aAAa,EAAE,KAAK,CAAC,aAAa,IAAI,EAAE;AAC9C,YAAM,aAAa,EAAE,KAAK,CAAC,aAAa;AACxC,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACE,gBAAgB,CAAC,EAAE;AACrB,QAAI,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;AACvC,KAAG;AACH,IACE,WAAW,CAAC,IAAI,EAAE,EAAE,EAAE,SAAS,GAAG,SAAS;AAC7C,QAAI,MAAM,aAAa,GAAG,SAAS,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC/D;AAEE,QAAE,IAAI,IAAI,CAAC,MAAM,KAAK,EAAE,CAAC,MAAM,IAAI,SAAS,KAAK,EAAE,CAAC,KAAK,EAAE;AAC7D,YAAM,OAAO,KAAK,CAAC;AACnB,SAAK;AACL,QACI,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AAC3C,KAAG;AACH,IACE,sBAAsB;AACxB,QAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;AACrC,KAAG;AACH;AAEA,IAAU,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ;AACnD;AACI,QAAA,IAAI,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;AACnC,QACI,IAAI,IAAI,CAAC,QAAQ,EAAE;AACvB;AACM,YAAA,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK;AAClC,gBAAQ,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE;AAC9D,oBAAU,SAAS,GAAG,IAAI,CAAC;AAC3B,iBAAS;AACT,aAAO,CAAC,CAAC;AACT,SAAK;AACL;AAEE,QAAE,IAAI,CAAC,SAAS,EAAE;AACpB,YAAM,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;AAC1B,SAAK;AACL;AACI,QAAA,IAAI,QAAQ,IAAI,SAAS,EAAE;AAC/B,YAAM,IAAI,CAAC,aAAa,EAAE,CAAC;AAC3B,SAAK;AACL,QAAI,OAAO,SAAS,CAAC;AACrB,KAAG;AACH,IACU,uBAAuB,CAAC,SAAS,GAAG,IAAI;AAClD,QAAI,SAAS,GAAG,SAAS,IAAI,IAAI,CAAC,WAAW,CAAC;AAC9C,QACI,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;AACtD,YAAM,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,eAAe,EAAE,EAAC,CAAC,SAAS,CAAC,EAAE,GAAG,IAAI,EAAC,CAAC,CAAC;AAC7F,SAAK;AACL,QAAI,IAAI,SAAS,CAAC,QAAQ,EAAE;AAC5B,YAAM,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC,CAAC;AACjF,SAAK;AACL,KAAG;AACH,IACU,oBAAoB,CAAC,IAAI,EAAE,KAAK;AAC1C;AACI,QAAA,IAAI,CAAC,WAAW;AACpB,aAAO,MAAM,CAAC,CAAC,UAAU,KAAK,UAAU,KAAK,IAAI,CAAC;AAClD,aAAO,OAAO,CAAC,CAAC,UAAU;AAC1B,YAAQ,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;AAChF,YAAQ,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,cAAc,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;AACpF,SAAO,CAAC,CAAC;AACT,QACI,IAAI,KAAK,EAAE;AACf,YAAM,IAAI,CAAC,aAAa,GAAG,EAAC,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,EAAC,CAAC;AAC7C,SAAK;AACL,aAAS;AACT,YAAM,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;AAC9B,SAAK;AACL,KAAG;AACH,IACU,mBAAmB,CAAC,IAAI,EAAE,KAAK;AACzC,QAAI,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,aAAa,EAAE,EAAC,CAAC,IAAI,CAAC,EAAE,GAAG,KAAK,EAAC,CAAC,CAAC;AACnF,KAAG;AACH;;yGAAC;AArgBQ,qBAAW,GAAG,IAAI,CAAC,AAD1B;AAQYC;AAAgBA,IAA3BF,YAAU;GATZ,UAAU,bASK;AACM,wCADU;AAClBE;AAAgBA,IAA3BF,YAAU;AAAG;AACd,kDADmD;AACvCE;AAAgBA,IAA3BF,YAAU;AAAG;AAAyC,sDAAA;AAC3CE;AAAgBA,IAA3BF,YAAU;AAAG;AACZ,gDAD+C;AACrCE;AAAgBA,IAA3BF,YAAU;AAAG;AACZ,gDAD+C;AACrCE;AAAgBA,IAA3BF,YAAU;AAAG;AACJ,gDAD+B;AAC7BE;AAAgBA,IAA3BF,YAAU;AAAG,gCAAW,QAAQ;AACnC,8CADoC;AA2DxBE;AAAgBA,IAAzBH,UAAQ;AAAG;AACS;AAA2C,4CAC/D;AAESG;AAAgBA,IAAzBH,UAAQ;AAAG;AACO;AACV,8CAIR;AAESG;AAAgBA,IAAzBH,UAAQ;AAAG;AACS;AACR,4CAIZ;AAESG;AAAgBA,IAAzBH,UAAQ;AAAG;AACS;AACR,4CAIZ;AAESG;AAAgBA,IAAzBH,UAAQ;AAAG;AACG;AACd,kDAIA;AA4EOG;AAAgBA,IAAvBD,QAAM;AAAG;AAA4C;AACtD;AAC2B,wCAU1B;AAEOC;AACNA,IADDD,QAAM;AAAG;AAEA;AACa;AAEP,uCAkBf;AAGOC;AAAgBA,IAAvBD,QAAM;AAAG;AACU;AAGN;AACkB,+CAH/B;AAEOC;AAAgBA,IAAvBD,QAAM;AAAG;AACe;AAGP;AACqB,yCAHtC;AAEOC;AACVA,IADGD,QAAM;AAAG;AACkB;AAGX;AACkB,yCAHlC;AAEOC;AAAgBA,IAAvBD,QAAM;AAAG;AACe;AACH;AAA+C,8CAEpE;AAEOC;AAAgBA,IAAvBD,QAAM;AAAG;AACW;AACH;AAA+C,kDAEhE;AAEOC;AAAgBA,IAAvBD,QAAM;AAAG;AACc;AACH;AAA+C,+CAOnE;AAEOC;AAAgBA,IAAvBD,QAAM;AAAG;AACgB;AACH;AAErB,6CAMD;AAEOC;AAAgBA,IAAvBD,QAAM;AAAG;AACX;AAEE;AAE4B,8CAW5B;AAEOC;AAAgBA,IAAvBD,QAAM;AAAG;AACE;AAA0D;AAGtE,gDAKC;AAEOC;AAAgBA,IAAvBD,QAAM;AAAG;AACE;AAA0D;AAC1C,gDAC3B;AAEOC;AACTA,IADED,QAAM;AAAG;AACmB;AAGhB;AACoB,0CAHhC;AAEOC;AAAgBA,IAAvBD,QAAM;AAAG;AACiB;AAGlB;AACS,4CAHjB;AAEOC;AAAgBA,IAAvBD,QAAM;AAAG;AACM;AAA0D;AAG7C,4CAF5B;AAEOC;AAAgBA,IAAvBD,QAAM;AAAG;AACK;AAAkD;AAElE,iDACE;AAaOC;AAAgBA,IAAvBD,QAAM;AAAG;AACN;AAGiB;AAGI,4CAiBxB;AAEOC;AAAgBA,IAAvBD,QAAM;AAAG;AACiB;AACc;AAGtB,4CAFlB;AAEOC;AAAgBA,IAAvBD,QAAM;AAAG;AACY;AACU;AAEQ,yCA4BvC;AAEOC;AAAgBA,IAAvBD,QAAM;AAAG;AACY;AAEQ;AAEZ,yCAgBjB;AAYOC;AAAgBA,IAAvBD,QAAM;AAAG;AAGZ;AACuB;AACN,yCAKd;AACH;AAAC,MC/bY,kBAAkB;AAC/B,IAJA;AACE,QAGA,oBAAe,GAAQ,IAAI,CAAC;AAC9B,KAYC;AACD,IAZE,GAAG,CAAC,cAAmB;AACzB,QAAI,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;AAC1C,KAAG;AACH,IACE,GAAG;AAAM,QACP,OAAO,IAAI,CAAC,eAAe,CAAC;AAChC,KAAG;AACH,IACE,UAAU;AACZ,QAAI,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;AACxB,KAAG;AACH;6GAAC;AACD,yMAfK;AAAC;+CAHL,UAAU,SAAC,mBACV,rFAEK;GAFK,EAAE,MAAM,eACnB,1BAKD;AAQK;AAGmG;AAAwJ;AAAoE;AAAI;AAAmE;AAA+G;ACf1f,MAAM,QAAQ,GAAG,GAAG,CAAC;AACrB,MAAM,SAAS,GAAG,GAAG,CAAC;AACtB,MAEa,iBAAiB;AAC9B,IAeE,YAAoB,SAAoB;AAC1C,QADsB,cAAS,GAAT,SAAS,CAAW;AAAE,QAb9B,YAAO,GAAG,CAAC,CAAC;AAC1B,QAAc,MAAC,GAAG,CAAC,CAAC;AACpB,QAAc,mBAAc,GAAG,IAAI,CAAC;AACpC,QAAE,aAAQ,GAAG,IAAI,CAAC;AAClB,QAUI,SAAS,CAAC,aAAa,GAAG,IAAI,CAAC;AACnC,QAAI,IAAI,CAAC,QAAQ,GAAG,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;AACtD,KAAG;AACH,IAZY,IAAI,CAAC;AACjB,QAAI,OAAO,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;AACpC,KAAG;AACH,IACY,IAAI,WAAW;AAC3B,QAAI,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;AAC9E,KAAG;AACH,IAME,SAAS,CAAC,KAAK;AACjB,QAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AACpC,KAAG;AACH,IACE,IAAI;AACN,QAAI,MAAM,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC/C,QACI,EAAE,EAAE,CAAC;AACT,QAAI,IAAI,CAAC,QAAQ,GAAG;AACpB,YAAM,GAAG,IAAI,CAAC,QAAQ;AACtB,YAAM,QAAQ,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,EAAE,CAAC;AAC9C,YAAM,QAAQ,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,EAAE,CAAC;AACxD,YAAM,QAAQ,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,EAAE,CAAC;AACtD,SAAK,CAAC;AACN,QAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;AAC/D,KAAG;AACH,IACE,SAAS;AACX,QAAI,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,gBAAgB,CAAC;AACnD,KAAG;AACH,IACkB,WAAW,CAAC,KAAK;AACnC,QAAI,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;AACzB,KAAG;AACH,IACU,eAAe;AACzB,QAAI,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC,CAAC;AACpG,KAAG;AACH,IACU,iBAAiB,CAAC,KAAK,EAAE,QAAQ;AAC3C,QAAI,IAAI,QAAQ,GAAG,QAAQ,CAAC;AAC5B,QACI,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI;AACvB,YAAM,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC/B,YAAM,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AAC5D,SAAK,CAAC,CAAC;AACP,QAAI,OAAO,QAAQ,CAAC;AACpB,KAAG;AACH,IACU,qBAAqB,CAAC,IAAI,EAAE,QAAQ;AAC9C,QAAI,IAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,EAAE,GAAG,QAAQ,CAAC;AACnD,QACI,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE;AAC1C,YAAM,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;AACxE,SAAK;AACL,QAAI,IAAI,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACtC,QAAI,OAAO,QAAQ,CAAC;AACpB,KAAG;AACH,IAEE,KAAK;AACP,QAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AACtC,KAAG;AACH,IACU,WAAW,CAAC,QAAQ;AAC9B,QAAI,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;AACxB,YAAM,QAAQ;AACd,YAAM,CAAC,EAAE,QAAQ,CAAC,UAAU;AAC5B,YAAM,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;AACzD,YAAM,cAAc,EAAE,QAAQ,CAAC,qBAAqB,GAAG,QAAQ,CAAC,qBAAqB,EAAE,CAAC,MAAM,GAAG,CAAC;AAClG,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACU,cAAc,CAAC,IAAI,EAAE,KAAK,EAAE,cAAc,GAAG,IAAI;AAC3D,QAAI,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;AACtC,YAAM,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC;AAC3D,YAAM,MAAM,qBAAqB,GAAG,eAAe,CAAC,qBAAqB,EAAE,CAAC,MAAM,CAAC;AACnF,YAAM,MAAM,kBAAkB,GAAG,eAAe,CAAC,qBAAqB,EAAE,CAAC,GAAG,CAAC;AAC7E,YAAM,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,GAAG,kBAAkB,CAAC;AACrG,YACM,IAAI,KAAK;AACf,gBAAQ,OAAO,GAAG,eAAe,CAAC,SAAS;AAC3C,gBAAQ,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,GAAG,eAAe,CAAC,SAAS,GAAG,qBAAqB,EAAE;AAC5F,gBAAQ,eAAe,CAAC,SAAS,GAAG,cAAc;AAClD,oBAAU,OAAO,GAAG,qBAAqB,GAAG,CAAC;AAC7C,oBAAU,OAAO,CAAC;AAClB,aAAO;AACP,SAAK;AAAE,aAAI;AACX,YAAM,IAAI,KAAK;AACf,gBAAQ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;AAC9B,gBAAQ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,aAAa,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,cAAc,EAAE;AAC7E,gBAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE;AAC3B,oBAAU,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,cAAc;AAClD,wBAAU,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,GAAG,CAAC;AACjD,wBAAU,IAAI,CAAC,QAAQ,CAAC;AACxB,oBACU,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC;AAC5E,iBAAS;AACT,aAAO;AACP,SAAK;AACL,KAAG;AACH,IACE,gBAAgB,CAAC,KAAK;AACxB,QAAI,IAAI,CAAC,KAAK;AAAG,YAAD,OAAO,EAAE,CAAC;AAC1B,QACI,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAChE,QACI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;AAAG,YAAD,OAAO,YAAY,CAAC;AAC/C,QACI,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,YAAY,CAAC,MAAM;AAAG,YAAD,OAAO,EAAE,CAAC;AAChE;AAEE;AACI;AACI;AACI,QAAV,MAAM,eAAe,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AACrD,QAAI,IAAI,CAAC,eAAe,CAAC,MAAM,IAAI,eAAe,CAAC,QAAQ,KAAK,CAAC;AAAG,YAAD,OAAO,EAAE,CAAC;AAC7E;AAEE;AACI;AACI,QAAN,MAAM,UAAU,GAAG,YAAY,CAAC,YAAY,EAAE,CAAC,IAAI;AACvD,YAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,GAAG,QAAQ,GAAG,IAAI,CAAC,CAAC;AAC/C,iBAAc,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACpD,SAAK,CAAC,CAAC;AACP;AAEE;AACI,QAAF,MAAM,SAAS,GAAG,YAAY,CAAC,YAAY,EAAE,CAAC,IAAI;AACtD,YAAM,OAAO,IAAI,CAAC,QAAQ,GAAG,QAAQ,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC;AACrE,SAAK,EAAE,UAAU,CAAC,CAAC;AACnB,QACI,MAAM,aAAa,GAAG,EAAE,CAAC;AAC7B,QACI,KAAK,IAAI,CAAC,GAAG,UAAU,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC,EAAE,EAAE;AAClD,YAAM,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,SAAK;AACL,QACI,OAAO,aAAa,CAAC;AACzB,KAAG;AACH,IACE,SAAS;AACX,QAAI,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;AACrE,QACI,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;AAAG,YAAD,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;AACxC,QAAI,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI;AAAG,YAAD,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG,SAAS,CAAC,CAAC;AAC1D,KAAG;AACH;+CA/JC,UAAU;iIACT;AAAE;AAAoB;AAGlB,YAVG,SAAS;AAAI;AAURC;AACZA,IADCF,YAAU;AAAG;AAET,kDAFmB;AACZE;AACNA,IADLF,YAAU;AAAG;AACmB,4CADf;AACNE;AAAgBA,IAA3BF,YAAU;AAAG;AACG,yDADiB;AAGxBE;AACPA,IADFH,UAAQ;AAAG;AACmB;AAGF,0CAF5B;AAESG;AAAgBA,IAAzBH,UAAQ;AAAG;AACS;AAA2C,oDAC/D;AA4BOG;AAAgBA,IAAvBD,QAAM;AAAG;AACI;AAIf;AAA+C,oDAH7C;AAEOC;AAAgBA,IAAvBD,QAAM;AAAG;AACa;AAA4C;AAG9D,wDAFJ;AA2BOC;AAAgBA,IAAvBD,QAAM;AAAG;AACS;AAEM;AACgB,oDAGxC;AAEOC;AAAgBA,IAAvBD,QAAM;AAAG;AAA4C;AAEvC;AACd,uDAwBA;AAiDH,SAAS,YAAY,CAAC,KAAK,EAAE,SAAS,EAAE,UAAU,GAAG,CAAC;AACtD,IAAE,IAAI,KAAK,GAAG,UAAU,CAAC;AACzB,IAAE,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;AACjC,IACE,OAAO,KAAK,KAAK,OAAO,EAAE;AAC5B,QAAI,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,OAAO,IAAI,CAAC,CAAC,CAAC;AACrD,QACI,IAAI,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE;AACpC,YAAM,OAAO,GAAG,QAAQ,CAAC;AACzB,SAAK;AACL,aAAS;AACT,YAAM,IAAI,KAAK,KAAK,QAAQ;AAAG,gBAAD,KAAK,GAAG,OAAO,CAAC;AAC9C;AAAkB,gBAAP,KAAK,GAAG,QAAQ,CAAC;AAC5B,SAAK;AACL,KAAG;AACH,IAAE,OAAO,KAAK,CAAC;AACf;AAAE;AACF,MC5Ka,gBAAgB;AAC7B;8CAZC,SAAS,SAAC,mBACT,aAAa,EAAE;WAAiB,CAAC,IAAI,mBACrC,QAAQ,EAAE,wBAAwB,mBAClC,QAAQ,EAAE,0LAMT,eACF;;;;;;;mFACI;AAAE;AACI,uBAAR,KAAK;AAAM,mBACX,KAAK;AAAK;AAAG;AAAC,MCMJ,qBAAqB;AAAI,IAOpC,YACU,UAAsB,EACvB,aAAgC;AACxC,QAFS,eAAU,GAAV,UAAU,CAAY;AAAE,QACzB,kBAAa,GAAb,aAAa,CAAmB;AAC3C,QATE,gBAAW,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC9B,YAAI,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;AAClE,SAAG,EAAE,EAAE,CAAC,CAAC;AACT,QAOI,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC1D,KAAG;AACH,IACE,QAAQ;AACV,QAAI,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;AAC9B,KAAG;AACH,IACE,eAAe;AACjB,QAAI,UAAU,CAAC;AACf,YAAM,IAAI,CAAC,WAAW,EAAE,CAAC;AACzB,YAAM,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC;AAC3E,SAAK,CAAC,CAAC;AACP,QAAI,IAAI,EAAE,GAAgB,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;AACxD,QAAI,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;AAC3D,KAAG;AACH,IACE,WAAW;AACb,QAAI,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;AAC/B,QAAI,IAAI,EAAE,GAAgB,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;AACxD,QAAI,EAAE,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;AAC9D,KAAG;AACH,IACE,cAAc;AAChB,QAAI,QACE,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE;AACrC,YAAQ,IAAI,CAAC,aAAa,CAAC,WAAW,GAAG,IAAI;AAC7C,YAAM,MAAM,EACN;AACN,KAAG;AACH,IACU,QAAQ,CAAC,IAAI,EAAE,SAAS;AAClC,QAAI,IAAI,QAAQ,GAAG,CAAC,CAAC;AACrB,QAAI,OAAO;AACX,YAAM,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AAC3B,YAAM,IAAI,GAAG,GAAG,QAAQ,IAAI,SAAS,EAAE;AACvC,gBAAQ,IAAI,EAAE,CAAC;AACf,gBAAQ,QAAQ,GAAG,GAAG,CAAC;AACvB,aAAO;AACP,SAAK,CAAC;AACN,KAAG;AACH;mDA/DC,SAAS,SAAC,mBACT,QAAQ,EAAE,eAAe,mBAEzB,SAAS,EAAE,CAAC,iBAAiB,CAAC,mBAC9B,QAAQ,EAAE;uKAMT,eACF;;;;;uEACI;AAAE;AAAoB;AAAgD,YApBzE,UAAU;AACV,YAIO,iBAAiB;AAAI;AAAG;AAAC,MC+BrB,aAAa;AAAI,IA2C5B,YACS,SAAoB,EACpB,kBAAsC;AACjD,QAFW,cAAS,GAAT,SAAS,CAAW;AAAE,QACtB,uBAAkB,GAAlB,kBAAkB,CAAoB;AAAE,QAE/C,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,YAAY,EAAE,CAAC,CAAC;AAC5E,QAAI,SAAS,CAAC,gBAAgB,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AACxE,KAAG;AACH;AACqC,IAxCnC,IAAa,KAAK,CAAC,KAAY;AACjC,KAAG;AAAE;AAED,IAAF,IAAa,OAAO,CAAC,OAAqB;AAC5C,KAAG;AAAE;AAED,IAAF,IAAa,OAAO,CAAC,KAAc;AACrC,QAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACnC,KAAG;AACH,IACE,IAAa,KAAK,CAAC,KAAK;AAC1B,QAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACnC,KAAG;AACH,IA4BE,SAAS,CAAC,MAAM;AAClB,QAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS;AAAG,YAAD,OAAO;AAC1C,QAAI,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;AAAG,YAAD,OAAO;AAC7F,QACI,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC;AACxD,QACI,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;AACzD,KAAG;AACH,IAEE,WAAW,CAAC,MAAM;AACpB,QAAI,SAAS,cAAc,CAAC,YAAqB,EAAE,QAAgB;AACnE,YAAM,OAAO,CAAC,YAAY,GAAG,IAAI,GAAG,YAAY,CAAC,SAAS,KAAK,QAAQ,GAAG,KAAK,GAAG,cAAc,CAAC,YAAY,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;AACvI,SAAK;AACL,QACI,IAAI,cAAc,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,EAAE;AACpD,YAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACrC,SAAK;AACL,KAAG;AACH,IACE,WAAW,CAAC,OAAO;AACrB,QAAI,IAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE;AAC1C,YAAM,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;AAC7B,gBAAQ,OAAO,EAAE,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,YAAY;AAChE,gBAAQ,KAAK,EAAE,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,YAAY;AAC1D,gBAAQ,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;AAC1D,aAAO,CAAC,CAAC;AACT,SAAK;AACL,KAAG;AACH,IACE,WAAW;AACb,QAAI,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;AACzC,KAAG;AACH,IACU,IAAI,CAAC,MAAM,EAAE,IAAI;AAC3B,QAAI,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG;AAChC,YAAM,IAAI,MAAM,IAAI,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;AAChD,gBAAQ,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AAC/B,aAAO;AACP,YAAM,OAAO,GAAG,CAAC;AACjB,SAAK,EAAE,EAAE,CAAC,CAAC;AACX,KAAG;AACH;2CA7HC,SAAS,SAAC,mBACT,QAAQ,EAAE,iBAAiB,mBAC3B,SAAS,EAAE,CAAC,SAAS,CAAC,mBAEtB,QAAQ;CAAE;;;;;;;;;;;;;;;sFAyBT;KACF;;;;;;;;;;;;;;wJACI;AAAE;AAAoB;AACX,YAtCP,SAAS;AAAK,YACd,kBAAkB;AAAI;AAAI;AAAkC,8BAwClE,YAAY,SAAC,iBAAiB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;AAAQ,+BACzD,YAAY,SAAC,kBAAkB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;AAAQ,sCAC1D,YAAY,SAAC,yBAAyB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;AAAQ,mCACjE,YAAY,SAAC,sBAAsB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;AAAQ,gCAC9D,SAAS,SAAC,UAAU,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;AAAQ,oBAG/C,KAAK;AAAM,sBAGX,KAAK;AAAM,sBAGX,KAAK;AAAM,oBAIX,KAAK;AAAM,6BAIX,MAAM;AAAM,uBACZ,MAAM;AAAM,yBACZ,MAAM;AAAM,2BACZ,MAAM;AAAM,6BACZ,MAAM;AAAM,qBACZ,MAAM;AAAM,uBACZ,MAAM;AAAM,oBACZ,MAAM;AAAM,mBACZ,MAAM;AAAM,yBACZ,MAAM;AAAM,0BACZ,MAAM;AAAM,uBACZ,MAAM;AAAM,uBACZ,MAAM;AAAM,+BACZ,MAAM;AAAM,2BACZ,MAAM;AAAM,oBACZ,MAAM;AAAM,0BACZ,MAAM;AAAM,wBAUZ,YAAY,SAAC,eAAe,EAAE,CAAC,QAAQ,CAAC;AACtC,0BASF,YAAY,SAAC,iBAAiB,EAAE,CAAC,QAAQ,CAAC;AACzC;AAAG;AAAC,MC3CK,iBAAiB;AAC9B;+CAnDC,SAAS,SAAC,mBACT,QAAQ,EAAE;QAAqB,mBAC/B,aAAa,EAAE,iBAAiB,CAAC,IAAI,mBAErC,QAAQ,EAAE;;;;4MA8CP;AAAE;AACI,mBAAR,KAAK;AAAM,oBACX,KAAK;AAAM,wBACX,KAAK;AAAK;AAAG;AAAC,MC/CJ,eAAe;AAC5B;6CAXC,SAAS,SAAC,mBACT,QAAQ,EAAE;mKDmDT,eACF,xKCpD8B,mBAC7B,aAAa,EAAE,iBAAiB,CAAC,IAAI,mBACrC,QAAQ,EAAE,mNAKM,eACjB;;;;;;;mFACI;AAAE;AACI,mBAAR,KAAK;AAAM,oBACX,KAAK;AAAM,uBACX,KAAK;AAAK;AAAG;AAAC,MCAJ,gBAAgB;AAC7B,IAGE,MAAM,CAAC,MAAM;AACf,QAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,EAAE;AAChD,YAAM,IAAI,EAAE,MAAM,CAAC,OAAO;AAC1B,YAAM,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,EAAE;AACtD,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACE,SAAS,CAAC,OAAO,EAAE,MAAM;AAC3B,QAAI,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,CAAC,CAAC;AACtG,KAAG;AACH;8CA3BC,SAAS,SAAC,mBACT,QAAQ,EAAE;4BAAuC,mBACjD,aAAa,EAAE,iBAAiB,CAAC,IAAI,mBAErC,QAAQ,EAAE,iLAOT,eACF;;;;;;wFACI;AAAE;AACI,mBAAR,KAAK;AAAM,wBACX,KAAK;AAAK;AAAG;AAAC,MCKJ,yBAAyB;AACtC;uDArBC,SAAS,SAAC,mBACT,QAAQ,EAAE,oBAAoB;UAC9B,aAAa,EAAE,iBAAiB,CAAC,IAAI,mBAErC,QAAQ,EAAE;mBAcT,eACF;;;oFACI;AAAE;AACI,mBAAR,KAAK;AAAK;AAAG;AAAC,MCaJ,yBAAyB;AACtC;uDAnCC,SAAS,SAAC,mBACT,QAAQ,EAAE,oBAAoB;UAC9B,aAAa,EAAE,iBAAiB,CAAC,IAAI,mBAErC,QAAQ,EAAE;;;;4GA4BT,eACF,0DACI;AAAE;AACI,mBAAR,KAAK;AAAM,wBACX,KAAK;AAAK;AAAG;ACnChB;AACA,SAAgB,cAAc,CAAC,GAAG,IAAI;AACtC,IAAE,OAAQE,QAAkB,CAAC,GAAG,IAAI,CAAC,CAAC;AACtC,CAAC;AACD,MAAa,MAAM,GAAsB,MAAM,CAAC,MAAM,CACpD,cAAc,EACdA,QAAU,EACH;AAET,SAAS,gBAAgB,CAAC,GAAG,IAAI;AACjC,IAAE,OAAQC,UAAoB,CAAC,GAAG,IAAI,CAAC,CAAC;AACxC,CAAC;AACD,MAAa,QAAQ,GAAwB,MAAM,CAAC,MAAM,CACxD,gBAAgB,EAChBA,UAAY,EACL;AAET,SAAS,kBAAkB,CAAC,GAAG,IAAI;AACnC,IAAE,OAAQC,YAAsB,CAAC,GAAG,IAAI,CAAC,CAAC;AAC1C,CAAC;AACD,MACa,UAAU,GAA0B,MAAM,CAAC,MAAM,CAC5D,kBAAkB,EAClBA,YAAc;AACf;AAAC;AACiF;AAAmI;AAAqI;AAAwJ;AAAoE;AAAI;AAAmE;AAA+G;AAAI,MCCpuB,2BAA2B;AAAI,IAjB5C;AACG,QA8CD,aAAQ,GAAG,EAAE,CAAC;AAChB,KAoCC;AACD,IAnEE,IACI,KAAK;AACX,QAAI,OAAO,IAAI,CAAC,MAAM,CAAC;AACvB,KAAG;AACH,IAAE,IAAI,KAAK,CAAC,KAAK;AACjB,QAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACzB,KAAG;AACH,IASY,IAAI,SAAS;AAAM,QAC3B,MAAM,SAAS,GACb,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;AAC/E,QAAI,MAAM,gBAAgB,GACpB,SAAS,IAAI,SAAS,CAAC,MAAM;AACnC,cAAU,SAAS,CAAC,QAAQ;AAC5B,gBAAU,SAAS,CAAC,MAAM,CAAC,QAAQ;AACnC,gBAAU,SAAS,CAAC,MAAM,CAAC,aAAa,EAAE;AAC1C,cAAU,CAAC,CAAC;AACZ,QACI,OAAO,GAAG,gBAAgB,IAAI,CAAC;AACnC,KAAG;AACH,IAGU,QAAQ,CAAC,KAAK;AACxB,QAAI,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AACxB,KAAG;AACH,IACE,QAAQ;AACV,QAAI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;AACtD,QAAI,IAAI,CAAC,QAAQ,GAAG;AACpB;AACM,YAAA,QAAQ,CACN;AACR,gBAAU,OAAO,IAAI,CAAC,aAAa;AACnC,qBAAa,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC;AACzC,qBAAa,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;AAC/B,aAAS,EACD,WAAW;AACnB,gBAAU,IAAI,CAAC,aAAa,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACnE,aAAS,EACD,EAAE,iBAAiB,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAS,CAC1D;AACP,YAAM,QAAQ,CACN,MAAM,IAAI,CAAC,KAAK,EAChB,KAAK;AACb,gBAAU,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;AAC1E,aAAS,CACF;AACP,SAAK,CAAC;AACN,KAAG;AACH,IACE,WAAW;AACb,QAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACpC,KAAG;AACH,IACE,SAAS,CAAC,KAAK,EAAE,IAAI;AACvB,QAAI,OAAO,IAAI,CAAC,EAAE,CAAC;AACnB,KAAG;AACH;yDApFC,SAAS,SAAC,mBACT,QAAQ,EAAE,sBAAsB;QAChC,aAAa,EAAE,iBAAiB,CAAC,IAAI,mBACrC,QAAQ,EAAE,0WAYT,eACF;;;;0GACI;AAAE;AAAgD,oBACpD,KAAK;AACN,wBAOC,KAAK;AAAM,wBAIX,KAAK;AAAK;AAFCH;AACPA,IADJ,UAAU;AAAG;AACkB,2DADb;AAIPA;AAAgBA,IAA3B,UAAU;AAAG;AAEJ,kEAF4B;AAE5BA;AAAgBA,IAAzB,QAAQ;AAAG;AACG;AACoB,4DASlC;AAIOA;AAAgBA,IAAvB,MAAM;AAAG;AAEX;AAG2B;AACT,2DAJhB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAC;AACJ;AAAC,MC1BY,wBAAwB;AACrC;sDArCC,SAAS,SAAC,mBACT,QAAQ,EAAE,mBAAmB;WAC7B,aAAa,EAAE,iBAAiB,CAAC,IAAI,mBAErC,QAAQ,EAAE;;;;;;;wNAgCT;AAAE;AAEE,mBAAJ,KAAK;AAAM,oBACX,KAAK;AAAM,wBACX,KAAK;AAAK;;;;;CAPV,eACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMc;AAAC;AAAC,MCxBJ,yBAAyB;AACtC;uDAjBC,SAAS,SAAC,mBACT,QAAQ,EAAE,oBAAoB;UAC9B,aAAa,EAAE,iBAAiB,CAAC,IAAI,mBAErC,QAAQ,EAAE;SAUT,eACF;;;uEACI;AAAE;AACI,mBAAR,KAAK;AAAK;;;;;;;;;;;;;;;;;;;;oBAAE;AAAC;ACNhB,MAAM,eAAe,GAAG,kBAAkB,CAAC;AAC3C,MAAM,mBAAmB,GAAG,2BAA2B,CAAC;AACxD,MAIa,iBAAiB;AAAI,IAuBhC,YAAoB,EAAc,EAAU,QAAmB,EAAU,kBAAsC,EAAU,MAAc;AACzI,QADsB,OAAE,GAAF,EAAE,CAAY;AAAE,QAAQ,aAAQ,GAAR,QAAQ,CAAW;AAAE,QAAQ,uBAAkB,GAAlB,kBAAkB,CAAoB;AAAE,QAAQ,WAAM,GAAN,MAAM,CAAQ;AAAE,QAtBhI,yBAAoB,GAAG,IAAI,CAAC;AACvC,QAAsB,mBAAc,GAAG,IAAI,YAAY,EAAE,CAAC;AAC1D,QAA8B,uBAAkB,GAAG,IAAI,YAAY,EAAE,CAAC;AACtE,QAA+B,wBAAmB,GAAG,IAAI,YAAY,EAAE,CAAC;AACxE,QAA+B,wBAAmB,GAAG,IAAI,YAAY,EAAE,CAAC;AACxE,QAIU,eAAU,GAAG,CAAC,OAAO,EAAE,MAAM,KAAK,IAAI,CAAC;AACjD,QAaI,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC3D,QAAI,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC7D,QAAI,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC7D,KAAG;AACH,IAhBE,IAAa,aAAa,CAAC,SAAS;AACtC,QAAI,IAAI,SAAS,YAAY,QAAQ,EAAE;AACvC,YAAM,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;AAClC,SAAK;AACL;AAAc,YAAL,IAAI,CAAC,UAAU,GAAG,CAAC,OAAO,EAAE,MAAM,KAAK,SAAS,CAAC;AAC1D,KAAG;AACH,IACE,SAAS,CAAC,MAAM;AAClB,QAAI,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;AAClE,KAAG;AACH,IAOE,eAAe;AACjB,QAAI,IAAI,EAAE,GAAgB,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC;AAChD,QAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;AAClC,YAAM,EAAE,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;AACjE,YAAM,EAAE,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;AACnE,YAAM,EAAE,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;AACnE,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACE,WAAW;AACb,QAAI,IAAI,EAAE,GAAgB,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC;AAChD,QAAI,EAAE,CAAC,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;AAClE,QAAI,EAAE,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;AACpE,QAAI,EAAE,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;AACpE,KAAG;AACH,IACE,UAAU,CAAC,MAAM;AACnB,QAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;AACjC,YAAM,IAAI,IAAI,CAAC,oBAAoB,EAAE;AACrC,gBAAQ,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC;AACvC,aAAO;AACP,YAAM,OAAO;AACb,SAAK;AACL,QACI,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,EAAC,CAAC,CAAC;AAC1F,QACI,MAAM,CAAC,cAAc,EAAE,CAAC;AAC5B,QAAI,IAAI,IAAI,CAAC,oBAAoB,EAAE;AACnC,YAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;AACtB,SAAK;AACL,KAAG;AACH,IACE,WAAW,CAAC,MAAM;AACpB,QAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;AAAG,YAAD,OAAO;AACxC,QACI,MAAM,CAAC,cAAc,EAAE,CAAC;AAC5B,QAAI,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,EAAC,CAAC,CAAC;AAC3F,KAAG;AACH,IACE,WAAW,CAAC,MAAM;AACpB,QAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;AACjC,YAAM,IAAI,IAAI,CAAC,oBAAoB,EAAE;AACrC,gBAAQ,OAAO,IAAI,CAAC,mBAAmB,EAAE,CAAC;AAC1C,aAAO;AACP,YAAM,OAAO;AACb,SAAK;AACL,QAAI,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,EAAC,CAAC,CAAC;AAC3F,QACI,IAAI,IAAI,CAAC,oBAAoB,EAAE;AACnC,YAAM,IAAI,CAAC,WAAW,EAAE,CAAC;AACzB,SAAK;AACL,KAAG;AACH,IACoC,MAAM,CAAC,MAAM;AACjD,QAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;AAAG,YAAD,OAAO;AACxC,QACI,MAAM,CAAC,cAAc,EAAE,CAAC;AAC5B,QAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,EAAC,CAAC,CAAC;AACtF,QACI,IAAI,IAAI,CAAC,oBAAoB,EAAE;AACnC,YAAM,IAAI,CAAC,WAAW,EAAE,CAAC;AACzB,SAAK;AACL,QAAI,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACtC,KAAG;AACH,IACU,QAAQ;AAClB,QAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC;AACnE,KAAG;AACH,IACU,WAAW;AACrB,QAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC;AACtE,KAAG;AACH,IACU,gBAAgB;AAC1B,QAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,mBAAmB,CAAC,CAAC;AACvE,KAAG;AACH,IACU,mBAAmB;AAC7B,QAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,mBAAmB,CAAC,CAAC;AAC1E,KAAG;AACH;+CAhHC,SAAS,SAAC,mBACT,QAAQ,EAAE,YAAY,eACvB;;;0QACI;AAAE;AAAoB;AAC1B,YAlBC,UAAU;AACV,YAMA,SAAS;AACR,YACM,kBAAkB;AAAK,YAL9B,MAAM;AACP;AAAI;AAGA,mCAUF,KAAK;AAAM,6BACX,MAAM,SAAC,UAAU;AAAQ,iCACzB,MAAM,SAAC,kBAAkB;AAAQ,kCACjC,MAAM,SAAC,mBAAmB;AAAQ,kCAClC,MAAM,SAAC,mBAAmB;AAAQ,4BAOlC,KAAK;AAAM,qBAsEX,YAAY,SAAC,MAAM,EAAE,CAAC,QAAQ,CAAC;AAAO;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAC;ACnG5C,MAAMI,iBAAe,GAAG,kBAAkB,CAAC;AAC3C,MAIa,iBAAiB;AAAI,IAKhC,YAAoB,EAAc,EAAU,QAAmB,EAAU,kBAAsC,EAAU,MAAc;AACzI,QADsB,OAAE,GAAF,EAAE,CAAY;AAAE,QAAQ,aAAQ,GAAR,QAAQ,CAAW;AAAE,QAAQ,uBAAkB,GAAlB,kBAAkB,CAAoB;AAAE,QAAQ,WAAM,GAAN,MAAM,CAAQ;AAAE,QACvI,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACnD,KAAG;AACH,IACE,eAAe;AACjB,QAAI,IAAI,EAAE,GAAgB,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC;AAChD,QAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;AAClC,YAAM,EAAE,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;AACzD,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACE,SAAS;AACX,QAAI,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,WAAW,EAAE,IAAI,CAAC,eAAe,GAAG,MAAM,GAAG,OAAO,CAAC,CAAC;AAC5G,KAAG;AACH,IACE,WAAW;AACb,QAAI,IAAI,EAAE,GAAgB,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC;AAChD,QAAI,EAAE,CAAC,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;AAC1D,KAAG;AACH,IACyC,WAAW,CAAC,EAAE;AACvD;AACI,QAAA,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AAClD,QAAI,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AACrD,QAAI,IAAI,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE;AACzC,YAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;AACvD,SAAK;AACL,KAAG;AACH,IACE,MAAM,CAAC,EAAE;AACX,QAAI,IAAI,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE;AACzC,YAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AAClD,SAAK;AACL,KAAG;AACH,IAC2B,SAAS;AACpC,QAAI,IAAI,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE;AACzC,YAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;AACjD,SAAK;AACL,QAAI,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACtC,KAAG;AACH;+CAjDC,SAAS,SAAC,mBACT,QAAQ,EAAE,YAAY,eACvB;;;2GACI;AAAE;AAAoB;AAA4C,YAR3B,UAAU;AAAK,YAAqC,SAAS;AAAK,YACrG,kBAAkB;AAAK,YAD6C,MAAM;AAAI;AAAI;AAAsC,6BAS9H,KAAK,SAAC,UAAU;AAAQ,8BACxB,KAAK;AAAM,0BAuBX,YAAY,SAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;AAAQ,wBAe5C,YAAY,SAAC,SAAS;AAAO;;;;;;;;;;;;;;;;;oBAAE;AAAC;AC9CnC,MAAM,iBAAiB,GAAG,KAAK,CAAC;AAChC,MAIa,wBAAwB;AACrC,IAqBE,YACU,QAAmB,EACnB,WAA6B,EAC7B,gBAAkC;AAC9C,QAHY,aAAQ,GAAR,QAAQ,CAAW;AAAE,QACrB,gBAAW,GAAX,WAAW,CAAkB;AAAE,QAC/B,qBAAgB,GAAhB,gBAAgB,CAAkB;AAAE,KAC7C;AACH,IApBE,IACI,MAAM,CAAC,KAAc;AAC3B,QAAI,IAAI,KAAK,EAAE;AACf,YAAM,IAAI,CAAC,KAAK,EAAE,CAAC;AACnB,YAAM,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,OAAO,KAAK,KAAK,EAAE;AACpD,gBAAQ,IAAI,CAAC,YAAY,EAAE,CAAC;AAC5B,aAAO;AACP,SAAK;AAAE,aAAI;AACX,YAAM,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;AAC3D,SAAK;AACL,QAAI,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC;AAC3B,KAAG;AAAE;AAED,IAQM,KAAK;AACf,QAAI,IAAI,IAAI,CAAC,YAAY;AAAG,YAAD,OAAO;AAClC;AAEE,QAAE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;AAChG,KAAG;AACH,IACU,KAAK;AACf,QAAI,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;AAClC,QAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;AAC7B,KAAG;AACH,IACU,YAAY;AACtB,QAAI,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC;AAClC,QAAI,IAAI,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC;AACxC,QAAI,IAAI,SAAS,GAAG,CAAC,CAAC;AACtB;AAEE,QAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;AACjE;AAEE,QAAE,UAAU,CAAC;AAAS,YAClB,MAAM,CAAC,GAAG,WAAW,CAAC;AAC5B,gBAAQ,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,YAAY;AAAG,oBAAD,OAAO,aAAa,CAAC,CAAC,CAAC,CAAC;AACzE,gBACQ,SAAS,IAAI,KAAK,CAAC;AAC3B,gBAAQ,MAAM,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AACvD,gBACQ,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,YAAY,EAAE,GAAG,gBAAgB,IAAI,CAAC,CAAC;AACzF,gBAAQ,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,qBAAqB,GAAG,IAAI,CAAC,YAAY,CAAC,qBAAqB,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC;AACtH,gBACQ,KAAK,IAAI,IAAI,CAAC;AACtB,gBAAQ,IAAI,IAAI,iBAAiB,CAAC;AAClC,gBAAQ,IAAI,MAAM,GAAG,gBAAgB,EAAE;AACvC;AACU,oBAAA,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;AACxE,oBAAU,aAAa,CAAC,CAAC,CAAC,CAAC;AAC3B,iBAAS;AACT,aAAO,EAAE,EAAE,CAAC,CAAC;AACb,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACU,aAAa;AACvB,QAAI,IAAI,CAAC,IAAI,CAAC,YAAY;AAAG,YAAD,OAAO;AACnC,QACI,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC;AAClC,QAAI,IAAI,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC;AACxC,QAAI,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,qBAAqB,EAAE,CAAC,MAAM,CAAC;AAClE;AAEE,QAAE,MAAM,CAAC,GAAG,WAAW,CAAC;AAC1B,YAAM,IAAI,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,YAAY;AAAG,gBAAD,OAAO,aAAa,CAAC,CAAC,CAAC,CAAC;AACtE,YACM,MAAM,IAAI,KAAK,CAAC;AACtB,YAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,YAAY,EAAE,GAAG,MAAM,IAAI,CAAC,CAAC;AAC7E,YAAM,KAAK,IAAI,IAAI,CAAC;AACpB,YAAM,IAAI,IAAI,iBAAiB,CAAC;AAChC,YACM,IAAI,MAAM,IAAI,CAAC,EAAE;AACvB;AACQ,gBAAA,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;AACtC,gBAAQ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;AACjC,gBAAQ,aAAa,CAAC,CAAC,CAAC,CAAC;AACzB,aAAO;AACP,SAAK,EAAE,EAAE,CAAC,CAAC;AACX,KAAG;AACH;sDAjGC,SAAS,SAAC,mBACT,QAAQ,EAAE,mBAAmB,eAC9B;iYACI;AAAE;AAAoB;AAGrB,YAVqB,SAAS;AAAK,YAAH,WAAW;AAAK,YAAH,gBAAgB;AAAI;AAAI;AAElD,2BAQtB,KAAK,SAAC,sBAAsB;AAAQ,kCACpC,KAAK,SAAC,6BAA6B;AAAQ,wBAC3C,KAAK,SAAC,wBAAwB;AAAQ,qBAEtC,KAAK,SAAC,iBAAiB;AACtB;;;;;;;;;;;;;;;;;;oBAAE;AAAC;AAAC,MC0DK,UAAU;AAAI;wCAtC1B,QAAQ,SAAC,mBACR;EAAY,EAAE,uBACZ,aAAa,uBACb;CAAiB,uBACjB,eAAe,uBACf,gBAAgB;eAChB,iBAAiB,uBACjB,iBAAiB,uBACjB;cAAyB;aACzB;qBAAyB;YACzB,gBAAgB;gBAChB;IAA2B,uBAC3B;WAAqB,uBACrB;oBAAwB;IACxB,yBAAyB;aACzB,wBAAwB;aACxB,wBAAwB;SACzB,mBACD,OAAO,EAAE;sBACP,aAAa;SACb,iBAAiB;MACjB,eAAe,uBACf;cAAgB,uBAChB;OAAiB,uBACjB;CAAiB,uBACjB;IAAyB;QACzB;MAAyB,uBACzB;UAAgB,uBAChB;qBAA2B;OAC3B,qBAAqB;aACrB,wBAAwB;qBACxB;OAAyB,uBACzB;OAAwB,uBACxB;OAAwB,mBACzB;OACD,OAAO,EAAE,CAAC,YAAY,CAAC;AACvB,SAAS,EAAE,EAAE,eACd;;;;;;;;;;84BACI;AAAC;ACzEN;AACA;AACA;AAAI;ACFJ;AACC;AACC;AAED;AAAC;AAGmX","sourcesContent":["import {\r\n  Directive,\r\n  ViewContainerRef,\r\n  TemplateRef,\r\n  OnInit,\r\n  OnDestroy,\r\n  Input,\r\n  EmbeddedViewRef\r\n} from '@angular/core';\r\nimport { autorun } from 'mobx';\r\n\r\n@Directive({ selector: '[treeMobxAutorun]' })\r\nexport class TreeMobxAutorunDirective implements OnInit, OnDestroy {\r\n  protected templateBindings = {};\r\n  protected dispose: any;\r\n  protected view: EmbeddedViewRef<any>;\r\n  @Input() treeMobxAutorun;\r\n\r\n  constructor(\r\n    protected templateRef: TemplateRef<any>,\r\n    protected viewContainer: ViewContainerRef\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.view = this.viewContainer.createEmbeddedView(this.templateRef);\r\n\r\n    if (this.dispose) {\r\n      this.dispose();\r\n    }\r\n\r\n    if (this.shouldDetach()) {\r\n      this.view.detach();\r\n    }\r\n    this.autoDetect(this.view);\r\n  }\r\n\r\n  shouldDetach() {\r\n    return this.treeMobxAutorun && this.treeMobxAutorun.detach;\r\n  }\r\n\r\n  autoDetect(view: EmbeddedViewRef<any>) {\r\n    this.dispose = autorun(() => view.detectChanges());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.dispose) {\r\n      this.dispose();\r\n    }\r\n  }\r\n}\r\n","export const KEYS = {\r\n  LEFT: 37,\r\n  UP: 38,\r\n  RIGHT: 39,\r\n  DOWN: 40,\r\n  ENTER: 13,\r\n  SPACE: 32,\r\n  CONTEXT_MENU: 32\r\n};\r\n","import { TreeNode } from './tree-node.model';\r\nimport { TreeModel } from './tree.model';\r\nimport { KEYS } from '../constants/keys';\r\nimport { ITreeOptions } from '../defs/api';\r\n\r\nexport interface IActionHandler {\r\n  (tree: TreeModel, node: TreeNode, $event: any, ...rest);\r\n}\r\n\r\nexport const TREE_ACTIONS = {\r\n  TOGGLE_ACTIVE: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleActivated(),\r\n  TOGGLE_ACTIVE_MULTI: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleActivated(true),\r\n  TOGGLE_SELECTED: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleSelected(),\r\n  ACTIVATE: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsActive(true),\r\n  DEACTIVATE: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsActive(false),\r\n  SELECT: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsSelected(true),\r\n  DESELECT: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsSelected(false),\r\n  FOCUS: (tree: TreeModel, node: TreeNode, $event: any) => node.focus(),\r\n  TOGGLE_EXPANDED: (tree: TreeModel, node: TreeNode, $event: any) => node.hasChildren && node.toggleExpanded(),\r\n  EXPAND: (tree: TreeModel, node: TreeNode, $event: any) => node.expand(),\r\n  COLLAPSE: (tree: TreeModel, node: TreeNode, $event: any) => node.collapse(),\r\n  DRILL_DOWN: (tree: TreeModel, node: TreeNode, $event: any) => tree.focusDrillDown(),\r\n  DRILL_UP: (tree: TreeModel, node: TreeNode, $event: any) => tree.focusDrillUp(),\r\n  NEXT_NODE: (tree: TreeModel, node: TreeNode, $event: any) =>  tree.focusNextNode(),\r\n  PREVIOUS_NODE: (tree: TreeModel, node: TreeNode, $event: any) =>  tree.focusPreviousNode(),\r\n  MOVE_NODE: (tree: TreeModel, node: TreeNode, $event: any, {from , to}: {from: any, to: any}) => {\r\n    // default action assumes from = node, to = {parent, index}\r\n    if ($event.ctrlKey) {\r\n      tree.copyNode(from, to);\r\n    } else {\r\n      tree.moveNode(from, to);\r\n    }\r\n  }\r\n};\r\n\r\nconst defaultActionMapping: IActionMapping = {\r\n  mouse: {\r\n    click: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n    dblClick: null,\r\n    contextMenu: null,\r\n    expanderClick: TREE_ACTIONS.TOGGLE_EXPANDED,\r\n    checkboxClick: TREE_ACTIONS.TOGGLE_SELECTED,\r\n    drop: TREE_ACTIONS.MOVE_NODE\r\n  },\r\n  keys: {\r\n    [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,\r\n    [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,\r\n    [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,\r\n    [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,\r\n    [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n    [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE\r\n  }\r\n};\r\n\r\nexport interface IActionMapping {\r\n  mouse?: {\r\n    click?: IActionHandler,\r\n    dblClick?: IActionHandler,\r\n    contextMenu?: IActionHandler,\r\n    expanderClick?: IActionHandler,\r\n    checkboxClick?: IActionHandler,\r\n    dragStart?: IActionHandler,\r\n    drag?: IActionHandler,\r\n    dragEnd?: IActionHandler,\r\n    dragOver?: IActionHandler,\r\n    dragLeave?: IActionHandler,\r\n    dragEnter?: IActionHandler,\r\n    drop?: IActionHandler,\r\n    mouseOver?: IActionHandler,\r\n    mouseOut?: IActionHandler\r\n  };\r\n  keys?: {\r\n    [key: number]: IActionHandler\r\n  };\r\n}\r\n\r\nexport class TreeOptions {\r\n  get hasChildrenField(): string { return this.options.hasChildrenField || 'hasChildren'; }\r\n  get childrenField(): string { return this.options.childrenField || 'children'; }\r\n  get displayField(): string { return this.options.displayField || 'name'; }\r\n  get idField(): string { return this.options.idField || 'id'; }\r\n  get isExpandedField(): string { return this.options.isExpandedField || 'isExpanded'; }\r\n  get getChildren(): any { return this.options.getChildren; }\r\n  get levelPadding(): number { return this.options.levelPadding || 0; }\r\n  get useVirtualScroll(): boolean { return this.options.useVirtualScroll; }\r\n  get animateExpand(): boolean { return this.options.animateExpand; }\r\n  get animateSpeed(): number { return this.options.animateSpeed || 1; }\r\n  get animateAcceleration(): number { return this.options.animateAcceleration || 1.2; }\r\n  get scrollOnActivate(): boolean { return this.options.scrollOnActivate === undefined ? true : this.options.scrollOnActivate; }\r\n  get rtl(): boolean { return !!this.options.rtl; }\r\n  get rootId(): any {return this.options.rootId; }\r\n  get useCheckbox(): boolean { return this.options.useCheckbox; }\r\n  get useTriState(): boolean { return this.options.useTriState === undefined ? true : this.options.useTriState; }\r\n  get scrollContainer(): HTMLElement { return this.options.scrollContainer; }\r\n  get allowDragoverStyling(): boolean { return this.options.allowDragoverStyling === undefined ? true : this.options.allowDragoverStyling; }\r\n  actionMapping: IActionMapping;\r\n\r\n  constructor(private options: ITreeOptions = {}) {\r\n    this.actionMapping = {\r\n      mouse: {\r\n        click: this.options?.actionMapping?.mouse?.click ?? defaultActionMapping.mouse.click,\r\n        dblClick: this.options?.actionMapping?.mouse?.dblClick ?? defaultActionMapping.mouse.dblClick,\r\n        contextMenu: this.options?.actionMapping?.mouse?.contextMenu ?? defaultActionMapping.mouse.contextMenu,\r\n        expanderClick: this.options?.actionMapping?.mouse?.expanderClick ?? defaultActionMapping.mouse.expanderClick,\r\n        checkboxClick: this.options?.actionMapping?.mouse?.checkboxClick ?? defaultActionMapping.mouse.checkboxClick,\r\n        drop: this.options?.actionMapping?.mouse?.drop ?? defaultActionMapping.mouse.drop,\r\n        dragStart: this.options?.actionMapping?.mouse?.dragStart ?? undefined,\r\n        drag: this.options?.actionMapping?.mouse?.drag ?? undefined,\r\n        dragEnd: this.options?.actionMapping?.mouse?.dragEnd ?? undefined,\r\n        dragOver: this.options?.actionMapping?.mouse?.dragOver ?? undefined,\r\n        dragLeave: this.options?.actionMapping?.mouse?.dragLeave ?? undefined,\r\n        dragEnter: this.options?.actionMapping?.mouse?.dragEnter ?? undefined,\r\n        mouseOver: this.options?.actionMapping?.mouse?.mouseOver ?? undefined,\r\n        mouseOut: this.options?.actionMapping?.mouse?.mouseOut ?? undefined,\r\n      },\r\n      keys: {\r\n        [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,\r\n        [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,\r\n        [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,\r\n        [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,\r\n        [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n        [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE\r\n      }\r\n    }\r\n\r\n    if (this.options?.actionMapping?.keys) {\r\n      this.actionMapping.keys = {\r\n        ...this.actionMapping.keys,\r\n        ...this.options.actionMapping.keys\r\n      }\r\n    }\r\n\r\n    if (options.rtl) {\r\n      this.actionMapping.keys[KEYS.RIGHT] = <IActionHandler>options.actionMapping?.keys[KEYS.RIGHT] || TREE_ACTIONS.DRILL_UP;\r\n      this.actionMapping.keys[KEYS.LEFT] = <IActionHandler>options.actionMapping?.keys[KEYS.LEFT] || TREE_ACTIONS.DRILL_DOWN;\r\n    }\r\n  }\r\n\r\n  getNodeClone(node: TreeNode): any {\r\n    if (this.options.getNodeClone) {\r\n      return this.options.getNodeClone(node);\r\n    }\r\n\r\n    // remove id from clone\r\n    // keeping ie11 compatibility\r\n    const nodeClone = Object.assign({}, node.data);\r\n    if (nodeClone.id) {\r\n      delete nodeClone.id;\r\n    }\r\n    return nodeClone;\r\n  }\r\n\r\n  allowDrop(element, to, $event?): boolean {\r\n    if (this.options.allowDrop instanceof Function) {\r\n      return this.options.allowDrop(element, to, $event);\r\n    }\r\n    else {\r\n      return this.options.allowDrop === undefined ? true : this.options.allowDrop;\r\n    }\r\n  }\r\n\r\n  allowDrag(node: TreeNode): boolean {\r\n    if (this.options.allowDrag instanceof Function) {\r\n      return this.options.allowDrag(node);\r\n    } else {\r\n      return this.options.allowDrag;\r\n    }\r\n  }\r\n\r\n  nodeClass(node: TreeNode): string {\r\n    return this.options.nodeClass ? this.options.nodeClass(node) : '';\r\n  }\r\n\r\n  nodeHeight(node: TreeNode): number {\r\n    if (node.data.virtual) {\r\n      return 0;\r\n    }\r\n\r\n    let nodeHeight = this.options.nodeHeight || 22;\r\n\r\n    if (typeof nodeHeight === 'function') {\r\n      nodeHeight = nodeHeight(node);\r\n    }\r\n\r\n    // account for drop slots:\r\n    return nodeHeight + (node.index === 0 ?  2 : 1) * this.dropSlotHeight;\r\n  }\r\n\r\n  get dropSlotHeight(): number {\r\n    return typeof this.options.dropSlotHeight === 'number' ? this.options.dropSlotHeight : 2;\r\n  }\r\n}\r\n","export const TREE_EVENTS = {\r\n  toggleExpanded: 'toggleExpanded',\r\n  activate: 'activate',\r\n  deactivate: 'deactivate',\r\n  nodeActivate: 'nodeActivate',\r\n  nodeDeactivate: 'nodeDeactivate',\r\n  select: 'select',\r\n  deselect: 'deselect',\r\n  focus: 'focus',\r\n  blur: 'blur',\r\n  initialized: 'initialized',\r\n  updateData: 'updateData',\r\n  moveNode: 'moveNode',\r\n  copyNode: 'copyNode',\r\n  event: 'event',\r\n  loadNodeChildren: 'loadNodeChildren',\r\n  changeFilter: 'changeFilter',\r\n  stateChange: 'stateChange'\r\n};\r\n","import { observable, computed, reaction, autorun, action, IReactionDisposer } from 'mobx';\r\nimport { TreeModel } from './tree.model';\r\nimport { TreeOptions } from './tree-options.model';\r\nimport { ITreeNode } from '../defs/api';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\nexport class TreeNode implements ITreeNode {\r\n  private handler: IReactionDisposer;\r\n  @computed get isHidden() { return this.treeModel.isHidden(this); };\r\n  @computed get isExpanded() { return this.treeModel.isExpanded(this); };\r\n  @computed get isActive() { return this.treeModel.isActive(this); };\r\n  @computed get isFocused() { return this.treeModel.isNodeFocused(this); };\r\n  @computed get isSelected() {\r\n    if (this.isSelectable()) {\r\n        return this.treeModel.isSelected(this);\r\n    } else {\r\n      return this.children.some((node: TreeNode) => node.isSelected);\r\n    }\r\n  };\r\n  @computed get isAllSelected() {\r\n    if (this.isSelectable()) {\r\n      return this.treeModel.isSelected(this);\r\n    } else {\r\n      return this.children.every((node: TreeNode) => node.isAllSelected);\r\n    }\r\n  };\r\n  @computed get isPartiallySelected() {\r\n    return this.isSelected && !this.isAllSelected;\r\n  }\r\n\r\n  @observable children: TreeNode[];\r\n  @observable index: number;\r\n  @observable position = 0;\r\n  @observable height: number;\r\n  @computed get level(): number {\r\n    return this.parent ? this.parent.level + 1 : 0;\r\n  }\r\n  @computed get path(): string[] {\r\n    return this.parent ? [...this.parent.path, this.id] : [];\r\n  }\r\n\r\n  get elementRef(): any {\r\n    throw `Element Ref is no longer supported since introducing virtual scroll\\n\r\n      You may use a template to obtain a reference to the element`;\r\n  }\r\n\r\n  private _originalNode: any;\r\n  get originalNode() { return this._originalNode; };\r\n\r\n  constructor(public data: any, public parent: TreeNode, public treeModel: TreeModel, index: number) {\r\n    if (this.id === undefined || this.id === null) {\r\n      this.id = uuid();\r\n    } // Make sure there's a unique id without overriding existing ids to work with immutable data structures\r\n    this.index = index;\r\n\r\n    if (this.getField('children')) {\r\n      this._initChildren();\r\n    }\r\n    this.autoLoadChildren();\r\n  }\r\n\r\n  // helper get functions:\r\n  get hasChildren(): boolean {\r\n    return !!(this.getField('hasChildren') || (this.children && this.children.length > 0));\r\n  }\r\n  get isCollapsed(): boolean { return !this.isExpanded; }\r\n  get isLeaf(): boolean { return !this.hasChildren; }\r\n  get isRoot(): boolean { return this.parent.data.virtual; }\r\n  get realParent(): TreeNode { return this.isRoot ? null : this.parent; }\r\n\r\n  // proxy functions:\r\n  get options(): TreeOptions { return this.treeModel.options; }\r\n  fireEvent(event) { this.treeModel.fireEvent(event); }\r\n\r\n  // field accessors:\r\n  get displayField() {\r\n    return this.getField('display');\r\n  }\r\n\r\n  get id() {\r\n    return this.getField('id');\r\n  }\r\n\r\n  set id(value) {\r\n    this.setField('id', value);\r\n  }\r\n\r\n  getField(key) {\r\n    return this.data[this.options[`${key}Field`]];\r\n  }\r\n\r\n  setField(key, value) {\r\n    this.data[this.options[`${key}Field`]] = value;\r\n  }\r\n\r\n  // traversing:\r\n  _findAdjacentSibling(steps, skipHidden = false) {\r\n    const siblings = this._getParentsChildren(skipHidden);\r\n    const index = siblings.indexOf(this);\r\n\r\n    return siblings.length > index + steps ? siblings[index + steps] : null;\r\n  }\r\n\r\n  findNextSibling(skipHidden = false) {\r\n    return this._findAdjacentSibling(+1, skipHidden);\r\n  }\r\n\r\n  findPreviousSibling(skipHidden = false) {\r\n    return this._findAdjacentSibling(-1, skipHidden);\r\n  }\r\n\r\n  getVisibleChildren() {\r\n    return this.visibleChildren;\r\n  }\r\n\r\n  @computed get visibleChildren() {\r\n    return (this.children || []).filter((node) => !node.isHidden);\r\n  }\r\n\r\n  getFirstChild(skipHidden = false) {\r\n    let children = skipHidden ? this.visibleChildren : this.children;\r\n\r\n    return children != null && children.length ? children[0] : null;\r\n  }\r\n\r\n  getLastChild(skipHidden = false) {\r\n    let children = skipHidden ? this.visibleChildren : this.children;\r\n\r\n    return children != null && children.length ? children[children.length - 1] : null;\r\n  }\r\n\r\n  findNextNode(goInside = true, skipHidden = false) {\r\n    return goInside && this.isExpanded && this.getFirstChild(skipHidden) ||\r\n           this.findNextSibling(skipHidden) ||\r\n           this.parent && this.parent.findNextNode(false, skipHidden);\r\n  }\r\n\r\n  findPreviousNode(skipHidden = false) {\r\n    let previousSibling = this.findPreviousSibling(skipHidden);\r\n    if (!previousSibling) {\r\n      return this.realParent;\r\n    }\r\n    return previousSibling._getLastOpenDescendant(skipHidden);\r\n  }\r\n\r\n  _getLastOpenDescendant(skipHidden = false) {\r\n    const lastChild = this.getLastChild(skipHidden);\r\n    return (this.isCollapsed || !lastChild)\r\n      ? this\r\n      : lastChild._getLastOpenDescendant(skipHidden);\r\n  }\r\n\r\n  private _getParentsChildren(skipHidden = false): any[] {\r\n    const children = this.parent &&\r\n      (skipHidden ? this.parent.getVisibleChildren() : this.parent.children);\r\n\r\n    return children || [];\r\n  }\r\n\r\n  private getIndexInParent(skipHidden = false) {\r\n    return this._getParentsChildren(skipHidden).indexOf(this);\r\n  }\r\n\r\n  isDescendantOf(node: TreeNode) {\r\n    if (this === node) return true;\r\n    else return this.parent && this.parent.isDescendantOf(node);\r\n  }\r\n\r\n  getNodePadding(): string {\r\n    return this.options.levelPadding * (this.level - 1) + 'px';\r\n  }\r\n\r\n  getClass(): string {\r\n    return [this.options.nodeClass(this), `tree-node-level-${ this.level }`].join(' ');\r\n  }\r\n\r\n  onDrop($event) {\r\n    this.mouseAction('drop', $event.event, {\r\n      from: $event.element,\r\n      to: { parent: this, index: 0, dropOnNode: true }\r\n    });\r\n  }\r\n\r\n  allowDrop = (element, $event?) => {\r\n    return this.options.allowDrop(element, { parent: this, index: 0 }, $event);\r\n  }\r\n\r\n  allowDragoverStyling = () => {\r\n    return this.options.allowDragoverStyling;\r\n  }\r\n\r\n  allowDrag() {\r\n    return this.options.allowDrag(this);\r\n  }\r\n\r\n\r\n  // helper methods:\r\n  loadNodeChildren() {\r\n    if (!this.options.getChildren) {\r\n      return Promise.resolve(); // Not getChildren method - for using redux\r\n    }\r\n    return Promise.resolve(this.options.getChildren(this))\r\n      .then((children) => {\r\n        if (children) {\r\n          this.setField('children', children);\r\n          this._initChildren();\r\n          if (this.options.useTriState && this.treeModel.isSelected(this)) {\r\n            this.setIsSelected(true);\r\n          }\r\n          this.children.forEach((child) => {\r\n            if (child.getField('isExpanded') && child.hasChildren) {\r\n              child.expand();\r\n            }\r\n          });\r\n      }}).then(() => {\r\n        this.fireEvent({\r\n          eventName: TREE_EVENTS.loadNodeChildren,\r\n          node: this\r\n        });\r\n      });\r\n  }\r\n\r\n  expand() {\r\n    if (!this.isExpanded) {\r\n      this.toggleExpanded();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  collapse() {\r\n    if (this.isExpanded) {\r\n      this.toggleExpanded();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  doForAll(fn: (node: ITreeNode) => any) {\r\n    Promise.resolve(fn(this)).then(() => {\r\n      if (this.children) {\r\n        this.children.forEach((child) => child.doForAll(fn));\r\n      }\r\n    });\r\n  }\r\n\r\n  expandAll() {\r\n    this.doForAll((node) => node.expand());\r\n  }\r\n\r\n  collapseAll() {\r\n    this.doForAll((node) => node.collapse());\r\n  }\r\n\r\n  ensureVisible() {\r\n    if (this.realParent) {\r\n      this.realParent.expand();\r\n      this.realParent.ensureVisible();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleExpanded() {\r\n    this.setIsExpanded(!this.isExpanded);\r\n\r\n    return this;\r\n  }\r\n\r\n  setIsExpanded(value) {\r\n    if (this.hasChildren) {\r\n      this.treeModel.setExpandedNode(this, value);\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  autoLoadChildren() {\r\n    this.handler =\r\n      reaction(\r\n        () => this.isExpanded,\r\n        (isExpanded) => {\r\n          if (!this.children && this.hasChildren && isExpanded) {\r\n            this.loadNodeChildren();\r\n          }\r\n        },\r\n        { fireImmediately: true }\r\n      );\r\n  }\r\n\r\n  dispose() {\r\n    if (this.children) {\r\n      this.children.forEach((child) => child.dispose());\r\n    }\r\n    if (this.handler) {\r\n      this.handler();\r\n    }\r\n    this.parent = null;\r\n    this.children = null;\r\n  }\r\n\r\n  setIsActive(value, multi = false) {\r\n    this.treeModel.setActiveNode(this, value, multi);\r\n    if (value) {\r\n      this.focus(this.options.scrollOnActivate);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  isSelectable() {\r\n    return this.isLeaf || !this.children || !this.options.useTriState;\r\n  }\r\n\r\n  @action setIsSelected(value) {\r\n    if (this.isSelectable()) {\r\n      this.treeModel.setSelectedNode(this, value);\r\n    } else {\r\n      this.visibleChildren.forEach((child) => child.setIsSelected(value));\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleSelected() {\r\n    this.setIsSelected(!this.isSelected);\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleActivated(multi = false) {\r\n    this.setIsActive(!this.isActive, multi);\r\n\r\n    return this;\r\n  }\r\n\r\n  setActiveAndVisible(multi = false) {\r\n    this.setIsActive(true, multi)\r\n      .ensureVisible();\r\n\r\n    setTimeout(this.scrollIntoView.bind(this));\r\n\r\n    return this;\r\n  }\r\n\r\n  scrollIntoView(force = false) {\r\n    this.treeModel.virtualScroll.scrollIntoView(this, force);\r\n  }\r\n\r\n  focus(scroll = true) {\r\n    let previousNode = this.treeModel.getFocusedNode();\r\n    this.treeModel.setFocusedNode(this);\r\n    if (scroll) {\r\n      this.scrollIntoView();\r\n    }\r\n    if (previousNode) {\r\n      this.fireEvent({ eventName: TREE_EVENTS.blur, node: previousNode });\r\n    }\r\n    this.fireEvent({ eventName: TREE_EVENTS.focus, node: this });\r\n\r\n    return this;\r\n  }\r\n\r\n  blur() {\r\n    let previousNode = this.treeModel.getFocusedNode();\r\n    this.treeModel.setFocusedNode(null);\r\n    if (previousNode) {\r\n      this.fireEvent({ eventName: TREE_EVENTS.blur, node: this });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  setIsHidden(value) {\r\n    this.treeModel.setIsHidden(this, value);\r\n  }\r\n\r\n  hide() {\r\n    this.setIsHidden(true);\r\n  }\r\n\r\n  show() {\r\n    this.setIsHidden(false);\r\n  }\r\n\r\n  mouseAction(actionName: string, $event, data: any = null) {\r\n    this.treeModel.setFocus(true);\r\n\r\n    const actionMapping = this.options.actionMapping.mouse;\r\n    const mouseAction = actionMapping[actionName];\r\n\r\n    if (mouseAction) {\r\n      mouseAction(this.treeModel, this, $event, data);\r\n    }\r\n  }\r\n\r\n  getSelfHeight() {\r\n    return this.options.nodeHeight(this);\r\n  }\r\n\r\n  @action _initChildren() {\r\n    this.children = this.getField('children')\r\n      .map((c, index) => new TreeNode(c, this, this.treeModel, index));\r\n  }\r\n}\r\n\r\nfunction uuid() {\r\n  return Math.floor(Math.random() * 10000000000000);\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { observable, computed, action, autorun } from 'mobx';\r\nimport { Subscription } from 'rxjs';\r\nimport { TreeNode } from './tree-node.model';\r\nimport { TreeOptions } from './tree-options.model';\r\nimport { TreeVirtualScroll } from './tree-virtual-scroll.model';\r\nimport { ITreeModel, IDType, IDTypeDictionary } from '../defs/api';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\n@Injectable()\r\nexport class TreeModel implements ITreeModel, OnDestroy {\r\n  static focusedTree = null;\r\n\r\n  options: TreeOptions = new TreeOptions();\r\n  nodes: any[];\r\n  eventNames = Object.keys(TREE_EVENTS);\r\n  virtualScroll: TreeVirtualScroll;\r\n\r\n  @observable roots: TreeNode[];\r\n  @observable expandedNodeIds: IDTypeDictionary = {};\r\n  @observable selectedLeafNodeIds: IDTypeDictionary = {};\r\n  @observable activeNodeIds: IDTypeDictionary = {};\r\n  @observable hiddenNodeIds: IDTypeDictionary = {};\r\n  @observable focusedNodeId: IDType = null;\r\n  @observable virtualRoot: TreeNode;\r\n\r\n  private firstUpdate = true;\r\n  private events: any;\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  // events\r\n  fireEvent(event) {\r\n    event.treeModel = this;\r\n    this.events[event.eventName].emit(event);\r\n    this.events.event.emit(event);\r\n  }\r\n\r\n  subscribe(eventName, fn) {\r\n    const subscription = this.events[eventName].subscribe(fn);\r\n    this.subscriptions.push(subscription);\r\n  }\r\n\r\n\r\n  // getters\r\n  getFocusedNode(): TreeNode {\r\n    return this.focusedNode;\r\n  }\r\n\r\n\r\n  getActiveNode(): TreeNode {\r\n    return this.activeNodes[0];\r\n  }\r\n\r\n  getActiveNodes(): TreeNode[] {\r\n    return this.activeNodes;\r\n  }\r\n\r\n  getVisibleRoots() {\r\n    return this.virtualRoot.visibleChildren;\r\n  }\r\n\r\n  getFirstRoot(skipHidden = false) {\r\n    const root = skipHidden ? this.getVisibleRoots() : this.roots;\r\n    return root != null && root.length ? root[0] : null;\r\n  }\r\n\r\n  getLastRoot(skipHidden = false) {\r\n    const root = skipHidden ? this.getVisibleRoots() : this.roots;\r\n    return root != null && root.length ? root[root.length - 1] : null;\r\n  }\r\n\r\n  get isFocused() {\r\n    return TreeModel.focusedTree === this;\r\n  }\r\n\r\n  isNodeFocused(node) {\r\n    return this.focusedNode === node;\r\n  }\r\n\r\n  isEmptyTree(): boolean {\r\n    return this.roots && this.roots.length === 0;\r\n  }\r\n\r\n  @computed get focusedNode() {\r\n    return this.focusedNodeId ? this.getNodeById(this.focusedNodeId) : null;\r\n  }\r\n\r\n  @computed get expandedNodes() {\r\n    const nodes = Object.keys(this.expandedNodeIds)\r\n      .filter((id) => this.expandedNodeIds[id])\r\n      .map((id) => this.getNodeById(id));\r\n\r\n    return nodes.filter(Boolean);\r\n  }\r\n\r\n  @computed get activeNodes() {\r\n    const nodes = Object.keys(this.activeNodeIds)\r\n      .filter((id) => this.activeNodeIds[id])\r\n      .map((id) => this.getNodeById(id));\r\n\r\n    return nodes.filter(Boolean);\r\n  }\r\n\r\n  @computed get hiddenNodes() {\r\n    const nodes = Object.keys(this.hiddenNodeIds)\r\n        .filter((id) => this.hiddenNodeIds[id])\r\n        .map((id) => this.getNodeById(id));\r\n\r\n    return nodes.filter(Boolean);\r\n  }\r\n\r\n  @computed get selectedLeafNodes() {\r\n    const nodes = Object.keys(this.selectedLeafNodeIds)\r\n        .filter((id) => this.selectedLeafNodeIds[id])\r\n        .map((id) => this.getNodeById(id));\r\n\r\n    return nodes.filter(Boolean);\r\n  }\r\n\r\n  // locating nodes\r\n  getNodeByPath(path: any[], startNode= null): TreeNode {\r\n    if (!path) return null;\r\n\r\n    startNode = startNode || this.virtualRoot;\r\n    if (path.length === 0) return startNode;\r\n\r\n    if (!startNode.children) return null;\r\n\r\n    const childId = path.shift();\r\n    const childNode = startNode.children.find(c => c.id === childId);\r\n\r\n    if (!childNode) return null;\r\n\r\n    return this.getNodeByPath(path, childNode);\r\n  }\r\n\r\n  getNodeById(id) {\r\n    const idStr = id.toString();\r\n\r\n    return this.getNodeBy((node) => node.id.toString() === idStr);\r\n  }\r\n\r\n  getNodeBy(predicate, startNode = null) {\r\n    startNode = startNode || this.virtualRoot;\r\n\r\n    if (!startNode.children) return null;\r\n\r\n    const found = startNode.children.find(predicate);\r\n\r\n    if (found) { // found in children\r\n      return found;\r\n    } else { // look in children's children\r\n      for (let child of startNode.children) {\r\n        const foundInChildren = this.getNodeBy(predicate, child);\r\n        if (foundInChildren) return foundInChildren;\r\n      }\r\n    }\r\n  }\r\n\r\n  isExpanded(node) {\r\n    return this.expandedNodeIds[node.id];\r\n  }\r\n\r\n  isHidden(node) {\r\n    return this.hiddenNodeIds[node.id];\r\n  }\r\n\r\n  isActive(node) {\r\n    return this.activeNodeIds[node.id];\r\n  }\r\n\r\n  isSelected(node) {\r\n    return this.selectedLeafNodeIds[node.id];\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dispose();\r\n    this.unsubscribeAll();\r\n  }\r\n\r\n  dispose() {\r\n    // Dispose reactions of the replaced nodes\r\n    if (this.virtualRoot) {\r\n      this.virtualRoot.dispose();\r\n    }\r\n  }\r\n\r\n  unsubscribeAll() {\r\n    this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    this.subscriptions = [];\r\n  }\r\n\r\n  // actions\r\n  @action setData({ nodes, options = null, events = null }: {nodes: any, options: any, events: any}) {\r\n    if (options) {\r\n      this.options = new TreeOptions(options);\r\n    }\r\n    if (events) {\r\n      this.events = events;\r\n    }\r\n    if (nodes) {\r\n      this.nodes = nodes;\r\n    }\r\n\r\n    this.update();\r\n  }\r\n\r\n  @action update() {\r\n    // Rebuild tree:\r\n    let virtualRootConfig = {\r\n      id: this.options.rootId,\r\n      virtual: true,\r\n      [this.options.childrenField]: this.nodes\r\n    };\r\n\r\n    this.dispose();\r\n\r\n    this.virtualRoot = new TreeNode(virtualRootConfig, null, this, 0);\r\n\r\n    this.roots = this.virtualRoot.children;\r\n\r\n    // Fire event:\r\n    if (this.firstUpdate) {\r\n      if (this.roots) {\r\n        this.firstUpdate = false;\r\n        this._calculateExpandedNodes();\r\n      }\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.updateData });\r\n    }\r\n  }\r\n\r\n\r\n  @action setFocusedNode(node) {\r\n    this.focusedNodeId = node ? node.id : null;\r\n  }\r\n\r\n  @action setFocus(value) {\r\n    TreeModel.focusedTree = value ? this : null;\r\n  }\r\n\r\n  @action doForAll(fn) {\r\n    this.roots.forEach((root) => root.doForAll(fn));\r\n  }\r\n\r\n  @action focusNextNode() {\r\n    let previousNode = this.getFocusedNode();\r\n    let nextNode = previousNode ? previousNode.findNextNode(true, true) : this.getFirstRoot(true);\r\n    if (nextNode) nextNode.focus();\r\n  }\r\n\r\n  @action focusPreviousNode() {\r\n    let previousNode = this.getFocusedNode();\r\n    let nextNode = previousNode ? previousNode.findPreviousNode(true) : this.getLastRoot(true);\r\n    if (nextNode) nextNode.focus();\r\n  }\r\n\r\n  @action focusDrillDown() {\r\n    let previousNode = this.getFocusedNode();\r\n    if (previousNode && previousNode.isCollapsed && previousNode.hasChildren) {\r\n      previousNode.toggleExpanded();\r\n    }\r\n    else {\r\n      let nextNode = previousNode ? previousNode.getFirstChild(true) : this.getFirstRoot(true);\r\n      if (nextNode) nextNode.focus();\r\n    }\r\n  }\r\n\r\n  @action focusDrillUp() {\r\n    let previousNode = this.getFocusedNode();\r\n    if (!previousNode) return;\r\n    if (previousNode.isExpanded) {\r\n      previousNode.toggleExpanded();\r\n    }\r\n    else {\r\n      let nextNode = previousNode.realParent;\r\n      if (nextNode) nextNode.focus();\r\n    }\r\n  }\r\n\r\n  @action setActiveNode(node, value, multi = false) {\r\n    if (multi) {\r\n      this._setActiveNodeMulti(node, value);\r\n    }\r\n    else {\r\n      this._setActiveNodeSingle(node, value);\r\n    }\r\n\r\n    if (value) {\r\n      node.focus(this.options.scrollOnActivate);\r\n      this.fireEvent({ eventName: TREE_EVENTS.activate, node });\r\n      this.fireEvent({ eventName: TREE_EVENTS.nodeActivate, node }); // For IE11\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.deactivate, node });\r\n      this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node }); // For IE11\r\n    }\r\n  }\r\n\r\n  @action setSelectedNode(node, value) {\r\n    this.selectedLeafNodeIds = Object.assign({}, this.selectedLeafNodeIds, {[node.id]: value});\r\n\r\n    if (value) {\r\n      node.focus();\r\n      this.fireEvent({ eventName: TREE_EVENTS.select, node });\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.deselect, node });\r\n    }\r\n  }\r\n\r\n  @action setExpandedNode(node, value) {\r\n    this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, {[node.id]: value});\r\n    this.fireEvent({ eventName: TREE_EVENTS.toggleExpanded, node, isExpanded: value });\r\n  }\r\n\r\n  @action expandAll() {\r\n    this.roots.forEach((root) => root.expandAll());\r\n  }\r\n\r\n  @action collapseAll() {\r\n    this.roots.forEach((root) => root.collapseAll());\r\n  }\r\n\r\n  @action setIsHidden(node, value) {\r\n    this.hiddenNodeIds = Object.assign({}, this.hiddenNodeIds, {[node.id]: value});\r\n  }\r\n\r\n  @action setHiddenNodeIds(nodeIds) {\r\n    this.hiddenNodeIds = nodeIds.reduce((hiddenNodeIds, id) => Object.assign(hiddenNodeIds, {\r\n      [id]: true\r\n    }), {});\r\n  }\r\n\r\n  performKeyAction(node, $event) {\r\n    const keyAction = this.options.actionMapping.keys[$event.keyCode];\r\n    if (keyAction) {\r\n      $event.preventDefault();\r\n      keyAction(this, node, $event);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  @action filterNodes(filter, autoShow = true) {\r\n    let filterFn;\r\n\r\n    if (!filter) {\r\n      return this.clearFilter();\r\n    }\r\n\r\n    // support function and string filter\r\n    if (filter && typeof filter.valueOf() === 'string') {\r\n      filterFn = (node) => node.displayField.toLowerCase().indexOf(filter.toLowerCase()) !== -1;\r\n    }\r\n    else if (filter && typeof filter === 'function') {\r\n       filterFn = filter;\r\n    }\r\n    else {\r\n      console.error('Don\\'t know what to do with filter', filter);\r\n      console.error('Should be either a string or function');\r\n      return;\r\n    }\r\n\r\n    const ids = {};\r\n    this.roots.forEach((node) => this._filterNode(ids, node, filterFn, autoShow));\r\n    this.hiddenNodeIds = ids;\r\n    this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\r\n  }\r\n\r\n  @action clearFilter() {\r\n    this.hiddenNodeIds = {};\r\n    this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\r\n  }\r\n\r\n  @action moveNode(node, to) {\r\n    const fromIndex = node.getIndexInParent();\r\n    const fromParent = node.parent;\r\n\r\n    if (!this.canMoveNode(node, to, fromIndex)) return;\r\n\r\n    const fromChildren = fromParent.getField('children');\r\n\r\n    // If node doesn't have children - create children array\r\n    if (!to.parent.getField('children')) {\r\n      to.parent.setField('children', []);\r\n    }\r\n    const toChildren = to.parent.getField('children');\r\n\r\n    const originalNode = fromChildren.splice(fromIndex, 1)[0];\r\n\r\n    // Compensate for index if already removed from parent:\r\n    let toIndex = (fromParent === to.parent && to.index > fromIndex) ? to.index - 1 : to.index;\r\n\r\n    toChildren.splice(toIndex, 0, originalNode);\r\n\r\n    fromParent.treeModel.update();\r\n    if (to.parent.treeModel !== fromParent.treeModel) {\r\n      to.parent.treeModel.update();\r\n    }\r\n\r\n    this.fireEvent({\r\n      eventName: TREE_EVENTS.moveNode,\r\n      node: originalNode,\r\n      to: { parent: to.parent.data, index: toIndex },\r\n      from: { parent: fromParent.data, index: fromIndex}\r\n    });\r\n  }\r\n\r\n  @action copyNode(node, to) {\r\n    const fromIndex = node.getIndexInParent();\r\n\r\n    if (!this.canMoveNode(node, to, fromIndex)) return;\r\n\r\n    // If node doesn't have children - create children array\r\n    if (!to.parent.getField('children')) {\r\n      to.parent.setField('children', []);\r\n    }\r\n    const toChildren = to.parent.getField('children');\r\n\r\n    const nodeCopy = this.options.getNodeClone(node);\r\n\r\n    toChildren.splice(to.index, 0, nodeCopy);\r\n\r\n    node.treeModel.update();\r\n    if (to.parent.treeModel !== node.treeModel) {\r\n      to.parent.treeModel.update();\r\n    }\r\n\r\n    this.fireEvent({ eventName: TREE_EVENTS.copyNode, node: nodeCopy, to: { parent: to.parent.data, index: to.index } });\r\n  }\r\n\r\n  getState() {\r\n    return {\r\n      expandedNodeIds: this.expandedNodeIds,\r\n      selectedLeafNodeIds: this.selectedLeafNodeIds,\r\n      activeNodeIds: this.activeNodeIds,\r\n      hiddenNodeIds: this.hiddenNodeIds,\r\n      focusedNodeId: this.focusedNodeId\r\n    };\r\n  }\r\n\r\n  @action setState(state) {\r\n    if (!state) return;\r\n\r\n    Object.assign(this, {\r\n      expandedNodeIds: state.expandedNodeIds || {},\r\n      selectedLeafNodeIds: state.selectedLeafNodeIds || {},\r\n      activeNodeIds: state.activeNodeIds || {},\r\n      hiddenNodeIds: state.hiddenNodeIds || {},\r\n      focusedNodeId: state.focusedNodeId\r\n    });\r\n  }\r\n\r\n  subscribeToState(fn) {\r\n    autorun(() => fn(this.getState()));\r\n  }\r\n\r\n  canMoveNode(node, to, fromIndex = undefined) {\r\n    const fromNodeIndex = fromIndex || node.getIndexInParent();\r\n\r\n    // same node:\r\n    if (node.parent === to.parent && fromIndex === to.index) {\r\n      return false;\r\n    }\r\n\r\n    return !to.parent.isDescendantOf(node);\r\n  }\r\n\r\n  calculateExpandedNodes() {\r\n      this._calculateExpandedNodes();\r\n  }\r\n\r\n  // private methods\r\n  private _filterNode(ids, node, filterFn, autoShow) {\r\n    // if node passes function then it's visible\r\n    let isVisible = filterFn(node);\r\n\r\n    if (node.children) {\r\n      // if one of node's children passes filter then this node is also visible\r\n      node.children.forEach((child) => {\r\n        if (this._filterNode(ids, child, filterFn, autoShow)) {\r\n          isVisible = true;\r\n        }\r\n      });\r\n    }\r\n\r\n    // mark node as hidden\r\n    if (!isVisible) {\r\n      ids[node.id] = true;\r\n    }\r\n    // auto expand parents to make sure the filtered nodes are visible\r\n    if (autoShow && isVisible) {\r\n      node.ensureVisible();\r\n    }\r\n    return isVisible;\r\n  }\r\n\r\n  private _calculateExpandedNodes(startNode = null) {\r\n    startNode = startNode || this.virtualRoot;\r\n\r\n    if (startNode.data[this.options.isExpandedField]) {\r\n      this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, {[startNode.id]: true});\r\n    }\r\n    if (startNode.children) {\r\n      startNode.children.forEach((child) => this._calculateExpandedNodes(child));\r\n    }\r\n  }\r\n\r\n  private _setActiveNodeSingle(node, value) {\r\n    // Deactivate all other nodes:\r\n    this.activeNodes\r\n      .filter((activeNode) => activeNode !== node)\r\n      .forEach((activeNode) => {\r\n        this.fireEvent({ eventName: TREE_EVENTS.deactivate, node: activeNode });\r\n        this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node: activeNode }); // For IE11\r\n      });\r\n\r\n    if (value) {\r\n      this.activeNodeIds = {[node.id]: true};\r\n    }\r\n    else {\r\n      this.activeNodeIds = {};\r\n    }\r\n  }\r\n\r\n  private _setActiveNodeMulti(node, value) {\r\n    this.activeNodeIds = Object.assign({}, this.activeNodeIds, {[node.id]: value});\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TreeDraggedElement {\r\n  _draggedElement: any = null;\r\n\r\n  set(draggedElement: any) {\r\n    this._draggedElement = draggedElement;\r\n  }\r\n\r\n  get(): any {\r\n    return this._draggedElement;\r\n  }\r\n\r\n  isDragging() {\r\n    return !!this.get();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { observable, computed, action, autorun, reaction } from 'mobx';\r\nimport { TreeModel } from './tree.model';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\nconst Y_OFFSET = 500; // Extra pixels outside the viewport, in each direction, to render nodes in\r\nconst Y_EPSILON = 150; // Minimum pixel change required to recalculate the rendered nodes\r\n\r\n@Injectable()\r\nexport class TreeVirtualScroll {\r\n  private _dispose: any;\r\n\r\n  @observable yBlocks = 0;\r\n  @observable x = 0;\r\n  @observable viewportHeight = null;\r\n  viewport = null;\r\n\r\n  @computed get y() {\r\n    return this.yBlocks * Y_EPSILON;\r\n  }\r\n\r\n  @computed get totalHeight() {\r\n    return this.treeModel.virtualRoot ? this.treeModel.virtualRoot.height : 0;\r\n  }\r\n\r\n  constructor(private treeModel: TreeModel) {\r\n    treeModel.virtualScroll = this;\r\n    this._dispose = [autorun(() => this.fixScroll())];\r\n  }\r\n\r\n  fireEvent(event) {\r\n    this.treeModel.fireEvent(event);\r\n  }\r\n\r\n  init() {\r\n    const fn = this.recalcPositions.bind(this);\r\n\r\n    fn();\r\n    this._dispose = [\r\n      ...this._dispose,\r\n      reaction(() => this.treeModel.roots, fn),\r\n      reaction(() => this.treeModel.expandedNodeIds, fn),\r\n      reaction(() => this.treeModel.hiddenNodeIds, fn)\r\n    ];\r\n    this.treeModel.subscribe(TREE_EVENTS.loadNodeChildren, fn);\r\n  }\r\n\r\n  isEnabled() {\r\n    return this.treeModel.options.useVirtualScroll;\r\n  }\r\n\r\n  @action private _setYBlocks(value) {\r\n    this.yBlocks = value;\r\n  }\r\n\r\n  @action recalcPositions() {\r\n    this.treeModel.virtualRoot.height = this._getPositionAfter(this.treeModel.getVisibleRoots(), 0);\r\n  }\r\n\r\n  private _getPositionAfter(nodes, startPos) {\r\n    let position = startPos;\r\n\r\n    nodes.forEach((node) => {\r\n      node.position = position;\r\n      position = this._getPositionAfterNode(node, position);\r\n    });\r\n    return position;\r\n  }\r\n\r\n  private _getPositionAfterNode(node, startPos) {\r\n    let position = node.getSelfHeight() + startPos;\r\n\r\n    if (node.children && node.isExpanded) { // TBD: consider loading component as well\r\n      position = this._getPositionAfter(node.visibleChildren, position);\r\n    }\r\n    node.height = position - startPos;\r\n    return position;\r\n  }\r\n\r\n\r\n  clear() {\r\n    this._dispose.forEach((d) => d());\r\n  }\r\n\r\n  @action setViewport(viewport) {\r\n    Object.assign(this, {\r\n      viewport,\r\n      x: viewport.scrollLeft,\r\n      yBlocks: Math.round(viewport.scrollTop / Y_EPSILON),\r\n      viewportHeight: viewport.getBoundingClientRect ? viewport.getBoundingClientRect().height : 0\r\n    });\r\n  }\r\n\r\n  @action scrollIntoView(node, force, scrollToMiddle = true) {\r\n    if (node.options.scrollContainer) {\r\n      const scrollContainer = node.options.scrollContainer;\r\n      const scrollContainerHeight = scrollContainer.getBoundingClientRect().height;\r\n      const scrollContainerTop = scrollContainer.getBoundingClientRect().top;\r\n      const nodeTop = this.viewport.getBoundingClientRect().top + node.position - scrollContainerTop;\r\n\r\n      if (force || // force scroll to node\r\n        nodeTop < scrollContainer.scrollTop || // node is above scroll container\r\n        nodeTop + node.getSelfHeight() > scrollContainer.scrollTop + scrollContainerHeight) { // node is below container\r\n        scrollContainer.scrollTop = scrollToMiddle ?\r\n          nodeTop - scrollContainerHeight / 2 : // scroll to middle\r\n          nodeTop; // scroll to start\r\n      }\r\n    } else {\r\n      if (force || // force scroll to node\r\n        node.position < this.y || // node is above viewport\r\n        node.position + node.getSelfHeight() > this.y + this.viewportHeight) { // node is below viewport\r\n        if (this.viewport) {\r\n          this.viewport.scrollTop = scrollToMiddle ?\r\n          node.position - this.viewportHeight / 2 : // scroll to middle\r\n          node.position; // scroll to start\r\n\r\n          this._setYBlocks(Math.floor(this.viewport.scrollTop / Y_EPSILON));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getViewportNodes(nodes) {\r\n    if (!nodes) return [];\r\n\r\n    const visibleNodes = nodes.filter((node) => !node.isHidden);\r\n\r\n    if (!this.isEnabled()) return visibleNodes;\r\n\r\n    if (!this.viewportHeight || !visibleNodes.length) return [];\r\n\r\n    // When loading children async this method is called before their height and position is calculated.\r\n    // In that case firstIndex === 0 and lastIndex === visibleNodes.length - 1 (e.g. 1000),\r\n    // which means that it loops through every visibleNodes item and push them into viewportNodes array.\r\n    // We can prevent nodes from being pushed to the array and wait for the appropriate calculations to take place\r\n    const lastVisibleNode = visibleNodes.slice(-1)[0]\r\n    if (!lastVisibleNode.height && lastVisibleNode.position === 0) return [];\r\n\r\n    // Search for first node in the viewport using binary search\r\n    // Look for first node that starts after the beginning of the viewport (with buffer)\r\n    // Or that ends after the beginning of the viewport\r\n    const firstIndex = binarySearch(visibleNodes, (node) => {\r\n      return (node.position + Y_OFFSET > this.y) ||\r\n             (node.position + node.height > this.y);\r\n    });\r\n\r\n    // Search for last node in the viewport using binary search\r\n    // Look for first node that starts after the end of the viewport (with buffer)\r\n    const lastIndex = binarySearch(visibleNodes, (node) => {\r\n      return node.position - Y_OFFSET > this.y + this.viewportHeight;\r\n    }, firstIndex);\r\n\r\n    const viewportNodes = [];\r\n\r\n    for (let i = firstIndex; i <= lastIndex; i++) {\r\n      viewportNodes.push(visibleNodes[i]);\r\n    }\r\n\r\n    return viewportNodes;\r\n  }\r\n\r\n  fixScroll() {\r\n    const maxY = Math.max(0, this.totalHeight - this.viewportHeight);\r\n\r\n    if (this.y < 0) this._setYBlocks(0);\r\n    if (this.y > maxY) this._setYBlocks(maxY / Y_EPSILON);\r\n  }\r\n}\r\n\r\nfunction binarySearch(nodes, condition, firstIndex = 0) {\r\n  let index = firstIndex;\r\n  let toIndex = nodes.length - 1;\r\n\r\n  while (index !== toIndex) {\r\n    let midIndex = Math.floor((index + toIndex) / 2);\r\n\r\n    if (condition(nodes[midIndex])) {\r\n      toIndex = midIndex;\r\n    }\r\n    else {\r\n      if (index === midIndex) index = toIndex;\r\n      else index = midIndex;\r\n    }\r\n  }\r\n  return index;\r\n}\r\n","import { Component, Input, TemplateRef, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  encapsulation: ViewEncapsulation.None,\r\n  selector: 'tree-loading-component',\r\n  template: `\r\n    <span *ngIf=\"!template\">loading...</span>\r\n    <ng-container\r\n      [ngTemplateOutlet]=\"template\"\r\n      [ngTemplateOutletContext]=\"{ $implicit: node }\">\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class LoadingComponent {\r\n  @Input() template: TemplateRef<any>;\r\n  @Input() node: TreeNode;\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  AfterViewInit,\r\n  OnInit,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\n@Component({\r\n  selector: 'tree-viewport',\r\n  styles: [],\r\n  providers: [TreeVirtualScroll],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div [style.height]=\"getTotalHeight()\">\r\n        <ng-content></ng-content>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeViewportComponent implements AfterViewInit, OnInit, OnDestroy {\r\n  setViewport = this.throttle(() => {\r\n    this.virtualScroll.setViewport(this.elementRef.nativeElement);\r\n  }, 17);\r\n\r\n  private readonly scrollEventHandler: ($event: Event) => void;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    public virtualScroll: TreeVirtualScroll\r\n  ) {\r\n    this.scrollEventHandler = this.setViewport.bind(this);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.virtualScroll.init();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    setTimeout(() => {\r\n      this.setViewport();\r\n      this.virtualScroll.fireEvent({ eventName: TREE_EVENTS.initialized });\r\n    });\r\n    let el: HTMLElement = this.elementRef.nativeElement;\r\n    el.addEventListener('scroll', this.scrollEventHandler);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.virtualScroll.clear();\r\n    let el: HTMLElement = this.elementRef.nativeElement;\r\n    el.removeEventListener('scroll', this.scrollEventHandler);\r\n  }\r\n\r\n  getTotalHeight() {\r\n    return (\r\n      (this.virtualScroll.isEnabled() &&\r\n        this.virtualScroll.totalHeight + 'px') ||\r\n      'auto'\r\n    );\r\n  }\r\n\r\n  private throttle(func, timeFrame) {\r\n    let lastTime = 0;\r\n    return function () {\r\n      let now = Date.now();\r\n      if (now - lastTime >= timeFrame) {\r\n        func();\r\n        lastTime = now;\r\n      }\r\n    };\r\n  }\r\n}\r\n","import { Component, ContentChild, EventEmitter, HostListener, Input, OnChanges, Output, TemplateRef, ViewChild } from '@angular/core';\r\nimport { TreeModel } from '../models/tree.model';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\nimport { TreeOptions } from '../models/tree-options.model';\r\nimport { ITreeOptions } from '../defs/api';\r\nimport { TreeViewportComponent } from './tree-viewport.component';\r\n\r\n@Component({\r\n  selector: 'Tree, tree-root',\r\n  providers: [TreeModel],\r\n  styles: [],\r\n  template: `\r\n      <tree-viewport #viewport>\r\n          <div\r\n                  class=\"angular-tree-component\"\r\n                  [class.node-dragging]=\"treeDraggedElement.isDragging()\"\r\n                  [class.angular-tree-component-rtl]=\"treeModel.options.rtl\">\r\n              <tree-node-collection\r\n                      *ngIf=\"treeModel.roots\"\r\n                      [nodes]=\"treeModel.roots\"\r\n                      [treeModel]=\"treeModel\"\r\n                      [templates]=\"{\r\n            loadingTemplate: loadingTemplate,\r\n            treeNodeTemplate: treeNodeTemplate,\r\n            treeNodeWrapperTemplate: treeNodeWrapperTemplate,\r\n            treeNodeFullTemplate: treeNodeFullTemplate\r\n          }\">\r\n              </tree-node-collection>\r\n              <tree-node-drop-slot\r\n                      class=\"empty-tree-drop-slot\"\r\n                      *ngIf=\"treeModel.isEmptyTree()\"\r\n                      [dropIndex]=\"0\"\r\n                      [node]=\"treeModel.virtualRoot\">\r\n              </tree-node-drop-slot>\r\n          </div>\r\n      </tree-viewport>\r\n  `\r\n})\r\nexport class TreeComponent implements OnChanges {\r\n  _nodes: any[];\r\n  _options: TreeOptions;\r\n\r\n  @ContentChild('loadingTemplate', { static: false }) loadingTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeTemplate', { static: false }) treeNodeTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeWrapperTemplate', { static: false }) treeNodeWrapperTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeFullTemplate', { static: false }) treeNodeFullTemplate: TemplateRef<any>;\r\n  @ViewChild('viewport', { static: false }) viewportComponent: TreeViewportComponent;\r\n\r\n  // Will be handled in ngOnChanges\r\n  @Input() set nodes(nodes: any[]) {\r\n  };\r\n\r\n  @Input() set options(options: ITreeOptions) {\r\n  };\r\n\r\n  @Input() set focused(value: boolean) {\r\n    this.treeModel.setFocus(value);\r\n  }\r\n\r\n  @Input() set state(state) {\r\n    this.treeModel.setState(state);\r\n  }\r\n\r\n  @Output() toggleExpanded;\r\n  @Output() activate;\r\n  @Output() deactivate;\r\n  @Output() nodeActivate;\r\n  @Output() nodeDeactivate;\r\n  @Output() select;\r\n  @Output() deselect;\r\n  @Output() focus;\r\n  @Output() blur;\r\n  @Output() updateData;\r\n  @Output() initialized;\r\n  @Output() moveNode;\r\n  @Output() copyNode;\r\n  @Output() loadNodeChildren;\r\n  @Output() changeFilter;\r\n  @Output() event;\r\n  @Output() stateChange;\r\n\r\n  constructor(\r\n    public treeModel: TreeModel,\r\n    public treeDraggedElement: TreeDraggedElement) {\r\n\r\n    treeModel.eventNames.forEach((name) => this[name] = new EventEmitter());\r\n    treeModel.subscribeToState((state) => this.stateChange.emit(state));\r\n  }\r\n\r\n  @HostListener('body: keydown', ['$event'])\r\n  onKeydown($event) {\r\n    if (!this.treeModel.isFocused) return;\r\n    if (['input', 'textarea'].includes(document.activeElement.tagName.toLowerCase())) return;\r\n\r\n    const focusedNode = this.treeModel.getFocusedNode();\r\n\r\n    this.treeModel.performKeyAction(focusedNode, $event);\r\n  }\r\n\r\n  @HostListener('body: mousedown', ['$event'])\r\n  onMousedown($event) {\r\n    function isOutsideClick(startElement: Element, nodeName: string) {\r\n      return !startElement ? true : startElement.localName === nodeName ? false : isOutsideClick(startElement.parentElement, nodeName);\r\n    }\r\n\r\n    if (isOutsideClick($event.target, 'tree-root')) {\r\n      this.treeModel.setFocus(false);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.options || changes.nodes) {\r\n      this.treeModel.setData({\r\n        options: changes.options && changes.options.currentValue,\r\n        nodes: changes.nodes && changes.nodes.currentValue,\r\n        events: this.pick(this, this.treeModel.eventNames)\r\n      });\r\n    }\r\n  }\r\n\r\n  sizeChanged() {\r\n    this.viewportComponent.setViewport();\r\n  }\r\n\r\n  private pick(object, keys) {\r\n    return keys.reduce((obj, key) => {\r\n      if (object && object.hasOwnProperty(key)) {\r\n        obj[key] = object[key];\r\n      }\r\n      return obj;\r\n    }, {});\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'TreeNode, tree-node',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div\r\n        *ngIf=\"!templates.treeNodeFullTemplate\"\r\n        [class]=\"node.getClass()\"\r\n        [class.tree-node]=\"true\"\r\n        [class.tree-node-expanded]=\"node.isExpanded && node.hasChildren\"\r\n        [class.tree-node-collapsed]=\"node.isCollapsed && node.hasChildren\"\r\n        [class.tree-node-leaf]=\"node.isLeaf\"\r\n        [class.tree-node-active]=\"node.isActive\"\r\n        [class.tree-node-focused]=\"node.isFocused\"\r\n      >\r\n        <tree-node-drop-slot\r\n          *ngIf=\"index === 0\"\r\n          [dropIndex]=\"node.index\"\r\n          [node]=\"node.parent\"\r\n        ></tree-node-drop-slot>\r\n\r\n        <tree-node-wrapper\r\n          [node]=\"node\"\r\n          [index]=\"index\"\r\n          [templates]=\"templates\"\r\n        ></tree-node-wrapper>\r\n\r\n        <tree-node-children\r\n          [node]=\"node\"\r\n          [templates]=\"templates\"\r\n        ></tree-node-children>\r\n        <tree-node-drop-slot\r\n          [dropIndex]=\"node.index + 1\"\r\n          [node]=\"node.parent\"\r\n        ></tree-node-drop-slot>\r\n      </div>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"templates.treeNodeFullTemplate\"\r\n        [ngTemplateOutletContext]=\"{\r\n          $implicit: node,\r\n          node: node,\r\n          index: index,\r\n          templates: templates\r\n        }\"\r\n      >\r\n      </ng-container>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeComponent {\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() templates: any;\r\n}\r\n","import { Component, Input, ViewEncapsulation, TemplateRef } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-content',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n  <span *ngIf=\"!template\">{{ node.displayField }}</span>\r\n  <ng-container\r\n    [ngTemplateOutlet]=\"template\"\r\n    [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index }\">\r\n  </ng-container>`,\r\n})\r\nexport class TreeNodeContent {\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() template: TemplateRef<any>;\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'TreeNodeDropSlot, tree-node-drop-slot',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <div\r\n      class=\"node-drop-slot\"\r\n      (treeDrop)=\"onDrop($event)\"\r\n      [treeAllowDrop]=\"allowDrop.bind(this)\"\r\n      [allowDragoverStyling]=\"true\">\r\n    </div>\r\n  `\r\n})\r\nexport class TreeNodeDropSlot {\r\n  @Input() node: TreeNode;\r\n  @Input() dropIndex: number;\r\n\r\n  onDrop($event) {\r\n    this.node.mouseAction('drop', $event.event, {\r\n      from: $event.element,\r\n      to: { parent: this.node, index: this.dropIndex }\r\n    });\r\n  }\r\n\r\n  allowDrop(element, $event) {\r\n    return this.node.options.allowDrop(element, { parent: this.node, index: this.dropIndex }, $event);\r\n  }\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-expander',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <span\r\n        *ngIf=\"node.hasChildren\"\r\n        [class.toggle-children-wrapper-expanded]=\"node.isExpanded\"\r\n        [class.toggle-children-wrapper-collapsed]=\"node.isCollapsed\"\r\n        class=\"toggle-children-wrapper\"\r\n        (click)=\"node.mouseAction('expanderClick', $event)\"\r\n      >\r\n        <span class=\"toggle-children\"></span>\r\n      </span>\r\n      <span *ngIf=\"!node.hasChildren\" class=\"toggle-children-placeholder\">\r\n      </span>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeExpanderComponent {\r\n  @Input() node: TreeNode;\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-children',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div\r\n        [class.tree-children]=\"true\"\r\n        [class.tree-children-no-padding]=\"node.options.levelPadding\"\r\n        *treeAnimateOpen=\"\r\n          node.isExpanded;\r\n          speed: node.options.animateSpeed;\r\n          acceleration: node.options.animateAcceleration;\r\n          enabled: node.options.animateExpand\r\n        \"\r\n      >\r\n        <tree-node-collection\r\n          *ngIf=\"node.children\"\r\n          [nodes]=\"node.children\"\r\n          [templates]=\"templates\"\r\n          [treeModel]=\"node.treeModel\"\r\n        >\r\n        </tree-node-collection>\r\n        <tree-loading-component\r\n          [style.padding-left]=\"node.getNodePadding()\"\r\n          class=\"tree-node-loading\"\r\n          *ngIf=\"!node.children\"\r\n          [template]=\"templates.loadingTemplate\"\r\n          [node]=\"node\"\r\n        ></tree-loading-component>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeChildrenComponent {\r\n  @Input() node: TreeNode;\r\n  @Input() templates: any;\r\n}\r\n","import { action as mobxAction } from 'mobx';\r\nimport { computed as mobxComputed } from 'mobx';\r\nimport { observable as mobxObservable } from 'mobx';\r\n\r\n// Re-export mobx operators to be able to use inside components with AOT:\r\nexport function actionInternal(...args) {\r\n  return (mobxAction as any)(...args);\r\n}\r\nexport const action: typeof mobxAction = Object.assign(\r\n  actionInternal,\r\n  mobxAction\r\n) as any;\r\n\r\nfunction computedInternal(...args) {\r\n  return (mobxComputed as any)(...args);\r\n}\r\nexport const computed: typeof mobxComputed = Object.assign(\r\n  computedInternal,\r\n  mobxComputed\r\n) as any;\r\n\r\nfunction observableInternal(...args) {\r\n  return (mobxObservable as any)(...args);\r\n}\r\n\r\nexport const observable: typeof mobxObservable = Object.assign(\r\n  observableInternal,\r\n  mobxObservable\r\n) as any;\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { reaction } from 'mobx';\r\nimport { observable, computed, action } from '../mobx-angular/mobx-proxy';\r\nimport { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';\r\nimport { TreeNode } from '../models/tree-node.model';\r\nimport { TreeModel } from '../models/tree.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-collection',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div [style.margin-top]=\"marginTop\">\r\n        <tree-node\r\n          *ngFor=\"let node of viewportNodes; let i = index; trackBy: trackNode\"\r\n          [node]=\"node\"\r\n          [index]=\"i\"\r\n          [templates]=\"templates\"\r\n        >\r\n        </tree-node>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeCollectionComponent implements OnInit, OnDestroy {\r\n  @Input()\r\n  get nodes() {\r\n    return this._nodes;\r\n  }\r\n  set nodes(nodes) {\r\n    this.setNodes(nodes);\r\n  }\r\n\r\n  @Input() treeModel: TreeModel;\r\n\r\n  @observable _nodes;\r\n  private virtualScroll: TreeVirtualScroll; // Cannot inject this, because we might be inside treeNodeTemplateFull\r\n  @Input() templates;\r\n\r\n  @observable viewportNodes: TreeNode[];\r\n\r\n  @computed get marginTop(): string {\r\n    const firstNode =\r\n      this.viewportNodes && this.viewportNodes.length && this.viewportNodes[0];\r\n    const relativePosition =\r\n      firstNode && firstNode.parent\r\n        ? firstNode.position -\r\n          firstNode.parent.position -\r\n          firstNode.parent.getSelfHeight()\r\n        : 0;\r\n\r\n    return `${relativePosition}px`;\r\n  }\r\n\r\n  _dispose = [];\r\n\r\n  @action setNodes(nodes) {\r\n    this._nodes = nodes;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.virtualScroll = this.treeModel.virtualScroll;\r\n    this._dispose = [\r\n      // return node indexes so we can compare structurally,\r\n      reaction(\r\n        () => {\r\n          return this.virtualScroll\r\n            .getViewportNodes(this.nodes)\r\n            .map(n => n.index);\r\n        },\r\n        nodeIndexes => {\r\n          this.viewportNodes = nodeIndexes.map(i => this.nodes[i]);\r\n        },\r\n        { compareStructural: true, fireImmediately: true } as any\r\n      ),\r\n      reaction(\r\n        () => this.nodes,\r\n        nodes => {\r\n          this.viewportNodes = this.virtualScroll.getViewportNodes(nodes);\r\n        }\r\n      )\r\n    ];\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._dispose.forEach(d => d());\r\n  }\r\n\r\n  trackNode(index, node) {\r\n    return node.id;\r\n  }\r\n}\r\n","import { Component , Input , ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-wrapper' ,\r\n  encapsulation: ViewEncapsulation.None ,\r\n  styles: [] ,\r\n  template: `\r\n      <div *ngIf=\"!templates.treeNodeWrapperTemplate\" class=\"node-wrapper\" [style.padding-left]=\"node.getNodePadding()\">\r\n          <tree-node-checkbox *ngIf=\"node.options.useCheckbox\" [node]=\"node\"></tree-node-checkbox>\r\n          <tree-node-expander [node]=\"node\"></tree-node-expander>\r\n          <div class=\"node-content-wrapper\"\r\n               [class.node-content-wrapper-active]=\"node.isActive\"\r\n               [class.node-content-wrapper-focused]=\"node.isFocused\"\r\n               (click)=\"node.mouseAction('click', $event)\"\r\n               (dblclick)=\"node.mouseAction('dblClick', $event)\"\r\n               (mouseover)=\"node.mouseAction('mouseOver', $event)\"\r\n               (mouseout)=\"node.mouseAction('mouseOut', $event)\"\r\n               (contextmenu)=\"node.mouseAction('contextMenu', $event)\"\r\n               (treeDrop)=\"node.onDrop($event)\"\r\n               (treeDropDragOver)=\"node.mouseAction('dragOver', $event)\"\r\n               (treeDropDragLeave)=\"node.mouseAction('dragLeave', $event)\"\r\n               (treeDropDragEnter)=\"node.mouseAction('dragEnter', $event)\"\r\n               [treeAllowDrop]=\"node.allowDrop\"\r\n               [allowDragoverStyling]=\"node.allowDragoverStyling()\"\r\n               [treeDrag]=\"node\"\r\n               [treeDragEnabled]=\"node.allowDrag()\">\r\n\r\n              <tree-node-content [node]=\"node\" [index]=\"index\" [template]=\"templates.treeNodeTemplate\">\r\n              </tree-node-content>\r\n          </div>\r\n      </div>\r\n      <ng-container\r\n              [ngTemplateOutlet]=\"templates.treeNodeWrapperTemplate\"\r\n              [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index, templates: templates }\">\r\n      </ng-container>\r\n  `\r\n})\r\n\r\nexport class TreeNodeWrapperComponent {\r\n\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() templates: any;\r\n\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-checkbox',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <input\r\n        class=\"tree-node-checkbox\"\r\n        type=\"checkbox\"\r\n        (click)=\"node.mouseAction('checkboxClick', $event)\"\r\n        [checked]=\"node.isSelected\"\r\n        [indeterminate]=\"node.isPartiallySelected\"\r\n      />\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeCheckboxComponent {\r\n  @Input() node: TreeNode;\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Output,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\n\r\nconst DRAG_OVER_CLASS = 'is-dragging-over';\r\nconst DRAG_DISABLED_CLASS = 'is-dragging-over-disabled';\r\n\r\n@Directive({\r\n  selector: '[treeDrop]'\r\n})\r\nexport class TreeDropDirective implements AfterViewInit, OnDestroy {\r\n  @Input() allowDragoverStyling = true;\r\n  @Output('treeDrop') onDropCallback = new EventEmitter();\r\n  @Output('treeDropDragOver') onDragOverCallback = new EventEmitter();\r\n  @Output('treeDropDragLeave') onDragLeaveCallback = new EventEmitter();\r\n  @Output('treeDropDragEnter') onDragEnterCallback = new EventEmitter();\r\n  private readonly dragOverEventHandler: (ev: DragEvent) => void;\r\n  private readonly dragEnterEventHandler: (ev: DragEvent) => void;\r\n  private readonly dragLeaveEventHandler: (ev: DragEvent) => void;\r\n\r\n  private _allowDrop = (element, $event) => true;\r\n\r\n  @Input() set treeAllowDrop(allowDrop) {\r\n    if (allowDrop instanceof Function) {\r\n      this._allowDrop = allowDrop;\r\n    }\r\n    else this._allowDrop = (element, $event) => allowDrop;\r\n  }\r\n\r\n  allowDrop($event) {\r\n    return this._allowDrop(this.treeDraggedElement.get(), $event);\r\n  }\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2, private treeDraggedElement: TreeDraggedElement, private ngZone: NgZone) {\r\n    this.dragOverEventHandler = this.onDragOver.bind(this);\r\n    this.dragEnterEventHandler = this.onDragEnter.bind(this);\r\n    this.dragLeaveEventHandler = this.onDragLeave.bind(this);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    this.ngZone.runOutsideAngular(() => {\r\n      el.addEventListener('dragover', this.dragOverEventHandler);\r\n      el.addEventListener('dragenter', this.dragEnterEventHandler);\r\n      el.addEventListener('dragleave', this.dragLeaveEventHandler);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    el.removeEventListener('dragover', this.dragOverEventHandler);\r\n    el.removeEventListener('dragenter', this.dragEnterEventHandler);\r\n    el.removeEventListener('dragleave', this.dragLeaveEventHandler);\r\n  }\r\n\r\n  onDragOver($event) {\r\n    if (!this.allowDrop($event)) {\r\n      if (this.allowDragoverStyling) {\r\n        return this.addDisabledClass();\r\n      }\r\n      return;\r\n    }\r\n\r\n    this.onDragOverCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    $event.preventDefault();\r\n    if (this.allowDragoverStyling) {\r\n      this.addClass();\r\n    }\r\n  }\r\n\r\n  onDragEnter($event) {\r\n    if (!this.allowDrop($event)) return;\r\n\r\n    $event.preventDefault();\r\n    this.onDragEnterCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n  }\r\n\r\n  onDragLeave($event) {\r\n    if (!this.allowDrop($event)) {\r\n      if (this.allowDragoverStyling) {\r\n        return this.removeDisabledClass();\r\n      }\r\n      return;\r\n    }\r\n    this.onDragLeaveCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    if (this.allowDragoverStyling) {\r\n      this.removeClass();\r\n    }\r\n  }\r\n\r\n  @HostListener('drop', ['$event']) onDrop($event) {\r\n    if (!this.allowDrop($event)) return;\r\n\r\n    $event.preventDefault();\r\n    this.onDropCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    if (this.allowDragoverStyling) {\r\n      this.removeClass();\r\n    }\r\n    this.treeDraggedElement.set(null);\r\n  }\r\n\r\n  private addClass() {\r\n    this.renderer.addClass(this.el.nativeElement, DRAG_OVER_CLASS);\r\n  }\r\n\r\n  private removeClass() {\r\n    this.renderer.removeClass(this.el.nativeElement, DRAG_OVER_CLASS);\r\n  }\r\n\r\n  private addDisabledClass() {\r\n    this.renderer.addClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\r\n  }\r\n\r\n  private removeDisabledClass() {\r\n    this.renderer.removeClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\r\n  }\r\n}\r\n","import { AfterViewInit, Directive, DoCheck, ElementRef, HostListener, Input, NgZone, OnDestroy, Renderer2 } from '@angular/core';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\n\r\nconst DRAG_OVER_CLASS = 'is-dragging-over';\r\n\r\n@Directive({\r\n  selector: '[treeDrag]'\r\n})\r\nexport class TreeDragDirective implements AfterViewInit, DoCheck, OnDestroy {\r\n  @Input('treeDrag') draggedElement;\r\n  @Input() treeDragEnabled;\r\n  private readonly dragEventHandler: (ev: DragEvent) => void;\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2, private treeDraggedElement: TreeDraggedElement, private ngZone: NgZone) {\r\n    this.dragEventHandler = this.onDrag.bind(this);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    this.ngZone.runOutsideAngular(() => {\r\n      el.addEventListener('drag', this.dragEventHandler);\r\n    });\r\n  }\r\n\r\n  ngDoCheck() {\r\n    this.renderer.setAttribute(this.el.nativeElement, 'draggable', this.treeDragEnabled ? 'true' : 'false');\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    el.removeEventListener('drag', this.dragEventHandler);\r\n  }\r\n\r\n  @HostListener('dragstart', ['$event']) onDragStart(ev) {\r\n    // setting the data is required by firefox\r\n    ev.dataTransfer.setData('text', ev.target.id);\r\n    this.treeDraggedElement.set(this.draggedElement);\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('dragStart', ev);\r\n    }\r\n  }\r\n\r\n  onDrag(ev) {\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('drag', ev);\r\n    }\r\n  }\r\n\r\n  @HostListener('dragend') onDragEnd() {\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('dragEnd');\r\n    }\r\n    this.treeDraggedElement.set(null);\r\n  }\r\n}\r\n","import { Directive, Input, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\nconst EASE_ACCELERATION = 1.005;\r\n\r\n@Directive({\r\n  selector: '[treeAnimateOpen]'\r\n})\r\nexport class TreeAnimateOpenDirective {\r\n  private _isOpen: boolean;\r\n\r\n  @Input('treeAnimateOpenSpeed') animateSpeed: number;\r\n  @Input('treeAnimateOpenAcceleration') animateAcceleration: number;\r\n  @Input('treeAnimateOpenEnabled') isEnabled: boolean;\r\n\r\n  @Input('treeAnimateOpen')\r\n  set isOpen(value: boolean) {\r\n    if (value) {\r\n      this._show();\r\n      if (this.isEnabled && this._isOpen === false) {\r\n        this._animateOpen();\r\n      }\r\n    } else {\r\n      this.isEnabled ? this._animateClose() : this._hide();\r\n    }\r\n    this._isOpen = !!value;\r\n  };\r\n\r\n  private innerElement: any;\r\n\r\n  constructor(\r\n    private renderer: Renderer2,\r\n    private templateRef: TemplateRef<any>,\r\n    private viewContainerRef: ViewContainerRef) {\r\n  }\r\n\r\n  private _show() {\r\n    if (this.innerElement) return;\r\n\r\n    // create child view\r\n    this.innerElement = this.viewContainerRef.createEmbeddedView(this.templateRef).rootNodes[0];\r\n  }\r\n\r\n  private _hide() {\r\n    this.viewContainerRef.clear();\r\n    this.innerElement = null;\r\n  }\r\n\r\n  private _animateOpen() {\r\n    let delta = this.animateSpeed;\r\n    let ease = this.animateAcceleration;\r\n    let maxHeight = 0;\r\n\r\n    // set height to 0\r\n    this.renderer.setStyle(this.innerElement, 'max-height', `0`);\r\n\r\n    // increase maxHeight until height doesn't change\r\n    setTimeout(() => { // Allow inner element to create its content\r\n      const i = setInterval(() => {\r\n        if (!this._isOpen || !this.innerElement) return clearInterval(i);\r\n\r\n        maxHeight += delta;\r\n        const roundedMaxHeight = Math.round(maxHeight);\r\n\r\n        this.renderer.setStyle(this.innerElement, 'max-height', `${roundedMaxHeight}px`);\r\n        const height = this.innerElement.getBoundingClientRect ? this.innerElement.getBoundingClientRect().height : 0; // TBD use renderer\r\n\r\n        delta *= ease;\r\n        ease *= EASE_ACCELERATION;\r\n        if (height < roundedMaxHeight) {\r\n          // Make maxHeight auto because animation finished and container might change height later on\r\n          this.renderer.setStyle(this.innerElement, 'max-height', null);\r\n          clearInterval(i);\r\n        }\r\n      }, 17);\r\n    });\r\n  }\r\n\r\n  private _animateClose() {\r\n    if (!this.innerElement) return;\r\n\r\n    let delta = this.animateSpeed;\r\n    let ease = this.animateAcceleration;\r\n    let height = this.innerElement.getBoundingClientRect().height; // TBD use renderer\r\n\r\n    // slowly decrease maxHeight to 0, starting from current height\r\n    const i = setInterval(() => {\r\n      if (this._isOpen || !this.innerElement) return clearInterval(i);\r\n\r\n      height -= delta;\r\n      this.renderer.setStyle(this.innerElement, 'max-height', `${height}px`);\r\n      delta *= ease;\r\n      ease *= EASE_ACCELERATION;\r\n\r\n      if (height <= 0) {\r\n        // after animation complete - remove child element\r\n        this.viewContainerRef.clear();\r\n        this.innerElement = null;\r\n        clearInterval(i);\r\n      }\r\n    }, 17);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TreeMobxAutorunDirective } from './mobx-angular/tree-mobx-autorun.directive';\r\n\r\nimport {\r\n  IActionHandler,\r\n  IActionMapping,\r\n  TREE_ACTIONS\r\n} from './models/tree-options.model';\r\nimport {\r\n  IAllowDragFn,\r\n  IAllowDropFn,\r\n  ITreeOptions,\r\n  ITreeState\r\n} from './defs/api';\r\nimport { KEYS } from './constants/keys';\r\nimport { TreeModel } from './models/tree.model';\r\nimport { TreeNode } from './models/tree-node.model';\r\nimport { TreeDraggedElement } from './models/tree-dragged-element.model';\r\nimport { TreeVirtualScroll } from './models/tree-virtual-scroll.model';\r\nimport { LoadingComponent } from './components/loading.component';\r\nimport { TreeComponent } from './components/tree.component';\r\nimport { TreeNodeComponent } from './components/tree-node.component';\r\nimport { TreeNodeContent } from './components/tree-node-content.component';\r\nimport { TreeNodeDropSlot } from './components/tree-node-drop-slot.component';\r\nimport { TreeNodeExpanderComponent } from './components/tree-node-expander.component';\r\nimport { TreeNodeChildrenComponent } from './components/tree-node-children.component';\r\nimport { TreeNodeCollectionComponent } from './components/tree-node-collection.component';\r\nimport { TreeNodeWrapperComponent } from './components/tree-node-wrapper.component';\r\nimport { TreeViewportComponent } from './components/tree-viewport.component';\r\nimport { TreeNodeCheckboxComponent } from './components/tree-node-checkbox.component';\r\nimport { TreeDropDirective } from './directives/tree-drop.directive';\r\nimport { TreeDragDirective } from './directives/tree-drag.directive';\r\nimport { TreeAnimateOpenDirective } from './directives/tree-animate-open.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TreeComponent,\r\n    TreeNodeComponent,\r\n    TreeNodeContent,\r\n    LoadingComponent,\r\n    TreeDropDirective,\r\n    TreeDragDirective,\r\n    TreeNodeExpanderComponent,\r\n    TreeNodeChildrenComponent,\r\n    TreeNodeDropSlot,\r\n    TreeNodeCollectionComponent,\r\n    TreeViewportComponent,\r\n    TreeNodeWrapperComponent,\r\n    TreeNodeCheckboxComponent,\r\n    TreeAnimateOpenDirective,\r\n    TreeMobxAutorunDirective\r\n  ],\r\n  exports: [\r\n    TreeComponent,\r\n    TreeNodeComponent,\r\n    TreeNodeContent,\r\n    LoadingComponent,\r\n    TreeDropDirective,\r\n    TreeDragDirective,\r\n    TreeNodeExpanderComponent,\r\n    TreeNodeChildrenComponent,\r\n    TreeNodeDropSlot,\r\n    TreeNodeCollectionComponent,\r\n    TreeViewportComponent,\r\n    TreeNodeWrapperComponent,\r\n    TreeNodeCheckboxComponent,\r\n    TreeAnimateOpenDirective,\r\n    TreeMobxAutorunDirective\r\n  ],\r\n  imports: [CommonModule],\r\n  providers: []\r\n})\r\nexport class TreeModule {}\r\n\r\nexport {\r\n  TreeModel,\r\n  TreeNode,\r\n  TreeDraggedElement,\r\n  TreeVirtualScroll,\r\n  ITreeOptions,\r\n  TREE_ACTIONS,\r\n  KEYS,\r\n  IActionMapping,\r\n  IActionHandler,\r\n  IAllowDropFn,\r\n  IAllowDragFn,\r\n  LoadingComponent,\r\n  TreeAnimateOpenDirective,\r\n  TreeComponent,\r\n  TreeNodeComponent,\r\n  TreeNodeWrapperComponent,\r\n  TreeNodeContent,\r\n  TreeDropDirective,\r\n  TreeDragDirective,\r\n  TreeNodeExpanderComponent,\r\n  TreeNodeChildrenComponent,\r\n  TreeNodeDropSlot,\r\n  TreeNodeCollectionComponent,\r\n  TreeViewportComponent,\r\n  TreeNodeCheckboxComponent,\r\n  ITreeState\r\n};\r\n","/*\r\n * Public API Surface of angular-tree-component\r\n */\r\n\r\nexport * from './lib/angular-tree-component.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {action as ɵb,actionInternal as ɵa,computed as ɵc,observable as ɵd} from './lib/mobx-angular/mobx-proxy';\nexport {TreeMobxAutorunDirective as ɵe} from './lib/mobx-angular/tree-mobx-autorun.directive';"]}
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/circlon-angular-tree-component.d.ts b/node_modules/@circlon/angular-tree-component/circlon-angular-tree-component.d.ts
index c1bac1b..7f7b823 100644
--- a/node_modules/@circlon/angular-tree-component/circlon-angular-tree-component.d.ts
+++ b/node_modules/@circlon/angular-tree-component/circlon-angular-tree-component.d.ts
@@ -4,3 +4,5 @@
 export * from './public-api';
 export { action as ɵb, actionInternal as ɵa, computed as ɵc, observable as ɵd } from './lib/mobx-angular/mobx-proxy';
 export { TreeMobxAutorunDirective as ɵe } from './lib/mobx-angular/tree-mobx-autorun.directive';
+
+//# sourceMappingURL=circlon-angular-tree-component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/circlon-angular-tree-component.d.ts.__ivy_ngcc_bak b/node_modules/@circlon/angular-tree-component/circlon-angular-tree-component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..c1bac1b
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/circlon-angular-tree-component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,6 @@
+/**
+ * Generated bundle index. Do not edit.
+ */
+export * from './public-api';
+export { action as ɵb, actionInternal as ɵa, computed as ɵc, observable as ɵd } from './lib/mobx-angular/mobx-proxy';
+export { TreeMobxAutorunDirective as ɵe } from './lib/mobx-angular/tree-mobx-autorun.directive';
diff --git a/node_modules/@circlon/angular-tree-component/circlon-angular-tree-component.d.ts.map b/node_modules/@circlon/angular-tree-component/circlon-angular-tree-component.d.ts.map
new file mode 100644
index 0000000..14dc5a9
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/circlon-angular-tree-component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"circlon-angular-tree-component.d.ts","sources":["circlon-angular-tree-component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\r\n * Generated bundle index. Do not edit.\r\n */\r\nexport * from './public-api';\r\nexport { action as ɵb, actionInternal as ɵa, computed as ɵc, observable as ɵd } from './lib/mobx-angular/mobx-proxy';\r\nexport { TreeMobxAutorunDirective as ɵe } from './lib/mobx-angular/tree-mobx-autorun.directive';\r\n"]}
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/css/angular-tree-component.css b/node_modules/@circlon/angular-tree-component/css/angular-tree-component.css
index 3bbf4b8..55e018c 100644
--- a/node_modules/@circlon/angular-tree-component/css/angular-tree-component.css
+++ b/node_modules/@circlon/angular-tree-component/css/angular-tree-component.css
@@ -29,7 +29,7 @@
 }
 .node-content-wrapper {
   display: inline-block;
-  padding: 2px 5px;
+  padding: 12px 15px;
   border-radius: 2px;
   transition: background-color .15s,box-shadow .15s;
 }
@@ -72,10 +72,10 @@ tree-root .angular-tree-component-rtl {
   direction: rtl;
 }
 tree-root .angular-tree-component-rtl .toggle-children-wrapper-collapsed .toggle-children {
-  transform: rotate(180deg) !important;
+  transform: rotate(360deg) !important;
 }
 tree-root .angular-tree-component-rtl .tree-children {
-  padding-right: 20px;
+  padding-right: 80px;
   padding-left: 0;
 }
 
diff --git a/node_modules/@circlon/angular-tree-component/lib/angular-tree-component.module.d.ts b/node_modules/@circlon/angular-tree-component/lib/angular-tree-component.module.d.ts
index a906fbc..3d0ab52 100644
--- a/node_modules/@circlon/angular-tree-component/lib/angular-tree-component.module.d.ts
+++ b/node_modules/@circlon/angular-tree-component/lib/angular-tree-component.module.d.ts
@@ -19,6 +19,28 @@ import { TreeNodeCheckboxComponent } from './components/tree-node-checkbox.compo
 import { TreeDropDirective } from './directives/tree-drop.directive';
 import { TreeDragDirective } from './directives/tree-drag.directive';
 import { TreeAnimateOpenDirective } from './directives/tree-animate-open.directive';
+import * as ɵngcc0 from '@angular/core';
+import * as ɵngcc1 from './components/tree.component';
+import * as ɵngcc2 from './components/tree-node.component';
+import * as ɵngcc3 from './components/tree-node-content.component';
+import * as ɵngcc4 from './components/loading.component';
+import * as ɵngcc5 from './directives/tree-drop.directive';
+import * as ɵngcc6 from './directives/tree-drag.directive';
+import * as ɵngcc7 from './components/tree-node-expander.component';
+import * as ɵngcc8 from './components/tree-node-children.component';
+import * as ɵngcc9 from './components/tree-node-drop-slot.component';
+import * as ɵngcc10 from './components/tree-node-collection.component';
+import * as ɵngcc11 from './components/tree-viewport.component';
+import * as ɵngcc12 from './components/tree-node-wrapper.component';
+import * as ɵngcc13 from './components/tree-node-checkbox.component';
+import * as ɵngcc14 from './directives/tree-animate-open.directive';
+import * as ɵngcc15 from './mobx-angular/tree-mobx-autorun.directive';
+import * as ɵngcc16 from '@angular/common';
 export declare class TreeModule {
+    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TreeModule, never>;
+    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<TreeModule, [typeof ɵngcc1.TreeComponent, typeof ɵngcc2.TreeNodeComponent, typeof ɵngcc3.TreeNodeContent, typeof ɵngcc4.LoadingComponent, typeof ɵngcc5.TreeDropDirective, typeof ɵngcc6.TreeDragDirective, typeof ɵngcc7.TreeNodeExpanderComponent, typeof ɵngcc8.TreeNodeChildrenComponent, typeof ɵngcc9.TreeNodeDropSlot, typeof ɵngcc10.TreeNodeCollectionComponent, typeof ɵngcc11.TreeViewportComponent, typeof ɵngcc12.TreeNodeWrapperComponent, typeof ɵngcc13.TreeNodeCheckboxComponent, typeof ɵngcc14.TreeAnimateOpenDirective, typeof ɵngcc15.TreeMobxAutorunDirective], [typeof ɵngcc16.CommonModule], [typeof ɵngcc1.TreeComponent, typeof ɵngcc2.TreeNodeComponent, typeof ɵngcc3.TreeNodeContent, typeof ɵngcc4.LoadingComponent, typeof ɵngcc5.TreeDropDirective, typeof ɵngcc6.TreeDragDirective, typeof ɵngcc7.TreeNodeExpanderComponent, typeof ɵngcc8.TreeNodeChildrenComponent, typeof ɵngcc9.TreeNodeDropSlot, typeof ɵngcc10.TreeNodeCollectionComponent, typeof ɵngcc11.TreeViewportComponent, typeof ɵngcc12.TreeNodeWrapperComponent, typeof ɵngcc13.TreeNodeCheckboxComponent, typeof ɵngcc14.TreeAnimateOpenDirective, typeof ɵngcc15.TreeMobxAutorunDirective]>;
+    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<TreeModule>;
 }
 export { TreeModel, TreeNode, TreeDraggedElement, TreeVirtualScroll, ITreeOptions, TREE_ACTIONS, KEYS, IActionMapping, IActionHandler, IAllowDropFn, IAllowDragFn, LoadingComponent, TreeAnimateOpenDirective, TreeComponent, TreeNodeComponent, TreeNodeWrapperComponent, TreeNodeContent, TreeDropDirective, TreeDragDirective, TreeNodeExpanderComponent, TreeNodeChildrenComponent, TreeNodeDropSlot, TreeNodeCollectionComponent, TreeViewportComponent, TreeNodeCheckboxComponent, ITreeState };
+
+//# sourceMappingURL=angular-tree-component.module.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/angular-tree-component.module.d.ts.__ivy_ngcc_bak b/node_modules/@circlon/angular-tree-component/lib/angular-tree-component.module.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..a906fbc
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/angular-tree-component.module.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,24 @@
+import { IActionHandler, IActionMapping, TREE_ACTIONS } from './models/tree-options.model';
+import { IAllowDragFn, IAllowDropFn, ITreeOptions, ITreeState } from './defs/api';
+import { KEYS } from './constants/keys';
+import { TreeModel } from './models/tree.model';
+import { TreeNode } from './models/tree-node.model';
+import { TreeDraggedElement } from './models/tree-dragged-element.model';
+import { TreeVirtualScroll } from './models/tree-virtual-scroll.model';
+import { LoadingComponent } from './components/loading.component';
+import { TreeComponent } from './components/tree.component';
+import { TreeNodeComponent } from './components/tree-node.component';
+import { TreeNodeContent } from './components/tree-node-content.component';
+import { TreeNodeDropSlot } from './components/tree-node-drop-slot.component';
+import { TreeNodeExpanderComponent } from './components/tree-node-expander.component';
+import { TreeNodeChildrenComponent } from './components/tree-node-children.component';
+import { TreeNodeCollectionComponent } from './components/tree-node-collection.component';
+import { TreeNodeWrapperComponent } from './components/tree-node-wrapper.component';
+import { TreeViewportComponent } from './components/tree-viewport.component';
+import { TreeNodeCheckboxComponent } from './components/tree-node-checkbox.component';
+import { TreeDropDirective } from './directives/tree-drop.directive';
+import { TreeDragDirective } from './directives/tree-drag.directive';
+import { TreeAnimateOpenDirective } from './directives/tree-animate-open.directive';
+export declare class TreeModule {
+}
+export { TreeModel, TreeNode, TreeDraggedElement, TreeVirtualScroll, ITreeOptions, TREE_ACTIONS, KEYS, IActionMapping, IActionHandler, IAllowDropFn, IAllowDragFn, LoadingComponent, TreeAnimateOpenDirective, TreeComponent, TreeNodeComponent, TreeNodeWrapperComponent, TreeNodeContent, TreeDropDirective, TreeDragDirective, TreeNodeExpanderComponent, TreeNodeChildrenComponent, TreeNodeDropSlot, TreeNodeCollectionComponent, TreeViewportComponent, TreeNodeCheckboxComponent, ITreeState };
diff --git a/node_modules/@circlon/angular-tree-component/lib/angular-tree-component.module.d.ts.map b/node_modules/@circlon/angular-tree-component/lib/angular-tree-component.module.d.ts.map
new file mode 100644
index 0000000..63132f6
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/angular-tree-component.module.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"angular-tree-component.module.d.ts","sources":["angular-tree-component.module.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;;;;AACA;AACA","sourcesContent":["import { IActionHandler, IActionMapping, TREE_ACTIONS } from './models/tree-options.model';\r\nimport { IAllowDragFn, IAllowDropFn, ITreeOptions, ITreeState } from './defs/api';\r\nimport { KEYS } from './constants/keys';\r\nimport { TreeModel } from './models/tree.model';\r\nimport { TreeNode } from './models/tree-node.model';\r\nimport { TreeDraggedElement } from './models/tree-dragged-element.model';\r\nimport { TreeVirtualScroll } from './models/tree-virtual-scroll.model';\r\nimport { LoadingComponent } from './components/loading.component';\r\nimport { TreeComponent } from './components/tree.component';\r\nimport { TreeNodeComponent } from './components/tree-node.component';\r\nimport { TreeNodeContent } from './components/tree-node-content.component';\r\nimport { TreeNodeDropSlot } from './components/tree-node-drop-slot.component';\r\nimport { TreeNodeExpanderComponent } from './components/tree-node-expander.component';\r\nimport { TreeNodeChildrenComponent } from './components/tree-node-children.component';\r\nimport { TreeNodeCollectionComponent } from './components/tree-node-collection.component';\r\nimport { TreeNodeWrapperComponent } from './components/tree-node-wrapper.component';\r\nimport { TreeViewportComponent } from './components/tree-viewport.component';\r\nimport { TreeNodeCheckboxComponent } from './components/tree-node-checkbox.component';\r\nimport { TreeDropDirective } from './directives/tree-drop.directive';\r\nimport { TreeDragDirective } from './directives/tree-drag.directive';\r\nimport { TreeAnimateOpenDirective } from './directives/tree-animate-open.directive';\r\nexport declare class TreeModule {\r\n}\r\nexport { TreeModel, TreeNode, TreeDraggedElement, TreeVirtualScroll, ITreeOptions, TREE_ACTIONS, KEYS, IActionMapping, IActionHandler, IAllowDropFn, IAllowDragFn, LoadingComponent, TreeAnimateOpenDirective, TreeComponent, TreeNodeComponent, TreeNodeWrapperComponent, TreeNodeContent, TreeDropDirective, TreeDragDirective, TreeNodeExpanderComponent, TreeNodeChildrenComponent, TreeNodeDropSlot, TreeNodeCollectionComponent, TreeViewportComponent, TreeNodeCheckboxComponent, ITreeState };\r\n"]}
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/loading.component.d.ts b/node_modules/@circlon/angular-tree-component/lib/components/loading.component.d.ts
index 6d93dc0..65c9cf4 100644
--- a/node_modules/@circlon/angular-tree-component/lib/components/loading.component.d.ts
+++ b/node_modules/@circlon/angular-tree-component/lib/components/loading.component.d.ts
@@ -1,6 +1,11 @@
 import { TemplateRef } from '@angular/core';
 import { TreeNode } from '../models/tree-node.model';
+import * as ɵngcc0 from '@angular/core';
 export declare class LoadingComponent {
     template: TemplateRef<any>;
     node: TreeNode;
+    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<LoadingComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<LoadingComponent, "tree-loading-component", never, { "template": "template"; "node": "node"; }, {}, never, never, false>;
 }
+
+//# sourceMappingURL=loading.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/loading.component.d.ts.__ivy_ngcc_bak b/node_modules/@circlon/angular-tree-component/lib/components/loading.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..6d93dc0
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/loading.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,6 @@
+import { TemplateRef } from '@angular/core';
+import { TreeNode } from '../models/tree-node.model';
+export declare class LoadingComponent {
+    template: TemplateRef<any>;
+    node: TreeNode;
+}
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/loading.component.d.ts.map b/node_modules/@circlon/angular-tree-component/lib/components/loading.component.d.ts.map
new file mode 100644
index 0000000..48959b5
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/loading.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"loading.component.d.ts","sources":["loading.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;;;AACA","sourcesContent":["import { TemplateRef } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\nexport declare class LoadingComponent {\r\n    template: TemplateRef<any>;\r\n    node: TreeNode;\r\n}\r\n"]}
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-checkbox.component.d.ts b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-checkbox.component.d.ts
index 5260ba1..6375e9b 100644
--- a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-checkbox.component.d.ts
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-checkbox.component.d.ts
@@ -1,4 +1,9 @@
 import { TreeNode } from '../models/tree-node.model';
+import * as ɵngcc0 from '@angular/core';
 export declare class TreeNodeCheckboxComponent {
     node: TreeNode;
+    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TreeNodeCheckboxComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TreeNodeCheckboxComponent, "tree-node-checkbox", never, { "node": "node"; }, {}, never, never, false>;
 }
+
+//# sourceMappingURL=tree-node-checkbox.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-checkbox.component.d.ts.__ivy_ngcc_bak b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-checkbox.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..5260ba1
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-checkbox.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,4 @@
+import { TreeNode } from '../models/tree-node.model';
+export declare class TreeNodeCheckboxComponent {
+    node: TreeNode;
+}
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-checkbox.component.d.ts.map b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-checkbox.component.d.ts.map
new file mode 100644
index 0000000..e28f8a9
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-checkbox.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree-node-checkbox.component.d.ts","sources":["tree-node-checkbox.component.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;;;AACA","sourcesContent":["import { TreeNode } from '../models/tree-node.model';\r\nexport declare class TreeNodeCheckboxComponent {\r\n    node: TreeNode;\r\n}\r\n"]}
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-children.component.d.ts b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-children.component.d.ts
index d19197a..17cced8 100644
--- a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-children.component.d.ts
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-children.component.d.ts
@@ -1,5 +1,10 @@
 import { TreeNode } from '../models/tree-node.model';
+import * as ɵngcc0 from '@angular/core';
 export declare class TreeNodeChildrenComponent {
     node: TreeNode;
     templates: any;
+    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TreeNodeChildrenComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TreeNodeChildrenComponent, "tree-node-children", never, { "node": "node"; "templates": "templates"; }, {}, never, never, false>;
 }
+
+//# sourceMappingURL=tree-node-children.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-children.component.d.ts.__ivy_ngcc_bak b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-children.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..d19197a
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-children.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,5 @@
+import { TreeNode } from '../models/tree-node.model';
+export declare class TreeNodeChildrenComponent {
+    node: TreeNode;
+    templates: any;
+}
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-children.component.d.ts.map b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-children.component.d.ts.map
new file mode 100644
index 0000000..61c74f0
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-children.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree-node-children.component.d.ts","sources":["tree-node-children.component.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;;;AACA","sourcesContent":["import { TreeNode } from '../models/tree-node.model';\r\nexport declare class TreeNodeChildrenComponent {\r\n    node: TreeNode;\r\n    templates: any;\r\n}\r\n"]}
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-collection.component.d.ts b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-collection.component.d.ts
index 05d55b5..31ed834 100644
--- a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-collection.component.d.ts
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-collection.component.d.ts
@@ -1,6 +1,7 @@
 import { OnInit, OnDestroy } from '@angular/core';
 import { TreeNode } from '../models/tree-node.model';
 import { TreeModel } from '../models/tree.model';
+import * as ɵngcc0 from '@angular/core';
 export declare class TreeNodeCollectionComponent implements OnInit, OnDestroy {
     get nodes(): any;
     set nodes(nodes: any);
@@ -15,4 +16,8 @@ export declare class TreeNodeCollectionComponent implements OnInit, OnDestroy {
     ngOnInit(): void;
     ngOnDestroy(): void;
     trackNode(index: any, node: any): any;
+    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TreeNodeCollectionComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TreeNodeCollectionComponent, "tree-node-collection", never, { "nodes": "nodes"; "treeModel": "treeModel"; "templates": "templates"; }, {}, never, never, false>;
 }
+
+//# sourceMappingURL=tree-node-collection.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-collection.component.d.ts.__ivy_ngcc_bak b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-collection.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..05d55b5
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-collection.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,18 @@
+import { OnInit, OnDestroy } from '@angular/core';
+import { TreeNode } from '../models/tree-node.model';
+import { TreeModel } from '../models/tree.model';
+export declare class TreeNodeCollectionComponent implements OnInit, OnDestroy {
+    get nodes(): any;
+    set nodes(nodes: any);
+    treeModel: TreeModel;
+    _nodes: any;
+    private virtualScroll;
+    templates: any;
+    viewportNodes: TreeNode[];
+    get marginTop(): string;
+    _dispose: any[];
+    setNodes(nodes: any): void;
+    ngOnInit(): void;
+    ngOnDestroy(): void;
+    trackNode(index: any, node: any): any;
+}
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-collection.component.d.ts.map b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-collection.component.d.ts.map
new file mode 100644
index 0000000..270439a
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-collection.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree-node-collection.component.d.ts","sources":["tree-node-collection.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit, OnDestroy } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\nimport { TreeModel } from '../models/tree.model';\r\nexport declare class TreeNodeCollectionComponent implements OnInit, OnDestroy {\r\n    get nodes(): any;\r\n    set nodes(nodes: any);\r\n    treeModel: TreeModel;\r\n    _nodes: any;\r\n    private virtualScroll;\r\n    templates: any;\r\n    viewportNodes: TreeNode[];\r\n    get marginTop(): string;\r\n    _dispose: any[];\r\n    setNodes(nodes: any): void;\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    trackNode(index: any, node: any): any;\r\n}\r\n"]}
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-content.component.d.ts b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-content.component.d.ts
index 2eda43f..b5d706c 100644
--- a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-content.component.d.ts
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-content.component.d.ts
@@ -1,7 +1,12 @@
 import { TemplateRef } from '@angular/core';
 import { TreeNode } from '../models/tree-node.model';
+import * as ɵngcc0 from '@angular/core';
 export declare class TreeNodeContent {
     node: TreeNode;
     index: number;
     template: TemplateRef<any>;
+    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TreeNodeContent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TreeNodeContent, "tree-node-content", never, { "node": "node"; "index": "index"; "template": "template"; }, {}, never, never, false>;
 }
+
+//# sourceMappingURL=tree-node-content.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-content.component.d.ts.__ivy_ngcc_bak b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-content.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..2eda43f
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-content.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,7 @@
+import { TemplateRef } from '@angular/core';
+import { TreeNode } from '../models/tree-node.model';
+export declare class TreeNodeContent {
+    node: TreeNode;
+    index: number;
+    template: TemplateRef<any>;
+}
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-content.component.d.ts.map b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-content.component.d.ts.map
new file mode 100644
index 0000000..a57c1b8
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-content.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree-node-content.component.d.ts","sources":["tree-node-content.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { TemplateRef } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\nexport declare class TreeNodeContent {\r\n    node: TreeNode;\r\n    index: number;\r\n    template: TemplateRef<any>;\r\n}\r\n"]}
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-drop-slot.component.d.ts b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-drop-slot.component.d.ts
index 179aaf8..f3e92a5 100644
--- a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-drop-slot.component.d.ts
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-drop-slot.component.d.ts
@@ -1,7 +1,12 @@
 import { TreeNode } from '../models/tree-node.model';
+import * as ɵngcc0 from '@angular/core';
 export declare class TreeNodeDropSlot {
     node: TreeNode;
     dropIndex: number;
     onDrop($event: any): void;
     allowDrop(element: any, $event: any): boolean;
+    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TreeNodeDropSlot, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TreeNodeDropSlot, "TreeNodeDropSlot, tree-node-drop-slot", never, { "node": "node"; "dropIndex": "dropIndex"; }, {}, never, never, false>;
 }
+
+//# sourceMappingURL=tree-node-drop-slot.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-drop-slot.component.d.ts.__ivy_ngcc_bak b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-drop-slot.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..179aaf8
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-drop-slot.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,7 @@
+import { TreeNode } from '../models/tree-node.model';
+export declare class TreeNodeDropSlot {
+    node: TreeNode;
+    dropIndex: number;
+    onDrop($event: any): void;
+    allowDrop(element: any, $event: any): boolean;
+}
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-drop-slot.component.d.ts.map b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-drop-slot.component.d.ts.map
new file mode 100644
index 0000000..675a263
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-drop-slot.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree-node-drop-slot.component.d.ts","sources":["tree-node-drop-slot.component.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { TreeNode } from '../models/tree-node.model';\r\nexport declare class TreeNodeDropSlot {\r\n    node: TreeNode;\r\n    dropIndex: number;\r\n    onDrop($event: any): void;\r\n    allowDrop(element: any, $event: any): boolean;\r\n}\r\n"]}
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-expander.component.d.ts b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-expander.component.d.ts
index a58054a..5694c34 100644
--- a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-expander.component.d.ts
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-expander.component.d.ts
@@ -1,4 +1,9 @@
 import { TreeNode } from '../models/tree-node.model';
+import * as ɵngcc0 from '@angular/core';
 export declare class TreeNodeExpanderComponent {
     node: TreeNode;
+    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TreeNodeExpanderComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TreeNodeExpanderComponent, "tree-node-expander", never, { "node": "node"; }, {}, never, never, false>;
 }
+
+//# sourceMappingURL=tree-node-expander.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-expander.component.d.ts.__ivy_ngcc_bak b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-expander.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..a58054a
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-expander.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,4 @@
+import { TreeNode } from '../models/tree-node.model';
+export declare class TreeNodeExpanderComponent {
+    node: TreeNode;
+}
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-expander.component.d.ts.map b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-expander.component.d.ts.map
new file mode 100644
index 0000000..915a13d
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-expander.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree-node-expander.component.d.ts","sources":["tree-node-expander.component.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;;;AACA","sourcesContent":["import { TreeNode } from '../models/tree-node.model';\r\nexport declare class TreeNodeExpanderComponent {\r\n    node: TreeNode;\r\n}\r\n"]}
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-wrapper.component.d.ts b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-wrapper.component.d.ts
index 23cc2b5..edbaf46 100644
--- a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-wrapper.component.d.ts
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-wrapper.component.d.ts
@@ -1,6 +1,11 @@
 import { TreeNode } from '../models/tree-node.model';
+import * as ɵngcc0 from '@angular/core';
 export declare class TreeNodeWrapperComponent {
     node: TreeNode;
     index: number;
     templates: any;
+    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TreeNodeWrapperComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TreeNodeWrapperComponent, "tree-node-wrapper", never, { "node": "node"; "index": "index"; "templates": "templates"; }, {}, never, never, false>;
 }
+
+//# sourceMappingURL=tree-node-wrapper.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-wrapper.component.d.ts.__ivy_ngcc_bak b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-wrapper.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..23cc2b5
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-wrapper.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,6 @@
+import { TreeNode } from '../models/tree-node.model';
+export declare class TreeNodeWrapperComponent {
+    node: TreeNode;
+    index: number;
+    templates: any;
+}
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node-wrapper.component.d.ts.map b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-wrapper.component.d.ts.map
new file mode 100644
index 0000000..1f0c92c
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node-wrapper.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree-node-wrapper.component.d.ts","sources":["tree-node-wrapper.component.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { TreeNode } from '../models/tree-node.model';\r\nexport declare class TreeNodeWrapperComponent {\r\n    node: TreeNode;\r\n    index: number;\r\n    templates: any;\r\n}\r\n"]}
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node.component.d.ts b/node_modules/@circlon/angular-tree-component/lib/components/tree-node.component.d.ts
index 7df1e1e..da58320 100644
--- a/node_modules/@circlon/angular-tree-component/lib/components/tree-node.component.d.ts
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node.component.d.ts
@@ -1,6 +1,11 @@
 import { TreeNode } from '../models/tree-node.model';
+import * as ɵngcc0 from '@angular/core';
 export declare class TreeNodeComponent {
     node: TreeNode;
     index: number;
     templates: any;
+    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TreeNodeComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TreeNodeComponent, "TreeNode, tree-node", never, { "node": "node"; "index": "index"; "templates": "templates"; }, {}, never, never, false>;
 }
+
+//# sourceMappingURL=tree-node.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node.component.d.ts.__ivy_ngcc_bak b/node_modules/@circlon/angular-tree-component/lib/components/tree-node.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..7df1e1e
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,6 @@
+import { TreeNode } from '../models/tree-node.model';
+export declare class TreeNodeComponent {
+    node: TreeNode;
+    index: number;
+    templates: any;
+}
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-node.component.d.ts.map b/node_modules/@circlon/angular-tree-component/lib/components/tree-node.component.d.ts.map
new file mode 100644
index 0000000..fd19c53
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-node.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree-node.component.d.ts","sources":["tree-node.component.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { TreeNode } from '../models/tree-node.model';\r\nexport declare class TreeNodeComponent {\r\n    node: TreeNode;\r\n    index: number;\r\n    templates: any;\r\n}\r\n"]}
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-viewport.component.d.ts b/node_modules/@circlon/angular-tree-component/lib/components/tree-viewport.component.d.ts
index eff85b8..aee8133 100644
--- a/node_modules/@circlon/angular-tree-component/lib/components/tree-viewport.component.d.ts
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-viewport.component.d.ts
@@ -1,5 +1,6 @@
 import { ElementRef, AfterViewInit, OnInit, OnDestroy } from '@angular/core';
 import { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';
+import * as ɵngcc0 from '@angular/core';
 export declare class TreeViewportComponent implements AfterViewInit, OnInit, OnDestroy {
     private elementRef;
     virtualScroll: TreeVirtualScroll;
@@ -11,4 +12,8 @@ export declare class TreeViewportComponent implements AfterViewInit, OnInit, OnD
     ngOnDestroy(): void;
     getTotalHeight(): string;
     private throttle;
+    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TreeViewportComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TreeViewportComponent, "tree-viewport", never, {}, {}, never, ["*"], false>;
 }
+
+//# sourceMappingURL=tree-viewport.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-viewport.component.d.ts.__ivy_ngcc_bak b/node_modules/@circlon/angular-tree-component/lib/components/tree-viewport.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..eff85b8
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-viewport.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,14 @@
+import { ElementRef, AfterViewInit, OnInit, OnDestroy } from '@angular/core';
+import { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';
+export declare class TreeViewportComponent implements AfterViewInit, OnInit, OnDestroy {
+    private elementRef;
+    virtualScroll: TreeVirtualScroll;
+    setViewport: () => void;
+    private readonly scrollEventHandler;
+    constructor(elementRef: ElementRef, virtualScroll: TreeVirtualScroll);
+    ngOnInit(): void;
+    ngAfterViewInit(): void;
+    ngOnDestroy(): void;
+    getTotalHeight(): string;
+    private throttle;
+}
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree-viewport.component.d.ts.map b/node_modules/@circlon/angular-tree-component/lib/components/tree-viewport.component.d.ts.map
new file mode 100644
index 0000000..82ffe59
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree-viewport.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree-viewport.component.d.ts","sources":["tree-viewport.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, AfterViewInit, OnInit, OnDestroy } from '@angular/core';\r\nimport { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';\r\nexport declare class TreeViewportComponent implements AfterViewInit, OnInit, OnDestroy {\r\n    private elementRef;\r\n    virtualScroll: TreeVirtualScroll;\r\n    setViewport: () => void;\r\n    private readonly scrollEventHandler;\r\n    constructor(elementRef: ElementRef, virtualScroll: TreeVirtualScroll);\r\n    ngOnInit(): void;\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    getTotalHeight(): string;\r\n    private throttle;\r\n}\r\n"]}
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree.component.d.ts b/node_modules/@circlon/angular-tree-component/lib/components/tree.component.d.ts
index ce9c5bb..090b481 100644
--- a/node_modules/@circlon/angular-tree-component/lib/components/tree.component.d.ts
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree.component.d.ts
@@ -4,6 +4,7 @@ import { TreeDraggedElement } from '../models/tree-dragged-element.model';
 import { TreeOptions } from '../models/tree-options.model';
 import { ITreeOptions } from '../defs/api';
 import { TreeViewportComponent } from './tree-viewport.component';
+import * as ɵngcc0 from '@angular/core';
 export declare class TreeComponent implements OnChanges {
     treeModel: TreeModel;
     treeDraggedElement: TreeDraggedElement;
@@ -41,4 +42,8 @@ export declare class TreeComponent implements OnChanges {
     ngOnChanges(changes: any): void;
     sizeChanged(): void;
     private pick;
+    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TreeComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TreeComponent, "Tree, tree-root", never, { "nodes": "nodes"; "options": "options"; "focused": "focused"; "state": "state"; }, { "toggleExpanded": "toggleExpanded"; "activate": "activate"; "deactivate": "deactivate"; "nodeActivate": "nodeActivate"; "nodeDeactivate": "nodeDeactivate"; "select": "select"; "deselect": "deselect"; "focus": "focus"; "blur": "blur"; "updateData": "updateData"; "initialized": "initialized"; "moveNode": "moveNode"; "copyNode": "copyNode"; "loadNodeChildren": "loadNodeChildren"; "changeFilter": "changeFilter"; "event": "event"; "stateChange": "stateChange"; }, ["loadingTemplate", "treeNodeTemplate", "treeNodeWrapperTemplate", "treeNodeFullTemplate"], never, false>;
 }
+
+//# sourceMappingURL=tree.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree.component.d.ts.__ivy_ngcc_bak b/node_modules/@circlon/angular-tree-component/lib/components/tree.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..ce9c5bb
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,44 @@
+import { OnChanges, TemplateRef } from '@angular/core';
+import { TreeModel } from '../models/tree.model';
+import { TreeDraggedElement } from '../models/tree-dragged-element.model';
+import { TreeOptions } from '../models/tree-options.model';
+import { ITreeOptions } from '../defs/api';
+import { TreeViewportComponent } from './tree-viewport.component';
+export declare class TreeComponent implements OnChanges {
+    treeModel: TreeModel;
+    treeDraggedElement: TreeDraggedElement;
+    _nodes: any[];
+    _options: TreeOptions;
+    loadingTemplate: TemplateRef<any>;
+    treeNodeTemplate: TemplateRef<any>;
+    treeNodeWrapperTemplate: TemplateRef<any>;
+    treeNodeFullTemplate: TemplateRef<any>;
+    viewportComponent: TreeViewportComponent;
+    set nodes(nodes: any[]);
+    set options(options: ITreeOptions);
+    set focused(value: boolean);
+    set state(state: any);
+    toggleExpanded: any;
+    activate: any;
+    deactivate: any;
+    nodeActivate: any;
+    nodeDeactivate: any;
+    select: any;
+    deselect: any;
+    focus: any;
+    blur: any;
+    updateData: any;
+    initialized: any;
+    moveNode: any;
+    copyNode: any;
+    loadNodeChildren: any;
+    changeFilter: any;
+    event: any;
+    stateChange: any;
+    constructor(treeModel: TreeModel, treeDraggedElement: TreeDraggedElement);
+    onKeydown($event: any): void;
+    onMousedown($event: any): void;
+    ngOnChanges(changes: any): void;
+    sizeChanged(): void;
+    private pick;
+}
diff --git a/node_modules/@circlon/angular-tree-component/lib/components/tree.component.d.ts.map b/node_modules/@circlon/angular-tree-component/lib/components/tree.component.d.ts.map
new file mode 100644
index 0000000..6ecdf96
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/components/tree.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree.component.d.ts","sources":["tree.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnChanges, TemplateRef } from '@angular/core';\r\nimport { TreeModel } from '../models/tree.model';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\nimport { TreeOptions } from '../models/tree-options.model';\r\nimport { ITreeOptions } from '../defs/api';\r\nimport { TreeViewportComponent } from './tree-viewport.component';\r\nexport declare class TreeComponent implements OnChanges {\r\n    treeModel: TreeModel;\r\n    treeDraggedElement: TreeDraggedElement;\r\n    _nodes: any[];\r\n    _options: TreeOptions;\r\n    loadingTemplate: TemplateRef<any>;\r\n    treeNodeTemplate: TemplateRef<any>;\r\n    treeNodeWrapperTemplate: TemplateRef<any>;\r\n    treeNodeFullTemplate: TemplateRef<any>;\r\n    viewportComponent: TreeViewportComponent;\r\n    set nodes(nodes: any[]);\r\n    set options(options: ITreeOptions);\r\n    set focused(value: boolean);\r\n    set state(state: any);\r\n    toggleExpanded: any;\r\n    activate: any;\r\n    deactivate: any;\r\n    nodeActivate: any;\r\n    nodeDeactivate: any;\r\n    select: any;\r\n    deselect: any;\r\n    focus: any;\r\n    blur: any;\r\n    updateData: any;\r\n    initialized: any;\r\n    moveNode: any;\r\n    copyNode: any;\r\n    loadNodeChildren: any;\r\n    changeFilter: any;\r\n    event: any;\r\n    stateChange: any;\r\n    constructor(treeModel: TreeModel, treeDraggedElement: TreeDraggedElement);\r\n    onKeydown($event: any): void;\r\n    onMousedown($event: any): void;\r\n    ngOnChanges(changes: any): void;\r\n    sizeChanged(): void;\r\n    private pick;\r\n}\r\n"]}
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/directives/tree-animate-open.directive.d.ts b/node_modules/@circlon/angular-tree-component/lib/directives/tree-animate-open.directive.d.ts
index 051f53b..84c51af 100644
--- a/node_modules/@circlon/angular-tree-component/lib/directives/tree-animate-open.directive.d.ts
+++ b/node_modules/@circlon/angular-tree-component/lib/directives/tree-animate-open.directive.d.ts
@@ -1,4 +1,5 @@
 import { Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';
+import * as ɵngcc0 from '@angular/core';
 export declare class TreeAnimateOpenDirective {
     private renderer;
     private templateRef;
@@ -14,4 +15,8 @@ export declare class TreeAnimateOpenDirective {
     private _hide;
     private _animateOpen;
     private _animateClose;
+    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TreeAnimateOpenDirective, never>;
+    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<TreeAnimateOpenDirective, "[treeAnimateOpen]", never, { "isOpen": "treeAnimateOpen"; "animateSpeed": "treeAnimateOpenSpeed"; "animateAcceleration": "treeAnimateOpenAcceleration"; "isEnabled": "treeAnimateOpenEnabled"; }, {}, never, never, false>;
 }
+
+//# sourceMappingURL=tree-animate-open.directive.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/directives/tree-animate-open.directive.d.ts.__ivy_ngcc_bak b/node_modules/@circlon/angular-tree-component/lib/directives/tree-animate-open.directive.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..051f53b
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/directives/tree-animate-open.directive.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,17 @@
+import { Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';
+export declare class TreeAnimateOpenDirective {
+    private renderer;
+    private templateRef;
+    private viewContainerRef;
+    private _isOpen;
+    animateSpeed: number;
+    animateAcceleration: number;
+    isEnabled: boolean;
+    set isOpen(value: boolean);
+    private innerElement;
+    constructor(renderer: Renderer2, templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef);
+    private _show;
+    private _hide;
+    private _animateOpen;
+    private _animateClose;
+}
diff --git a/node_modules/@circlon/angular-tree-component/lib/directives/tree-animate-open.directive.d.ts.map b/node_modules/@circlon/angular-tree-component/lib/directives/tree-animate-open.directive.d.ts.map
new file mode 100644
index 0000000..e95efa7
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/directives/tree-animate-open.directive.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree-animate-open.directive.d.ts","sources":["tree-animate-open.directive.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\r\nexport declare class TreeAnimateOpenDirective {\r\n    private renderer;\r\n    private templateRef;\r\n    private viewContainerRef;\r\n    private _isOpen;\r\n    animateSpeed: number;\r\n    animateAcceleration: number;\r\n    isEnabled: boolean;\r\n    set isOpen(value: boolean);\r\n    private innerElement;\r\n    constructor(renderer: Renderer2, templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef);\r\n    private _show;\r\n    private _hide;\r\n    private _animateOpen;\r\n    private _animateClose;\r\n}\r\n"]}
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/directives/tree-drag.directive.d.ts b/node_modules/@circlon/angular-tree-component/lib/directives/tree-drag.directive.d.ts
index be8bdb9..10ab605 100644
--- a/node_modules/@circlon/angular-tree-component/lib/directives/tree-drag.directive.d.ts
+++ b/node_modules/@circlon/angular-tree-component/lib/directives/tree-drag.directive.d.ts
@@ -1,5 +1,6 @@
 import { AfterViewInit, DoCheck, ElementRef, NgZone, OnDestroy, Renderer2 } from '@angular/core';
 import { TreeDraggedElement } from '../models/tree-dragged-element.model';
+import * as ɵngcc0 from '@angular/core';
 export declare class TreeDragDirective implements AfterViewInit, DoCheck, OnDestroy {
     private el;
     private renderer;
@@ -15,4 +16,8 @@ export declare class TreeDragDirective implements AfterViewInit, DoCheck, OnDest
     onDragStart(ev: any): void;
     onDrag(ev: any): void;
     onDragEnd(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TreeDragDirective, never>;
+    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<TreeDragDirective, "[treeDrag]", never, { "draggedElement": "treeDrag"; "treeDragEnabled": "treeDragEnabled"; }, {}, never, never, false>;
 }
+
+//# sourceMappingURL=tree-drag.directive.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/directives/tree-drag.directive.d.ts.__ivy_ngcc_bak b/node_modules/@circlon/angular-tree-component/lib/directives/tree-drag.directive.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..be8bdb9
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/directives/tree-drag.directive.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,18 @@
+import { AfterViewInit, DoCheck, ElementRef, NgZone, OnDestroy, Renderer2 } from '@angular/core';
+import { TreeDraggedElement } from '../models/tree-dragged-element.model';
+export declare class TreeDragDirective implements AfterViewInit, DoCheck, OnDestroy {
+    private el;
+    private renderer;
+    private treeDraggedElement;
+    private ngZone;
+    draggedElement: any;
+    treeDragEnabled: any;
+    private readonly dragEventHandler;
+    constructor(el: ElementRef, renderer: Renderer2, treeDraggedElement: TreeDraggedElement, ngZone: NgZone);
+    ngAfterViewInit(): void;
+    ngDoCheck(): void;
+    ngOnDestroy(): void;
+    onDragStart(ev: any): void;
+    onDrag(ev: any): void;
+    onDragEnd(): void;
+}
diff --git a/node_modules/@circlon/angular-tree-component/lib/directives/tree-drag.directive.d.ts.map b/node_modules/@circlon/angular-tree-component/lib/directives/tree-drag.directive.d.ts.map
new file mode 100644
index 0000000..9134adb
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/directives/tree-drag.directive.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree-drag.directive.d.ts","sources":["tree-drag.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, DoCheck, ElementRef, NgZone, OnDestroy, Renderer2 } from '@angular/core';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\nexport declare class TreeDragDirective implements AfterViewInit, DoCheck, OnDestroy {\r\n    private el;\r\n    private renderer;\r\n    private treeDraggedElement;\r\n    private ngZone;\r\n    draggedElement: any;\r\n    treeDragEnabled: any;\r\n    private readonly dragEventHandler;\r\n    constructor(el: ElementRef, renderer: Renderer2, treeDraggedElement: TreeDraggedElement, ngZone: NgZone);\r\n    ngAfterViewInit(): void;\r\n    ngDoCheck(): void;\r\n    ngOnDestroy(): void;\r\n    onDragStart(ev: any): void;\r\n    onDrag(ev: any): void;\r\n    onDragEnd(): void;\r\n}\r\n"]}
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/directives/tree-drop.directive.d.ts b/node_modules/@circlon/angular-tree-component/lib/directives/tree-drop.directive.d.ts
index 416e35b..573f098 100644
--- a/node_modules/@circlon/angular-tree-component/lib/directives/tree-drop.directive.d.ts
+++ b/node_modules/@circlon/angular-tree-component/lib/directives/tree-drop.directive.d.ts
@@ -1,5 +1,6 @@
 import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy, Renderer2 } from '@angular/core';
 import { TreeDraggedElement } from '../models/tree-dragged-element.model';
+import * as ɵngcc0 from '@angular/core';
 export declare class TreeDropDirective implements AfterViewInit, OnDestroy {
     private el;
     private renderer;
@@ -27,4 +28,8 @@ export declare class TreeDropDirective implements AfterViewInit, OnDestroy {
     private removeClass;
     private addDisabledClass;
     private removeDisabledClass;
+    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TreeDropDirective, never>;
+    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<TreeDropDirective, "[treeDrop]", never, { "allowDragoverStyling": "allowDragoverStyling"; "treeAllowDrop": "treeAllowDrop"; }, { "onDropCallback": "treeDrop"; "onDragOverCallback": "treeDropDragOver"; "onDragLeaveCallback": "treeDropDragLeave"; "onDragEnterCallback": "treeDropDragEnter"; }, never, never, false>;
 }
+
+//# sourceMappingURL=tree-drop.directive.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/directives/tree-drop.directive.d.ts.__ivy_ngcc_bak b/node_modules/@circlon/angular-tree-component/lib/directives/tree-drop.directive.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..416e35b
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/directives/tree-drop.directive.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,30 @@
+import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy, Renderer2 } from '@angular/core';
+import { TreeDraggedElement } from '../models/tree-dragged-element.model';
+export declare class TreeDropDirective implements AfterViewInit, OnDestroy {
+    private el;
+    private renderer;
+    private treeDraggedElement;
+    private ngZone;
+    allowDragoverStyling: boolean;
+    onDropCallback: EventEmitter<any>;
+    onDragOverCallback: EventEmitter<any>;
+    onDragLeaveCallback: EventEmitter<any>;
+    onDragEnterCallback: EventEmitter<any>;
+    private readonly dragOverEventHandler;
+    private readonly dragEnterEventHandler;
+    private readonly dragLeaveEventHandler;
+    private _allowDrop;
+    set treeAllowDrop(allowDrop: any);
+    allowDrop($event: any): boolean;
+    constructor(el: ElementRef, renderer: Renderer2, treeDraggedElement: TreeDraggedElement, ngZone: NgZone);
+    ngAfterViewInit(): void;
+    ngOnDestroy(): void;
+    onDragOver($event: any): void;
+    onDragEnter($event: any): void;
+    onDragLeave($event: any): void;
+    onDrop($event: any): void;
+    private addClass;
+    private removeClass;
+    private addDisabledClass;
+    private removeDisabledClass;
+}
diff --git a/node_modules/@circlon/angular-tree-component/lib/directives/tree-drop.directive.d.ts.map b/node_modules/@circlon/angular-tree-component/lib/directives/tree-drop.directive.d.ts.map
new file mode 100644
index 0000000..639cc39
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/directives/tree-drop.directive.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree-drop.directive.d.ts","sources":["tree-drop.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy, Renderer2 } from '@angular/core';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\nexport declare class TreeDropDirective implements AfterViewInit, OnDestroy {\r\n    private el;\r\n    private renderer;\r\n    private treeDraggedElement;\r\n    private ngZone;\r\n    allowDragoverStyling: boolean;\r\n    onDropCallback: EventEmitter<any>;\r\n    onDragOverCallback: EventEmitter<any>;\r\n    onDragLeaveCallback: EventEmitter<any>;\r\n    onDragEnterCallback: EventEmitter<any>;\r\n    private readonly dragOverEventHandler;\r\n    private readonly dragEnterEventHandler;\r\n    private readonly dragLeaveEventHandler;\r\n    private _allowDrop;\r\n    set treeAllowDrop(allowDrop: any);\r\n    allowDrop($event: any): boolean;\r\n    constructor(el: ElementRef, renderer: Renderer2, treeDraggedElement: TreeDraggedElement, ngZone: NgZone);\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    onDragOver($event: any): void;\r\n    onDragEnter($event: any): void;\r\n    onDragLeave($event: any): void;\r\n    onDrop($event: any): void;\r\n    private addClass;\r\n    private removeClass;\r\n    private addDisabledClass;\r\n    private removeDisabledClass;\r\n}\r\n"]}
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/mobx-angular/tree-mobx-autorun.directive.d.ts b/node_modules/@circlon/angular-tree-component/lib/mobx-angular/tree-mobx-autorun.directive.d.ts
index db69c51..5888c84 100644
--- a/node_modules/@circlon/angular-tree-component/lib/mobx-angular/tree-mobx-autorun.directive.d.ts
+++ b/node_modules/@circlon/angular-tree-component/lib/mobx-angular/tree-mobx-autorun.directive.d.ts
@@ -1,4 +1,5 @@
 import { ViewContainerRef, TemplateRef, OnInit, OnDestroy, EmbeddedViewRef } from '@angular/core';
+import * as ɵngcc0 from '@angular/core';
 export declare class TreeMobxAutorunDirective implements OnInit, OnDestroy {
     protected templateRef: TemplateRef<any>;
     protected viewContainer: ViewContainerRef;
@@ -11,4 +12,8 @@ export declare class TreeMobxAutorunDirective implements OnInit, OnDestroy {
     shouldDetach(): any;
     autoDetect(view: EmbeddedViewRef<any>): void;
     ngOnDestroy(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TreeMobxAutorunDirective, never>;
+    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<TreeMobxAutorunDirective, "[treeMobxAutorun]", never, { "treeMobxAutorun": "treeMobxAutorun"; }, {}, never, never, false>;
 }
+
+//# sourceMappingURL=tree-mobx-autorun.directive.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/mobx-angular/tree-mobx-autorun.directive.d.ts.__ivy_ngcc_bak b/node_modules/@circlon/angular-tree-component/lib/mobx-angular/tree-mobx-autorun.directive.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..db69c51
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/mobx-angular/tree-mobx-autorun.directive.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,14 @@
+import { ViewContainerRef, TemplateRef, OnInit, OnDestroy, EmbeddedViewRef } from '@angular/core';
+export declare class TreeMobxAutorunDirective implements OnInit, OnDestroy {
+    protected templateRef: TemplateRef<any>;
+    protected viewContainer: ViewContainerRef;
+    protected templateBindings: {};
+    protected dispose: any;
+    protected view: EmbeddedViewRef<any>;
+    treeMobxAutorun: any;
+    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef);
+    ngOnInit(): void;
+    shouldDetach(): any;
+    autoDetect(view: EmbeddedViewRef<any>): void;
+    ngOnDestroy(): void;
+}
diff --git a/node_modules/@circlon/angular-tree-component/lib/mobx-angular/tree-mobx-autorun.directive.d.ts.map b/node_modules/@circlon/angular-tree-component/lib/mobx-angular/tree-mobx-autorun.directive.d.ts.map
new file mode 100644
index 0000000..adcec91
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/mobx-angular/tree-mobx-autorun.directive.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree-mobx-autorun.directive.d.ts","sources":["tree-mobx-autorun.directive.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ViewContainerRef, TemplateRef, OnInit, OnDestroy, EmbeddedViewRef } from '@angular/core';\r\nexport declare class TreeMobxAutorunDirective implements OnInit, OnDestroy {\r\n    protected templateRef: TemplateRef<any>;\r\n    protected viewContainer: ViewContainerRef;\r\n    protected templateBindings: {};\r\n    protected dispose: any;\r\n    protected view: EmbeddedViewRef<any>;\r\n    treeMobxAutorun: any;\r\n    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef);\r\n    ngOnInit(): void;\r\n    shouldDetach(): any;\r\n    autoDetect(view: EmbeddedViewRef<any>): void;\r\n    ngOnDestroy(): void;\r\n}\r\n"]}
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/models/tree-dragged-element.model.d.ts b/node_modules/@circlon/angular-tree-component/lib/models/tree-dragged-element.model.d.ts
index d1970f9..3cd4c66 100644
--- a/node_modules/@circlon/angular-tree-component/lib/models/tree-dragged-element.model.d.ts
+++ b/node_modules/@circlon/angular-tree-component/lib/models/tree-dragged-element.model.d.ts
@@ -1,6 +1,10 @@
+import * as ɵngcc0 from '@angular/core';
 export declare class TreeDraggedElement {
     _draggedElement: any;
     set(draggedElement: any): void;
     get(): any;
     isDragging(): boolean;
+    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TreeDraggedElement, never>;
 }
+
+//# sourceMappingURL=tree-dragged-element.model.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/models/tree-dragged-element.model.d.ts.__ivy_ngcc_bak b/node_modules/@circlon/angular-tree-component/lib/models/tree-dragged-element.model.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..d1970f9
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/models/tree-dragged-element.model.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,6 @@
+export declare class TreeDraggedElement {
+    _draggedElement: any;
+    set(draggedElement: any): void;
+    get(): any;
+    isDragging(): boolean;
+}
diff --git a/node_modules/@circlon/angular-tree-component/lib/models/tree-dragged-element.model.d.ts.map b/node_modules/@circlon/angular-tree-component/lib/models/tree-dragged-element.model.d.ts.map
new file mode 100644
index 0000000..15abe70
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/models/tree-dragged-element.model.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree-dragged-element.model.d.ts","sources":["tree-dragged-element.model.d.ts"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["export declare class TreeDraggedElement {\r\n    _draggedElement: any;\r\n    set(draggedElement: any): void;\r\n    get(): any;\r\n    isDragging(): boolean;\r\n}\r\n"]}
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/models/tree-virtual-scroll.model.d.ts b/node_modules/@circlon/angular-tree-component/lib/models/tree-virtual-scroll.model.d.ts
index 0595888..a176fa8 100644
--- a/node_modules/@circlon/angular-tree-component/lib/models/tree-virtual-scroll.model.d.ts
+++ b/node_modules/@circlon/angular-tree-component/lib/models/tree-virtual-scroll.model.d.ts
@@ -1,4 +1,5 @@
 import { TreeModel } from './tree.model';
+import * as ɵngcc0 from '@angular/core';
 export declare class TreeVirtualScroll {
     private treeModel;
     private _dispose;
@@ -21,4 +22,8 @@ export declare class TreeVirtualScroll {
     scrollIntoView(node: any, force: any, scrollToMiddle?: boolean): void;
     getViewportNodes(nodes: any): any;
     fixScroll(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TreeVirtualScroll, never>;
+    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<TreeVirtualScroll>;
 }
+
+//# sourceMappingURL=tree-virtual-scroll.model.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/models/tree-virtual-scroll.model.d.ts.__ivy_ngcc_bak b/node_modules/@circlon/angular-tree-component/lib/models/tree-virtual-scroll.model.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..0595888
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/models/tree-virtual-scroll.model.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,24 @@
+import { TreeModel } from './tree.model';
+export declare class TreeVirtualScroll {
+    private treeModel;
+    private _dispose;
+    yBlocks: number;
+    x: number;
+    viewportHeight: any;
+    viewport: any;
+    get y(): number;
+    get totalHeight(): number;
+    constructor(treeModel: TreeModel);
+    fireEvent(event: any): void;
+    init(): void;
+    isEnabled(): boolean;
+    private _setYBlocks;
+    recalcPositions(): void;
+    private _getPositionAfter;
+    private _getPositionAfterNode;
+    clear(): void;
+    setViewport(viewport: any): void;
+    scrollIntoView(node: any, force: any, scrollToMiddle?: boolean): void;
+    getViewportNodes(nodes: any): any;
+    fixScroll(): void;
+}
diff --git a/node_modules/@circlon/angular-tree-component/lib/models/tree-virtual-scroll.model.d.ts.map b/node_modules/@circlon/angular-tree-component/lib/models/tree-virtual-scroll.model.d.ts.map
new file mode 100644
index 0000000..ccf8b8b
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/models/tree-virtual-scroll.model.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree-virtual-scroll.model.d.ts","sources":["tree-virtual-scroll.model.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { TreeModel } from './tree.model';\r\nexport declare class TreeVirtualScroll {\r\n    private treeModel;\r\n    private _dispose;\r\n    yBlocks: number;\r\n    x: number;\r\n    viewportHeight: any;\r\n    viewport: any;\r\n    get y(): number;\r\n    get totalHeight(): number;\r\n    constructor(treeModel: TreeModel);\r\n    fireEvent(event: any): void;\r\n    init(): void;\r\n    isEnabled(): boolean;\r\n    private _setYBlocks;\r\n    recalcPositions(): void;\r\n    private _getPositionAfter;\r\n    private _getPositionAfterNode;\r\n    clear(): void;\r\n    setViewport(viewport: any): void;\r\n    scrollIntoView(node: any, force: any, scrollToMiddle?: boolean): void;\r\n    getViewportNodes(nodes: any): any;\r\n    fixScroll(): void;\r\n}\r\n"]}
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/models/tree.model.d.ts b/node_modules/@circlon/angular-tree-component/lib/models/tree.model.d.ts
index cf61a95..d81ba71 100644
--- a/node_modules/@circlon/angular-tree-component/lib/models/tree.model.d.ts
+++ b/node_modules/@circlon/angular-tree-component/lib/models/tree.model.d.ts
@@ -3,6 +3,7 @@ import { TreeNode } from './tree-node.model';
 import { TreeOptions } from './tree-options.model';
 import { TreeVirtualScroll } from './tree-virtual-scroll.model';
 import { ITreeModel, IDType, IDTypeDictionary } from '../defs/api';
+import * as ɵngcc0 from '@angular/core';
 export declare class TreeModel implements ITreeModel, OnDestroy {
     static focusedTree: any;
     options: TreeOptions;
@@ -85,4 +86,8 @@ export declare class TreeModel implements ITreeModel, OnDestroy {
     private _calculateExpandedNodes;
     private _setActiveNodeSingle;
     private _setActiveNodeMulti;
+    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TreeModel, never>;
+    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<TreeModel>;
 }
+
+//# sourceMappingURL=tree.model.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@circlon/angular-tree-component/lib/models/tree.model.d.ts.__ivy_ngcc_bak b/node_modules/@circlon/angular-tree-component/lib/models/tree.model.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..cf61a95
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/models/tree.model.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,88 @@
+import { OnDestroy } from '@angular/core';
+import { TreeNode } from './tree-node.model';
+import { TreeOptions } from './tree-options.model';
+import { TreeVirtualScroll } from './tree-virtual-scroll.model';
+import { ITreeModel, IDType, IDTypeDictionary } from '../defs/api';
+export declare class TreeModel implements ITreeModel, OnDestroy {
+    static focusedTree: any;
+    options: TreeOptions;
+    nodes: any[];
+    eventNames: string[];
+    virtualScroll: TreeVirtualScroll;
+    roots: TreeNode[];
+    expandedNodeIds: IDTypeDictionary;
+    selectedLeafNodeIds: IDTypeDictionary;
+    activeNodeIds: IDTypeDictionary;
+    hiddenNodeIds: IDTypeDictionary;
+    focusedNodeId: IDType;
+    virtualRoot: TreeNode;
+    private firstUpdate;
+    private events;
+    private subscriptions;
+    fireEvent(event: any): void;
+    subscribe(eventName: any, fn: any): void;
+    getFocusedNode(): TreeNode;
+    getActiveNode(): TreeNode;
+    getActiveNodes(): TreeNode[];
+    getVisibleRoots(): TreeNode[];
+    getFirstRoot(skipHidden?: boolean): TreeNode;
+    getLastRoot(skipHidden?: boolean): TreeNode;
+    get isFocused(): boolean;
+    isNodeFocused(node: any): boolean;
+    isEmptyTree(): boolean;
+    get focusedNode(): any;
+    get expandedNodes(): any[];
+    get activeNodes(): any[];
+    get hiddenNodes(): any[];
+    get selectedLeafNodes(): any[];
+    getNodeByPath(path: any[], startNode?: any): TreeNode;
+    getNodeById(id: any): any;
+    getNodeBy(predicate: any, startNode?: any): any;
+    isExpanded(node: any): boolean;
+    isHidden(node: any): boolean;
+    isActive(node: any): boolean;
+    isSelected(node: any): boolean;
+    ngOnDestroy(): void;
+    dispose(): void;
+    unsubscribeAll(): void;
+    setData({ nodes, options, events }: {
+        nodes: any;
+        options: any;
+        events: any;
+    }): void;
+    update(): void;
+    setFocusedNode(node: any): void;
+    setFocus(value: any): void;
+    doForAll(fn: any): void;
+    focusNextNode(): void;
+    focusPreviousNode(): void;
+    focusDrillDown(): void;
+    focusDrillUp(): void;
+    setActiveNode(node: any, value: any, multi?: boolean): void;
+    setSelectedNode(node: any, value: any): void;
+    setExpandedNode(node: any, value: any): void;
+    expandAll(): void;
+    collapseAll(): void;
+    setIsHidden(node: any, value: any): void;
+    setHiddenNodeIds(nodeIds: any): void;
+    performKeyAction(node: any, $event: any): boolean;
+    filterNodes(filter: any, autoShow?: boolean): void;
+    clearFilter(): void;
+    moveNode(node: any, to: any): void;
+    copyNode(node: any, to: any): void;
+    getState(): {
+        expandedNodeIds: IDTypeDictionary;
+        selectedLeafNodeIds: IDTypeDictionary;
+        activeNodeIds: IDTypeDictionary;
+        hiddenNodeIds: IDTypeDictionary;
+        focusedNodeId: IDType;
+    };
+    setState(state: any): void;
+    subscribeToState(fn: any): void;
+    canMoveNode(node: any, to: any, fromIndex?: any): boolean;
+    calculateExpandedNodes(): void;
+    private _filterNode;
+    private _calculateExpandedNodes;
+    private _setActiveNodeSingle;
+    private _setActiveNodeMulti;
+}
diff --git a/node_modules/@circlon/angular-tree-component/lib/models/tree.model.d.ts.map b/node_modules/@circlon/angular-tree-component/lib/models/tree.model.d.ts.map
new file mode 100644
index 0000000..02a262b
--- /dev/null
+++ b/node_modules/@circlon/angular-tree-component/lib/models/tree.model.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree.model.d.ts","sources":["tree.model.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnDestroy } from '@angular/core';\r\nimport { TreeNode } from './tree-node.model';\r\nimport { TreeOptions } from './tree-options.model';\r\nimport { TreeVirtualScroll } from './tree-virtual-scroll.model';\r\nimport { ITreeModel, IDType, IDTypeDictionary } from '../defs/api';\r\nexport declare class TreeModel implements ITreeModel, OnDestroy {\r\n    static focusedTree: any;\r\n    options: TreeOptions;\r\n    nodes: any[];\r\n    eventNames: string[];\r\n    virtualScroll: TreeVirtualScroll;\r\n    roots: TreeNode[];\r\n    expandedNodeIds: IDTypeDictionary;\r\n    selectedLeafNodeIds: IDTypeDictionary;\r\n    activeNodeIds: IDTypeDictionary;\r\n    hiddenNodeIds: IDTypeDictionary;\r\n    focusedNodeId: IDType;\r\n    virtualRoot: TreeNode;\r\n    private firstUpdate;\r\n    private events;\r\n    private subscriptions;\r\n    fireEvent(event: any): void;\r\n    subscribe(eventName: any, fn: any): void;\r\n    getFocusedNode(): TreeNode;\r\n    getActiveNode(): TreeNode;\r\n    getActiveNodes(): TreeNode[];\r\n    getVisibleRoots(): TreeNode[];\r\n    getFirstRoot(skipHidden?: boolean): TreeNode;\r\n    getLastRoot(skipHidden?: boolean): TreeNode;\r\n    get isFocused(): boolean;\r\n    isNodeFocused(node: any): boolean;\r\n    isEmptyTree(): boolean;\r\n    get focusedNode(): any;\r\n    get expandedNodes(): any[];\r\n    get activeNodes(): any[];\r\n    get hiddenNodes(): any[];\r\n    get selectedLeafNodes(): any[];\r\n    getNodeByPath(path: any[], startNode?: any): TreeNode;\r\n    getNodeById(id: any): any;\r\n    getNodeBy(predicate: any, startNode?: any): any;\r\n    isExpanded(node: any): boolean;\r\n    isHidden(node: any): boolean;\r\n    isActive(node: any): boolean;\r\n    isSelected(node: any): boolean;\r\n    ngOnDestroy(): void;\r\n    dispose(): void;\r\n    unsubscribeAll(): void;\r\n    setData({ nodes, options, events }: {\r\n        nodes: any;\r\n        options: any;\r\n        events: any;\r\n    }): void;\r\n    update(): void;\r\n    setFocusedNode(node: any): void;\r\n    setFocus(value: any): void;\r\n    doForAll(fn: any): void;\r\n    focusNextNode(): void;\r\n    focusPreviousNode(): void;\r\n    focusDrillDown(): void;\r\n    focusDrillUp(): void;\r\n    setActiveNode(node: any, value: any, multi?: boolean): void;\r\n    setSelectedNode(node: any, value: any): void;\r\n    setExpandedNode(node: any, value: any): void;\r\n    expandAll(): void;\r\n    collapseAll(): void;\r\n    setIsHidden(node: any, value: any): void;\r\n    setHiddenNodeIds(nodeIds: any): void;\r\n    performKeyAction(node: any, $event: any): boolean;\r\n    filterNodes(filter: any, autoShow?: boolean): void;\r\n    clearFilter(): void;\r\n    moveNode(node: any, to: any): void;\r\n    copyNode(node: any, to: any): void;\r\n    getState(): {\r\n        expandedNodeIds: IDTypeDictionary;\r\n        selectedLeafNodeIds: IDTypeDictionary;\r\n        activeNodeIds: IDTypeDictionary;\r\n        hiddenNodeIds: IDTypeDictionary;\r\n        focusedNodeId: IDType;\r\n    };\r\n    setState(state: any): void;\r\n    subscribeToState(fn: any): void;\r\n    canMoveNode(node: any, to: any, fromIndex?: any): boolean;\r\n    calculateExpandedNodes(): void;\r\n    private _filterNode;\r\n    private _calculateExpandedNodes;\r\n    private _setActiveNodeSingle;\r\n    private _setActiveNodeMulti;\r\n}\r\n"]}
\ No newline at end of file
